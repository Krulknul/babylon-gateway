/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityOverviewResponseEntityItem } from './EntityOverviewResponseEntityItem';
import {
    EntityOverviewResponseEntityItemFromJSON,
    EntityOverviewResponseEntityItemFromJSONTyped,
    EntityOverviewResponseEntityItemToJSON,
} from './EntityOverviewResponseEntityItem';
import type { LedgerState } from './LedgerState';
import {
    LedgerStateFromJSON,
    LedgerStateFromJSONTyped,
    LedgerStateToJSON,
} from './LedgerState';

/**
 * 
 * @export
 * @interface EntityOverviewResponse
 */
export interface EntityOverviewResponse {
    /**
     * 
     * @type {LedgerState}
     * @memberof EntityOverviewResponse
     */
    ledger_state: LedgerState;
    /**
     * 
     * @type {Array<EntityOverviewResponseEntityItem>}
     * @memberof EntityOverviewResponse
     */
    entities: Array<EntityOverviewResponseEntityItem>;
}

/**
 * Check if a given object implements the EntityOverviewResponse interface.
 */
export function instanceOfEntityOverviewResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ledger_state" in value;
    isInstance = isInstance && "entities" in value;

    return isInstance;
}

export function EntityOverviewResponseFromJSON(json: any): EntityOverviewResponse {
    return EntityOverviewResponseFromJSONTyped(json, false);
}

export function EntityOverviewResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityOverviewResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ledger_state': LedgerStateFromJSON(json['ledger_state']),
        'entities': ((json['entities'] as Array<any>).map(EntityOverviewResponseEntityItemFromJSON)),
    };
}

export function EntityOverviewResponseToJSON(value?: EntityOverviewResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ledger_state': LedgerStateToJSON(value.ledger_state),
        'entities': ((value.entities as Array<any>).map(EntityOverviewResponseEntityItemToJSON)),
    };
}

