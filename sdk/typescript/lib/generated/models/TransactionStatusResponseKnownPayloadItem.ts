/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Gateway API - RCnet V3
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionPayloadGatewayHandlingStatus } from './TransactionPayloadGatewayHandlingStatus';
import {
    TransactionPayloadGatewayHandlingStatusFromJSON,
    TransactionPayloadGatewayHandlingStatusFromJSONTyped,
    TransactionPayloadGatewayHandlingStatusToJSON,
} from './TransactionPayloadGatewayHandlingStatus';
import type { TransactionPayloadStatus } from './TransactionPayloadStatus';
import {
    TransactionPayloadStatusFromJSON,
    TransactionPayloadStatusFromJSONTyped,
    TransactionPayloadStatusToJSON,
} from './TransactionPayloadStatus';
import type { TransactionStatus } from './TransactionStatus';
import {
    TransactionStatusFromJSON,
    TransactionStatusFromJSONTyped,
    TransactionStatusToJSON,
} from './TransactionStatus';

/**
 * 
 * @export
 * @interface TransactionStatusResponseKnownPayloadItem
 */
export interface TransactionStatusResponseKnownPayloadItem {
    /**
     * Bech32m-encoded hash.
     * @type {string}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    payload_hash: string;
    /**
     * 
     * @type {TransactionStatus}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    status: TransactionStatus;
    /**
     * 
     * @type {TransactionPayloadStatus}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    payload_status?: TransactionPayloadStatus;
    /**
     * An additional description to clarify the payload status.
     * @type {string}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    payload_status_description?: string;
    /**
     * An error message received for a rejection or failure during transaction execution.
     * Please note that presence of an error message doesn't imply that this payload
     * will definitely reject or fail. This could represent an error during a temporary
     * rejection (such as out of fees) which then gets resolved (e.g. by depositing money
     * to pay the fee), allowing the transaction to be committed.
     * @type {string}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    error_message?: string | null;
    /**
     * 
     * @type {TransactionPayloadGatewayHandlingStatus}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    handling_status?: TransactionPayloadGatewayHandlingStatus;
    /**
     * Additional reason for why the Gateway has its current handling status.
     * @type {string}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    handling_status_reason?: string | null;
    /**
     * The most recent error message received when submitting this transaction to the network.
     * Please note that the presence of an error message doesn't imply that this transaction
     * payload will definitely reject or fail. This could be a transient error.
     * @type {string}
     * @memberof TransactionStatusResponseKnownPayloadItem
     */
    submission_error?: string | null;
}

/**
 * Check if a given object implements the TransactionStatusResponseKnownPayloadItem interface.
 */
export function instanceOfTransactionStatusResponseKnownPayloadItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "payload_hash" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function TransactionStatusResponseKnownPayloadItemFromJSON(json: any): TransactionStatusResponseKnownPayloadItem {
    return TransactionStatusResponseKnownPayloadItemFromJSONTyped(json, false);
}

export function TransactionStatusResponseKnownPayloadItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionStatusResponseKnownPayloadItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'payload_hash': json['payload_hash'],
        'status': TransactionStatusFromJSON(json['status']),
        'payload_status': !exists(json, 'payload_status') ? undefined : TransactionPayloadStatusFromJSON(json['payload_status']),
        'payload_status_description': !exists(json, 'payload_status_description') ? undefined : json['payload_status_description'],
        'error_message': !exists(json, 'error_message') ? undefined : json['error_message'],
        'handling_status': !exists(json, 'handling_status') ? undefined : TransactionPayloadGatewayHandlingStatusFromJSON(json['handling_status']),
        'handling_status_reason': !exists(json, 'handling_status_reason') ? undefined : json['handling_status_reason'],
        'submission_error': !exists(json, 'submission_error') ? undefined : json['submission_error'],
    };
}

export function TransactionStatusResponseKnownPayloadItemToJSON(value?: TransactionStatusResponseKnownPayloadItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'payload_hash': value.payload_hash,
        'status': TransactionStatusToJSON(value.status),
        'payload_status': TransactionPayloadStatusToJSON(value.payload_status),
        'payload_status_description': value.payload_status_description,
        'error_message': value.error_message,
        'handling_status': TransactionPayloadGatewayHandlingStatusToJSON(value.handling_status),
        'handling_status_reason': value.handling_status_reason,
        'submission_error': value.submission_error,
    };
}

