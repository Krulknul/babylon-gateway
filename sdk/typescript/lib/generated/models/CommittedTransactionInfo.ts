/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenAmount } from './TokenAmount';
import {
    TokenAmountFromJSON,
    TokenAmountFromJSONTyped,
    TokenAmountToJSON,
} from './TokenAmount';
import type { TransactionStatus } from './TransactionStatus';
import {
    TransactionStatusFromJSON,
    TransactionStatusFromJSONTyped,
    TransactionStatusToJSON,
} from './TransactionStatus';

/**
 * 
 * @export
 * @interface CommittedTransactionInfo
 */
export interface CommittedTransactionInfo {
    /**
     * 
     * @type {number}
     * @memberof CommittedTransactionInfo
     */
    state_version: number | null;
    /**
     * 
     * @type {TransactionStatus}
     * @memberof CommittedTransactionInfo
     */
    transaction_status: TransactionStatus;
    /**
     * 
     * @type {string}
     * @memberof CommittedTransactionInfo
     */
    payload_hash_hex: string;
    /**
     * 
     * @type {string}
     * @memberof CommittedTransactionInfo
     */
    intent_hash_hex: string;
    /**
     * 
     * @type {TokenAmount}
     * @memberof CommittedTransactionInfo
     */
    fee_paid?: TokenAmount;
    /**
     * 
     * @type {Date}
     * @memberof CommittedTransactionInfo
     */
    confirmed_at?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CommittedTransactionInfo
     */
    error_message?: string | null;
}

/**
 * Check if a given object implements the CommittedTransactionInfo interface.
 */
export function instanceOfCommittedTransactionInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "state_version" in value;
    isInstance = isInstance && "transaction_status" in value;
    isInstance = isInstance && "payload_hash_hex" in value;
    isInstance = isInstance && "intent_hash_hex" in value;

    return isInstance;
}

export function CommittedTransactionInfoFromJSON(json: any): CommittedTransactionInfo {
    return CommittedTransactionInfoFromJSONTyped(json, false);
}

export function CommittedTransactionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommittedTransactionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'state_version': json['state_version'],
        'transaction_status': TransactionStatusFromJSON(json['transaction_status']),
        'payload_hash_hex': json['payload_hash_hex'],
        'intent_hash_hex': json['intent_hash_hex'],
        'fee_paid': !exists(json, 'fee_paid') ? undefined : TokenAmountFromJSON(json['fee_paid']),
        'confirmed_at': !exists(json, 'confirmed_at') ? undefined : (json['confirmed_at'] === null ? null : new Date(json['confirmed_at'])),
        'error_message': !exists(json, 'error_message') ? undefined : json['error_message'],
    };
}

export function CommittedTransactionInfoToJSON(value?: CommittedTransactionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'state_version': value.state_version,
        'transaction_status': TransactionStatusToJSON(value.transaction_status),
        'payload_hash_hex': value.payload_hash_hex,
        'intent_hash_hex': value.intent_hash_hex,
        'fee_paid': TokenAmountToJSON(value.fee_paid),
        'confirmed_at': value.confirmed_at === undefined ? undefined : (value.confirmed_at === null ? null : value.confirmed_at.toISOString()),
        'error_message': value.error_message,
    };
}

