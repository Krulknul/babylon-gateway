/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenAmount } from './TokenAmount';
import {
    TokenAmountFromJSON,
    TokenAmountFromJSONTyped,
    TokenAmountToJSON,
} from './TokenAmount';
import type { TransactionStatus } from './TransactionStatus';
import {
    TransactionStatusFromJSON,
    TransactionStatusFromJSONTyped,
    TransactionStatusToJSON,
} from './TransactionStatus';

/**
 * 
 * @export
 * @interface TransactionInfo
 */
export interface TransactionInfo {
    /**
     * 
     * @type {TransactionStatus}
     * @memberof TransactionInfo
     */
    transaction_status: TransactionStatus;
    /**
     * 
     * @type {string}
     * @memberof TransactionInfo
     */
    payload_hash_hex: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionInfo
     */
    intent_hash_hex: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionInfo
     */
    transaction_accumulator_hex: string;
    /**
     * 
     * @type {TokenAmount}
     * @memberof TransactionInfo
     */
    fee_paid: TokenAmount;
}

/**
 * Check if a given object implements the TransactionInfo interface.
 */
export function instanceOfTransactionInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transaction_status" in value;
    isInstance = isInstance && "payload_hash_hex" in value;
    isInstance = isInstance && "intent_hash_hex" in value;
    isInstance = isInstance && "transaction_accumulator_hex" in value;
    isInstance = isInstance && "fee_paid" in value;

    return isInstance;
}

export function TransactionInfoFromJSON(json: any): TransactionInfo {
    return TransactionInfoFromJSONTyped(json, false);
}

export function TransactionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transaction_status': TransactionStatusFromJSON(json['transaction_status']),
        'payload_hash_hex': json['payload_hash_hex'],
        'intent_hash_hex': json['intent_hash_hex'],
        'transaction_accumulator_hex': json['transaction_accumulator_hex'],
        'fee_paid': TokenAmountFromJSON(json['fee_paid']),
    };
}

export function TransactionInfoToJSON(value?: TransactionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction_status': TransactionStatusToJSON(value.transaction_status),
        'payload_hash_hex': value.payload_hash_hex,
        'intent_hash_hex': value.intent_hash_hex,
        'transaction_accumulator_hex': value.transaction_accumulator_hex,
        'fee_paid': TokenAmountToJSON(value.fee_paid),
    };
}

