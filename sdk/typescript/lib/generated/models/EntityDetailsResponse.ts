/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityDetailsResponseDetails } from './EntityDetailsResponseDetails';
import {
    EntityDetailsResponseDetailsFromJSON,
    EntityDetailsResponseDetailsFromJSONTyped,
    EntityDetailsResponseDetailsToJSON,
} from './EntityDetailsResponseDetails';
import type { EntityMetadataCollection } from './EntityMetadataCollection';
import {
    EntityMetadataCollectionFromJSON,
    EntityMetadataCollectionFromJSONTyped,
    EntityMetadataCollectionToJSON,
} from './EntityMetadataCollection';
import type { LedgerState } from './LedgerState';
import {
    LedgerStateFromJSON,
    LedgerStateFromJSONTyped,
    LedgerStateToJSON,
} from './LedgerState';

/**
 * 
 * @export
 * @interface EntityDetailsResponse
 */
export interface EntityDetailsResponse {
    /**
     * 
     * @type {LedgerState}
     * @memberof EntityDetailsResponse
     */
    ledger_state: LedgerState;
    /**
     * The Bech32m-encoded human readable version of the entity's global address.
     * @type {string}
     * @memberof EntityDetailsResponse
     */
    address: string;
    /**
     * 
     * @type {EntityMetadataCollection}
     * @memberof EntityDetailsResponse
     */
    metadata: EntityMetadataCollection;
    /**
     * 
     * @type {EntityDetailsResponseDetails}
     * @memberof EntityDetailsResponse
     */
    details: EntityDetailsResponseDetails;
}

/**
 * Check if a given object implements the EntityDetailsResponse interface.
 */
export function instanceOfEntityDetailsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ledger_state" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "details" in value;

    return isInstance;
}

export function EntityDetailsResponseFromJSON(json: any): EntityDetailsResponse {
    return EntityDetailsResponseFromJSONTyped(json, false);
}

export function EntityDetailsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityDetailsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ledger_state': LedgerStateFromJSON(json['ledger_state']),
        'address': json['address'],
        'metadata': EntityMetadataCollectionFromJSON(json['metadata']),
        'details': EntityDetailsResponseDetailsFromJSON(json['details']),
    };
}

export function EntityDetailsResponseToJSON(value?: EntityDetailsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ledger_state': LedgerStateToJSON(value.ledger_state),
        'address': value.address,
        'metadata': EntityMetadataCollectionToJSON(value.metadata),
        'details': EntityDetailsResponseDetailsToJSON(value.details),
    };
}

