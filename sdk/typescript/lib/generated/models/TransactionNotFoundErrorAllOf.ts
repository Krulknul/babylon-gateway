/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionCommittedDetailsRequestIdentifier } from './TransactionCommittedDetailsRequestIdentifier';
import {
    TransactionCommittedDetailsRequestIdentifierFromJSON,
    TransactionCommittedDetailsRequestIdentifierFromJSONTyped,
    TransactionCommittedDetailsRequestIdentifierToJSON,
} from './TransactionCommittedDetailsRequestIdentifier';

/**
 * 
 * @export
 * @interface TransactionNotFoundErrorAllOf
 */
export interface TransactionNotFoundErrorAllOf {
    /**
     * 
     * @type {TransactionCommittedDetailsRequestIdentifier}
     * @memberof TransactionNotFoundErrorAllOf
     */
    transaction_not_found: TransactionCommittedDetailsRequestIdentifier;
}

/**
 * Check if a given object implements the TransactionNotFoundErrorAllOf interface.
 */
export function instanceOfTransactionNotFoundErrorAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transaction_not_found" in value;

    return isInstance;
}

export function TransactionNotFoundErrorAllOfFromJSON(json: any): TransactionNotFoundErrorAllOf {
    return TransactionNotFoundErrorAllOfFromJSONTyped(json, false);
}

export function TransactionNotFoundErrorAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionNotFoundErrorAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transaction_not_found': TransactionCommittedDetailsRequestIdentifierFromJSON(json['transaction_not_found']),
    };
}

export function TransactionNotFoundErrorAllOfToJSON(value?: TransactionNotFoundErrorAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction_not_found': TransactionCommittedDetailsRequestIdentifierToJSON(value.transaction_not_found),
    };
}

