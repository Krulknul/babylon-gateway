/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PublicKeyEddsaEd25519AllOf
 */
export interface PublicKeyEddsaEd25519AllOf {
    /**
     * The hex-encoded compressed EdDSA Ed25519 public key (32 bytes)
     * @type {string}
     * @memberof PublicKeyEddsaEd25519AllOf
     */
    key_hex: string;
}

/**
 * Check if a given object implements the PublicKeyEddsaEd25519AllOf interface.
 */
export function instanceOfPublicKeyEddsaEd25519AllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "key_hex" in value;

    return isInstance;
}

export function PublicKeyEddsaEd25519AllOfFromJSON(json: any): PublicKeyEddsaEd25519AllOf {
    return PublicKeyEddsaEd25519AllOfFromJSONTyped(json, false);
}

export function PublicKeyEddsaEd25519AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicKeyEddsaEd25519AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key_hex': json['key_hex'],
    };
}

export function PublicKeyEddsaEd25519AllOfToJSON(value?: PublicKeyEddsaEd25519AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key_hex': value.key_hex,
    };
}

