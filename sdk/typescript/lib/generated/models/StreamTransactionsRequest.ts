/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LedgerStateSelector } from './LedgerStateSelector';
import {
    LedgerStateSelectorFromJSON,
    LedgerStateSelectorFromJSONTyped,
    LedgerStateSelectorToJSON,
} from './LedgerStateSelector';

/**
 * 
 * @export
 * @interface StreamTransactionsRequest
 */
export interface StreamTransactionsRequest {
    /**
     * 
     * @type {LedgerStateSelector}
     * @memberof StreamTransactionsRequest
     */
    at_ledger_state?: LedgerStateSelector | null;
    /**
     * This cursor allows forward pagination, by providing the cursor from the previous request.
     * @type {string}
     * @memberof StreamTransactionsRequest
     */
    cursor?: string | null;
    /**
     * The page size requested.
     * @type {number}
     * @memberof StreamTransactionsRequest
     */
    limit_per_page?: number | null;
    /**
     * 
     * @type {LedgerStateSelector}
     * @memberof StreamTransactionsRequest
     */
    from_ledger_state?: LedgerStateSelector | null;
    /**
     * Limit returned transactions by their kind. Defaults to `user`.
     * @type {string}
     * @memberof StreamTransactionsRequest
     */
    kind_filter?: StreamTransactionsRequestKindFilterEnum;
    /**
     * Configures the order of returned result set. Defaults to `desc`.
     * @type {string}
     * @memberof StreamTransactionsRequest
     */
    order?: StreamTransactionsRequestOrderEnum;
}


/**
 * @export
 */
export const StreamTransactionsRequestKindFilterEnum = {
    User: 'User',
    EpochChange: 'EpochChange',
    All: 'All'
} as const;
export type StreamTransactionsRequestKindFilterEnum = typeof StreamTransactionsRequestKindFilterEnum[keyof typeof StreamTransactionsRequestKindFilterEnum];

/**
 * @export
 */
export const StreamTransactionsRequestOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type StreamTransactionsRequestOrderEnum = typeof StreamTransactionsRequestOrderEnum[keyof typeof StreamTransactionsRequestOrderEnum];


/**
 * Check if a given object implements the StreamTransactionsRequest interface.
 */
export function instanceOfStreamTransactionsRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StreamTransactionsRequestFromJSON(json: any): StreamTransactionsRequest {
    return StreamTransactionsRequestFromJSONTyped(json, false);
}

export function StreamTransactionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamTransactionsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'at_ledger_state': !exists(json, 'at_ledger_state') ? undefined : LedgerStateSelectorFromJSON(json['at_ledger_state']),
        'cursor': !exists(json, 'cursor') ? undefined : json['cursor'],
        'limit_per_page': !exists(json, 'limit_per_page') ? undefined : json['limit_per_page'],
        'from_ledger_state': !exists(json, 'from_ledger_state') ? undefined : LedgerStateSelectorFromJSON(json['from_ledger_state']),
        'kind_filter': !exists(json, 'kind_filter') ? undefined : json['kind_filter'],
        'order': !exists(json, 'order') ? undefined : json['order'],
    };
}

export function StreamTransactionsRequestToJSON(value?: StreamTransactionsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'at_ledger_state': LedgerStateSelectorToJSON(value.at_ledger_state),
        'cursor': value.cursor,
        'limit_per_page': value.limit_per_page,
        'from_ledger_state': LedgerStateSelectorToJSON(value.from_ledger_state),
        'kind_filter': value.kind_filter,
        'order': value.order,
    };
}

