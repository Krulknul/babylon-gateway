/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountIdentifier } from './AccountIdentifier';
import {
    AccountIdentifierFromJSON,
    AccountIdentifierFromJSONTyped,
    AccountIdentifierToJSON,
} from './AccountIdentifier';

/**
 * 
 * @export
 * @interface TokenProperties
 */
export interface TokenProperties {
    /**
     * 
     * @type {string}
     * @memberof TokenProperties
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TokenProperties
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof TokenProperties
     */
    icon_url: string;
    /**
     * 
     * @type {string}
     * @memberof TokenProperties
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof TokenProperties
     */
    symbol: string;
    /**
     * If true, the token is allowed to be minted/burned by the owner.
     * @type {boolean}
     * @memberof TokenProperties
     */
    is_supply_mutable: boolean;
    /**
     * 
     * @type {string}
     * @memberof TokenProperties
     */
    granularity: string;
    /**
     * 
     * @type {AccountIdentifier}
     * @memberof TokenProperties
     */
    owner?: AccountIdentifier;
}

/**
 * Check if a given object implements the TokenProperties interface.
 */
export function instanceOfTokenProperties(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "icon_url" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "is_supply_mutable" in value;
    isInstance = isInstance && "granularity" in value;

    return isInstance;
}

export function TokenPropertiesFromJSON(json: any): TokenProperties {
    return TokenPropertiesFromJSONTyped(json, false);
}

export function TokenPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenProperties {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'icon_url': json['icon_url'],
        'url': json['url'],
        'symbol': json['symbol'],
        'is_supply_mutable': json['is_supply_mutable'],
        'granularity': json['granularity'],
        'owner': !exists(json, 'owner') ? undefined : AccountIdentifierFromJSON(json['owner']),
    };
}

export function TokenPropertiesToJSON(value?: TokenProperties | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'icon_url': value.icon_url,
        'url': value.url,
        'symbol': value.symbol,
        'is_supply_mutable': value.is_supply_mutable,
        'granularity': value.granularity,
        'owner': AccountIdentifierToJSON(value.owner),
    };
}

