/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenAmount } from './TokenAmount';
import {
    TokenAmountFromJSON,
    TokenAmountFromJSONTyped,
    TokenAmountToJSON,
} from './TokenAmount';

/**
 * 
 * @export
 * @interface FungibleResourcesCollectionItem
 */
export interface FungibleResourcesCollectionItem {
    /**
     * The Bech32m-encoded human readable version of the resource (fungible, non-fungible) global address.
     * @type {string}
     * @memberof FungibleResourcesCollectionItem
     */
    address: string;
    /**
     * 
     * @type {TokenAmount}
     * @memberof FungibleResourcesCollectionItem
     */
    amount: TokenAmount;
}

/**
 * Check if a given object implements the FungibleResourcesCollectionItem interface.
 */
export function instanceOfFungibleResourcesCollectionItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "amount" in value;

    return isInstance;
}

export function FungibleResourcesCollectionItemFromJSON(json: any): FungibleResourcesCollectionItem {
    return FungibleResourcesCollectionItemFromJSONTyped(json, false);
}

export function FungibleResourcesCollectionItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): FungibleResourcesCollectionItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'amount': TokenAmountFromJSON(json['amount']),
    };
}

export function FungibleResourcesCollectionItemToJSON(value?: FungibleResourcesCollectionItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'amount': TokenAmountToJSON(value.amount),
    };
}

