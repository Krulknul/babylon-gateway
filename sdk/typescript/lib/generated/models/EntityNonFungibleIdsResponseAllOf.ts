/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NonFungibleIdsCollection } from './NonFungibleIdsCollection';
import {
    NonFungibleIdsCollectionFromJSON,
    NonFungibleIdsCollectionFromJSONTyped,
    NonFungibleIdsCollectionToJSON,
} from './NonFungibleIdsCollection';

/**
 * 
 * @export
 * @interface EntityNonFungibleIdsResponseAllOf
 */
export interface EntityNonFungibleIdsResponseAllOf {
    /**
     * The Bech32m-encoded human readable version of the entity's global address.
     * @type {string}
     * @memberof EntityNonFungibleIdsResponseAllOf
     */
    address: string;
    /**
     * The Bech32m-encoded human readable version of the resource (fungible, non-fungible) global address.
     * @type {string}
     * @memberof EntityNonFungibleIdsResponseAllOf
     */
    resource_address: string;
    /**
     * 
     * @type {NonFungibleIdsCollection}
     * @memberof EntityNonFungibleIdsResponseAllOf
     */
    non_fungible_ids: NonFungibleIdsCollection;
}

/**
 * Check if a given object implements the EntityNonFungibleIdsResponseAllOf interface.
 */
export function instanceOfEntityNonFungibleIdsResponseAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "resource_address" in value;
    isInstance = isInstance && "non_fungible_ids" in value;

    return isInstance;
}

export function EntityNonFungibleIdsResponseAllOfFromJSON(json: any): EntityNonFungibleIdsResponseAllOf {
    return EntityNonFungibleIdsResponseAllOfFromJSONTyped(json, false);
}

export function EntityNonFungibleIdsResponseAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityNonFungibleIdsResponseAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'resource_address': json['resource_address'],
        'non_fungible_ids': NonFungibleIdsCollectionFromJSON(json['non_fungible_ids']),
    };
}

export function EntityNonFungibleIdsResponseAllOfToJSON(value?: EntityNonFungibleIdsResponseAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'resource_address': value.resource_address,
        'non_fungible_ids': NonFungibleIdsCollectionToJSON(value.non_fungible_ids),
    };
}

