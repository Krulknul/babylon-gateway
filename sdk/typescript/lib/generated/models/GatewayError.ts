/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     EntityNotFoundErrorFromJSONTyped,
     InternalServerErrorFromJSONTyped,
     InvalidEntityErrorFromJSONTyped,
     InvalidRequestErrorFromJSONTyped,
     InvalidTransactionErrorFromJSONTyped,
     NotSyncedUpErrorFromJSONTyped,
     TransactionNotFoundErrorFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface GatewayError
 */
export interface GatewayError {
    /**
     * The type of error. Each subtype may have its own additional structured fields.
     * @type {string}
     * @memberof GatewayError
     */
    type: string;
}

/**
 * Check if a given object implements the GatewayError interface.
 */
export function instanceOfGatewayError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GatewayErrorFromJSON(json: any): GatewayError {
    return GatewayErrorFromJSONTyped(json, false);
}

export function GatewayErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): GatewayError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'EntityNotFoundError') {
            return EntityNotFoundErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InternalServerError') {
            return InternalServerErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InvalidEntityError') {
            return InvalidEntityErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InvalidRequestError') {
            return InvalidRequestErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InvalidTransactionError') {
            return InvalidTransactionErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'NotSyncedUpError') {
            return NotSyncedUpErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'TransactionNotFoundError') {
            return TransactionNotFoundErrorFromJSONTyped(json, true);
        }
    }
    return {
        
        'type': json['type'],
    };
}

export function GatewayErrorToJSON(value?: GatewayError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
    };
}

