/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     EntityNotFoundErrorFromJSONTyped,
     InternalServerErrorFromJSONTyped,
     InvalidEntityErrorFromJSONTyped,
     InvalidRequestErrorFromJSONTyped,
     InvalidTransactionErrorFromJSONTyped,
     NotSyncedUpErrorFromJSONTyped,
     TransactionNotFoundErrorFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface GatewayError
 */
export interface GatewayError {
    /**
     * The type of error. Each subtype may have its own additional structured fields.
     * @type {string}
     * @memberof GatewayError
     */
    type: string;
}

/**
 * Check if a given object implements the GatewayError interface.
 */
export function instanceOfGatewayError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GatewayErrorFromJSON(json: any): GatewayError {
    return GatewayErrorFromJSONTyped(json, false);
}

export function GatewayErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): GatewayError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'EntityNotFoundError') {
            return EntityNotFoundErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InternalServerError') {
            return InternalServerErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InvalidEntityError') {
            return InvalidEntityErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InvalidRequestError') {
            return InvalidRequestErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'InvalidTransactionError') {
            return InvalidTransactionErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'NotSyncedUpError') {
            return NotSyncedUpErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'TransactionNotFoundError') {
            return TransactionNotFoundErrorFromJSONTyped(json, true);
        }
    }
    return {
        
        'type': json['type'],
    };
}

export function GatewayErrorToJSON(value?: GatewayError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
    };
}

