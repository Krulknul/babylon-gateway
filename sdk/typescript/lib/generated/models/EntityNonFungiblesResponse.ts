/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LedgerState } from './LedgerState';
import {
    LedgerStateFromJSON,
    LedgerStateFromJSONTyped,
    LedgerStateToJSON,
} from './LedgerState';
import type { NonFungibleResourcesCollection } from './NonFungibleResourcesCollection';
import {
    NonFungibleResourcesCollectionFromJSON,
    NonFungibleResourcesCollectionFromJSONTyped,
    NonFungibleResourcesCollectionToJSON,
} from './NonFungibleResourcesCollection';

/**
 * 
 * @export
 * @interface EntityNonFungiblesResponse
 */
export interface EntityNonFungiblesResponse {
    /**
     * 
     * @type {LedgerState}
     * @memberof EntityNonFungiblesResponse
     */
    ledger_state: LedgerState;
    /**
     * Bech32m-encoded human readable version of the entity's global address.
     * @type {string}
     * @memberof EntityNonFungiblesResponse
     */
    address: string;
    /**
     * 
     * @type {NonFungibleResourcesCollection}
     * @memberof EntityNonFungiblesResponse
     */
    non_fungibles: NonFungibleResourcesCollection;
}

/**
 * Check if a given object implements the EntityNonFungiblesResponse interface.
 */
export function instanceOfEntityNonFungiblesResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ledger_state" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "non_fungibles" in value;

    return isInstance;
}

export function EntityNonFungiblesResponseFromJSON(json: any): EntityNonFungiblesResponse {
    return EntityNonFungiblesResponseFromJSONTyped(json, false);
}

export function EntityNonFungiblesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityNonFungiblesResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ledger_state': LedgerStateFromJSON(json['ledger_state']),
        'address': json['address'],
        'non_fungibles': NonFungibleResourcesCollectionFromJSON(json['non_fungibles']),
    };
}

export function EntityNonFungiblesResponseToJSON(value?: EntityNonFungiblesResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ledger_state': LedgerStateToJSON(value.ledger_state),
        'address': value.address,
        'non_fungibles': NonFungibleResourcesCollectionToJSON(value.non_fungibles),
    };
}

