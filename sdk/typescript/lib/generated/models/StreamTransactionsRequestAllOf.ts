/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LedgerStateSelector } from './LedgerStateSelector';
import {
    LedgerStateSelectorFromJSON,
    LedgerStateSelectorFromJSONTyped,
    LedgerStateSelectorToJSON,
} from './LedgerStateSelector';

/**
 * 
 * @export
 * @interface StreamTransactionsRequestAllOf
 */
export interface StreamTransactionsRequestAllOf {
    /**
     * 
     * @type {LedgerStateSelector}
     * @memberof StreamTransactionsRequestAllOf
     */
    from_ledger_state?: LedgerStateSelector | null;
    /**
     * Limit returned transactions by their kind. Defaults to `user`.
     * @type {string}
     * @memberof StreamTransactionsRequestAllOf
     */
    kind_filter?: StreamTransactionsRequestAllOfKindFilterEnum;
    /**
     * Configures the order of returned result set. Defaults to `desc`.
     * @type {string}
     * @memberof StreamTransactionsRequestAllOf
     */
    order?: StreamTransactionsRequestAllOfOrderEnum;
}


/**
 * @export
 */
export const StreamTransactionsRequestAllOfKindFilterEnum = {
    User: 'User',
    EpochChange: 'EpochChange',
    All: 'All'
} as const;
export type StreamTransactionsRequestAllOfKindFilterEnum = typeof StreamTransactionsRequestAllOfKindFilterEnum[keyof typeof StreamTransactionsRequestAllOfKindFilterEnum];

/**
 * @export
 */
export const StreamTransactionsRequestAllOfOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type StreamTransactionsRequestAllOfOrderEnum = typeof StreamTransactionsRequestAllOfOrderEnum[keyof typeof StreamTransactionsRequestAllOfOrderEnum];


/**
 * Check if a given object implements the StreamTransactionsRequestAllOf interface.
 */
export function instanceOfStreamTransactionsRequestAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StreamTransactionsRequestAllOfFromJSON(json: any): StreamTransactionsRequestAllOf {
    return StreamTransactionsRequestAllOfFromJSONTyped(json, false);
}

export function StreamTransactionsRequestAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamTransactionsRequestAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from_ledger_state': !exists(json, 'from_ledger_state') ? undefined : LedgerStateSelectorFromJSON(json['from_ledger_state']),
        'kind_filter': !exists(json, 'kind_filter') ? undefined : json['kind_filter'],
        'order': !exists(json, 'order') ? undefined : json['order'],
    };
}

export function StreamTransactionsRequestAllOfToJSON(value?: StreamTransactionsRequestAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from_ledger_state': LedgerStateSelectorToJSON(value.from_ledger_state),
        'kind_filter': value.kind_filter,
        'order': value.order,
    };
}

