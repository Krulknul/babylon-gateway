/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GatewayError } from './GatewayError';
import {
    GatewayErrorFromJSON,
    GatewayErrorFromJSONTyped,
    GatewayErrorToJSON,
} from './GatewayError';
import type { ValidationErrorsAtPath } from './ValidationErrorsAtPath';
import {
    ValidationErrorsAtPathFromJSON,
    ValidationErrorsAtPathFromJSONTyped,
    ValidationErrorsAtPathToJSON,
} from './ValidationErrorsAtPath';

/**
 * 
 * @export
 * @interface InvalidRequestError
 */
export interface InvalidRequestError extends GatewayError {
    /**
     * One or more validation errors which occurred when validating the request.
     * @type {Array<ValidationErrorsAtPath>}
     * @memberof InvalidRequestError
     */
    validation_errors: Array<ValidationErrorsAtPath>;
}

/**
 * Check if a given object implements the InvalidRequestError interface.
 */
export function instanceOfInvalidRequestError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "validation_errors" in value;

    return isInstance;
}

export function InvalidRequestErrorFromJSON(json: any): InvalidRequestError {
    return InvalidRequestErrorFromJSONTyped(json, false);
}

export function InvalidRequestErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvalidRequestError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...GatewayErrorFromJSONTyped(json, ignoreDiscriminator),
        'validation_errors': ((json['validation_errors'] as Array<any>).map(ValidationErrorsAtPathFromJSON)),
    };
}

export function InvalidRequestErrorToJSON(value?: InvalidRequestError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...GatewayErrorToJSON(value),
        'validation_errors': ((value.validation_errors as Array<any>).map(ValidationErrorsAtPathToJSON)),
    };
}

