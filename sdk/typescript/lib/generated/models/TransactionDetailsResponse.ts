/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LedgerState } from './LedgerState';
import {
    LedgerStateFromJSON,
    LedgerStateFromJSONTyped,
    LedgerStateToJSON,
} from './LedgerState';
import type { TransactionDetails } from './TransactionDetails';
import {
    TransactionDetailsFromJSON,
    TransactionDetailsFromJSONTyped,
    TransactionDetailsToJSON,
} from './TransactionDetails';
import type { TransactionInfo } from './TransactionInfo';
import {
    TransactionInfoFromJSON,
    TransactionInfoFromJSONTyped,
    TransactionInfoToJSON,
} from './TransactionInfo';

/**
 * 
 * @export
 * @interface TransactionDetailsResponse
 */
export interface TransactionDetailsResponse {
    /**
     * 
     * @type {LedgerState}
     * @memberof TransactionDetailsResponse
     */
    ledger_state: LedgerState;
    /**
     * 
     * @type {TransactionInfo}
     * @memberof TransactionDetailsResponse
     */
    transaction: TransactionInfo;
    /**
     * 
     * @type {TransactionDetails}
     * @memberof TransactionDetailsResponse
     */
    details: TransactionDetails;
}

/**
 * Check if a given object implements the TransactionDetailsResponse interface.
 */
export function instanceOfTransactionDetailsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ledger_state" in value;
    isInstance = isInstance && "transaction" in value;
    isInstance = isInstance && "details" in value;

    return isInstance;
}

export function TransactionDetailsResponseFromJSON(json: any): TransactionDetailsResponse {
    return TransactionDetailsResponseFromJSONTyped(json, false);
}

export function TransactionDetailsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionDetailsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ledger_state': LedgerStateFromJSON(json['ledger_state']),
        'transaction': TransactionInfoFromJSON(json['transaction']),
        'details': TransactionDetailsFromJSON(json['details']),
    };
}

export function TransactionDetailsResponseToJSON(value?: TransactionDetailsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ledger_state': LedgerStateToJSON(value.ledger_state),
        'transaction': TransactionInfoToJSON(value.transaction),
        'details': TransactionDetailsToJSON(value.details),
    };
}

