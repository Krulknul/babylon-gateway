/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PublicKey } from './PublicKey';
import {
    PublicKeyFromJSON,
    PublicKeyFromJSONTyped,
    PublicKeyToJSON,
} from './PublicKey';
import type { TransactionPreviewRequestFlags } from './TransactionPreviewRequestFlags';
import {
    TransactionPreviewRequestFlagsFromJSON,
    TransactionPreviewRequestFlagsFromJSONTyped,
    TransactionPreviewRequestFlagsToJSON,
} from './TransactionPreviewRequestFlags';

/**
 * 
 * @export
 * @interface TransactionPreviewRequest
 */
export interface TransactionPreviewRequest {
    /**
     * A transaction manifest. sbor encoded, and then hex encoded.
     * @type {string}
     * @memberof TransactionPreviewRequest
     */
    manifest: string;
    /**
     * An array of hex-encoded blob data (optional)
     * @type {Array<string>}
     * @memberof TransactionPreviewRequest
     */
    blobs_hex?: Array<string>;
    /**
     * An integer between 0 and 2^32 - 1, giving the maximum number of cost units available for transaction execution
     * @type {number}
     * @memberof TransactionPreviewRequest
     */
    cost_unit_limit: number;
    /**
     * An integer between 0 and 2^32 - 1, specifying the validator tip as a percentage amount. A value of "1" corresponds to 1% of the fee.
     * @type {number}
     * @memberof TransactionPreviewRequest
     */
    tip_percentage: number;
    /**
     * A decimal-string-encoded integer between 0 and 2^64-1, used to ensure the transaction intent is unique.
     * @type {string}
     * @memberof TransactionPreviewRequest
     */
    nonce: string;
    /**
     * A list of public keys to be used as transaction signers
     * @type {Array<PublicKey>}
     * @memberof TransactionPreviewRequest
     */
    signer_public_keys: Array<PublicKey>;
    /**
     * 
     * @type {TransactionPreviewRequestFlags}
     * @memberof TransactionPreviewRequest
     */
    flags: TransactionPreviewRequestFlags;
}

/**
 * Check if a given object implements the TransactionPreviewRequest interface.
 */
export function instanceOfTransactionPreviewRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "manifest" in value;
    isInstance = isInstance && "cost_unit_limit" in value;
    isInstance = isInstance && "tip_percentage" in value;
    isInstance = isInstance && "nonce" in value;
    isInstance = isInstance && "signer_public_keys" in value;
    isInstance = isInstance && "flags" in value;

    return isInstance;
}

export function TransactionPreviewRequestFromJSON(json: any): TransactionPreviewRequest {
    return TransactionPreviewRequestFromJSONTyped(json, false);
}

export function TransactionPreviewRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionPreviewRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'manifest': json['manifest'],
        'blobs_hex': !exists(json, 'blobs_hex') ? undefined : json['blobs_hex'],
        'cost_unit_limit': json['cost_unit_limit'],
        'tip_percentage': json['tip_percentage'],
        'nonce': json['nonce'],
        'signer_public_keys': ((json['signer_public_keys'] as Array<any>).map(PublicKeyFromJSON)),
        'flags': TransactionPreviewRequestFlagsFromJSON(json['flags']),
    };
}

export function TransactionPreviewRequestToJSON(value?: TransactionPreviewRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'manifest': value.manifest,
        'blobs_hex': value.blobs_hex,
        'cost_unit_limit': value.cost_unit_limit,
        'tip_percentage': value.tip_percentage,
        'nonce': value.nonce,
        'signer_public_keys': ((value.signer_public_keys as Array<any>).map(PublicKeyToJSON)),
        'flags': TransactionPreviewRequestFlagsToJSON(value.flags),
    };
}

