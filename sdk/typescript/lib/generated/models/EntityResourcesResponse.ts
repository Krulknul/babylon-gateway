/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityResourcesResponseFungibleResources } from './EntityResourcesResponseFungibleResources';
import {
    EntityResourcesResponseFungibleResourcesFromJSON,
    EntityResourcesResponseFungibleResourcesFromJSONTyped,
    EntityResourcesResponseFungibleResourcesToJSON,
} from './EntityResourcesResponseFungibleResources';
import type { EntityResourcesResponseNonFungibleResources } from './EntityResourcesResponseNonFungibleResources';
import {
    EntityResourcesResponseNonFungibleResourcesFromJSON,
    EntityResourcesResponseNonFungibleResourcesFromJSONTyped,
    EntityResourcesResponseNonFungibleResourcesToJSON,
} from './EntityResourcesResponseNonFungibleResources';
import type { LedgerState } from './LedgerState';
import {
    LedgerStateFromJSON,
    LedgerStateFromJSONTyped,
    LedgerStateToJSON,
} from './LedgerState';

/**
 * 
 * @export
 * @interface EntityResourcesResponse
 */
export interface EntityResourcesResponse {
    /**
     * 
     * @type {LedgerState}
     * @memberof EntityResourcesResponse
     */
    ledger_state: LedgerState;
    /**
     * The Bech32m-encoded human readable version of the entity's global address
     * @type {string}
     * @memberof EntityResourcesResponse
     */
    address: string;
    /**
     * 
     * @type {EntityResourcesResponseFungibleResources}
     * @memberof EntityResourcesResponse
     */
    fungible_resources: EntityResourcesResponseFungibleResources;
    /**
     * 
     * @type {EntityResourcesResponseNonFungibleResources}
     * @memberof EntityResourcesResponse
     */
    non_fungible_resources: EntityResourcesResponseNonFungibleResources;
}

/**
 * Check if a given object implements the EntityResourcesResponse interface.
 */
export function instanceOfEntityResourcesResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ledger_state" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "fungible_resources" in value;
    isInstance = isInstance && "non_fungible_resources" in value;

    return isInstance;
}

export function EntityResourcesResponseFromJSON(json: any): EntityResourcesResponse {
    return EntityResourcesResponseFromJSONTyped(json, false);
}

export function EntityResourcesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityResourcesResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ledger_state': LedgerStateFromJSON(json['ledger_state']),
        'address': json['address'],
        'fungible_resources': EntityResourcesResponseFungibleResourcesFromJSON(json['fungible_resources']),
        'non_fungible_resources': EntityResourcesResponseNonFungibleResourcesFromJSON(json['non_fungible_resources']),
    };
}

export function EntityResourcesResponseToJSON(value?: EntityResourcesResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ledger_state': LedgerStateToJSON(value.ledger_state),
        'address': value.address,
        'fungible_resources': EntityResourcesResponseFungibleResourcesToJSON(value.fungible_resources),
        'non_fungible_resources': EntityResourcesResponseNonFungibleResourcesToJSON(value.non_fungible_resources),
    };
}

