/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityDetailsRequest,
  EntityDetailsResponse,
  EntityFungiblesRequest,
  EntityFungiblesResponse,
  EntityMetadataRequest,
  EntityMetadataResponse,
  EntityNonFungibleIdsRequest,
  EntityNonFungibleIdsResponse,
  EntityNonFungiblesRequest,
  EntityNonFungiblesResponse,
  EntityOverviewRequest,
  EntityOverviewResponse,
  EntityResourcesRequest,
  EntityResourcesResponse,
  ErrorResponse,
  NonFungibleDataRequest,
  NonFungibleDataResponse,
  NonFungibleIdsRequest,
  NonFungibleIdsResponse,
} from '../models';
import {
    EntityDetailsRequestFromJSON,
    EntityDetailsRequestToJSON,
    EntityDetailsResponseFromJSON,
    EntityDetailsResponseToJSON,
    EntityFungiblesRequestFromJSON,
    EntityFungiblesRequestToJSON,
    EntityFungiblesResponseFromJSON,
    EntityFungiblesResponseToJSON,
    EntityMetadataRequestFromJSON,
    EntityMetadataRequestToJSON,
    EntityMetadataResponseFromJSON,
    EntityMetadataResponseToJSON,
    EntityNonFungibleIdsRequestFromJSON,
    EntityNonFungibleIdsRequestToJSON,
    EntityNonFungibleIdsResponseFromJSON,
    EntityNonFungibleIdsResponseToJSON,
    EntityNonFungiblesRequestFromJSON,
    EntityNonFungiblesRequestToJSON,
    EntityNonFungiblesResponseFromJSON,
    EntityNonFungiblesResponseToJSON,
    EntityOverviewRequestFromJSON,
    EntityOverviewRequestToJSON,
    EntityOverviewResponseFromJSON,
    EntityOverviewResponseToJSON,
    EntityResourcesRequestFromJSON,
    EntityResourcesRequestToJSON,
    EntityResourcesResponseFromJSON,
    EntityResourcesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NonFungibleDataRequestFromJSON,
    NonFungibleDataRequestToJSON,
    NonFungibleDataResponseFromJSON,
    NonFungibleDataResponseToJSON,
    NonFungibleIdsRequestFromJSON,
    NonFungibleIdsRequestToJSON,
    NonFungibleIdsResponseFromJSON,
    NonFungibleIdsResponseToJSON,
} from '../models';

export interface EntityDetailsOperationRequest {
    entityDetailsRequest: EntityDetailsRequest;
}

export interface EntityFungiblesOperationRequest {
    entityFungiblesRequest: EntityFungiblesRequest;
}

export interface EntityMetadataOperationRequest {
    entityMetadataRequest: EntityMetadataRequest;
}

export interface EntityNonFungibleIdsOperationRequest {
    entityNonFungibleIdsRequest: EntityNonFungibleIdsRequest;
}

export interface EntityNonFungiblesOperationRequest {
    entityNonFungiblesRequest: EntityNonFungiblesRequest;
}

export interface EntityOverviewOperationRequest {
    entityOverviewRequest: EntityOverviewRequest;
}

export interface EntityResourcesOperationRequest {
    entityResourcesRequest: EntityResourcesRequest;
}

export interface NonFungibleIdDataRequest {
    nonFungibleDataRequest: NonFungibleDataRequest;
}

export interface NonFungibleIdsOperationRequest {
    nonFungibleIdsRequest: NonFungibleIdsRequest;
}

/**
 * 
 */
export class StateApi extends runtime.BaseAPI {

    /**
     * Returns detailed information for a single entity. 
     * Get Entity Details
     */
    async entityDetailsRaw(requestParameters: EntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityDetailsResponse>> {
        if (requestParameters.entityDetailsRequest === null || requestParameters.entityDetailsRequest === undefined) {
            throw new runtime.RequiredError('entityDetailsRequest','Required parameter requestParameters.entityDetailsRequest was null or undefined when calling entityDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/details`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityDetailsRequestToJSON(requestParameters.entityDetailsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Returns detailed information for a single entity. 
     * Get Entity Details
     */
    async entityDetails(requestParameters: EntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityDetailsResponse> {
        const response = await this.entityDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the total amount of each fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger. 
     * Get Entity Fungible Resource Totals
     */
    async entityFungiblesRaw(requestParameters: EntityFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityFungiblesResponse>> {
        if (requestParameters.entityFungiblesRequest === null || requestParameters.entityFungiblesRequest === undefined) {
            throw new runtime.RequiredError('entityFungiblesRequest','Required parameter requestParameters.entityFungiblesRequest was null or undefined when calling entityFungibles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/fungibles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityFungiblesRequestToJSON(requestParameters.entityFungiblesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityFungiblesResponseFromJSON(jsonValue));
    }

    /**
     * Returns the total amount of each fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger. 
     * Get Entity Fungible Resource Totals
     */
    async entityFungibles(requestParameters: EntityFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityFungiblesResponse> {
        const response = await this.entityFungiblesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger. 
     * Get Entity Metadata
     */
    async entityMetadataRaw(requestParameters: EntityMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityMetadataResponse>> {
        if (requestParameters.entityMetadataRequest === null || requestParameters.entityMetadataRequest === undefined) {
            throw new runtime.RequiredError('entityMetadataRequest','Required parameter requestParameters.entityMetadataRequest was null or undefined when calling entityMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/metadata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityMetadataRequestToJSON(requestParameters.entityMetadataRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger. 
     * Get Entity Metadata
     */
    async entityMetadata(requestParameters: EntityMetadataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityMetadataResponse> {
        const response = await this.entityMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger. 
     * Get Entity Non-Fungible IDs
     */
    async entityNonFungibleIdsRaw(requestParameters: EntityNonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityNonFungibleIdsResponse>> {
        if (requestParameters.entityNonFungibleIdsRequest === null || requestParameters.entityNonFungibleIdsRequest === undefined) {
            throw new runtime.RequiredError('entityNonFungibleIdsRequest','Required parameter requestParameters.entityNonFungibleIdsRequest was null or undefined when calling entityNonFungibleIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/non-fungible/ids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityNonFungibleIdsRequestToJSON(requestParameters.entityNonFungibleIdsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityNonFungibleIdsResponseFromJSON(jsonValue));
    }

    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger. 
     * Get Entity Non-Fungible IDs
     */
    async entityNonFungibleIds(requestParameters: EntityNonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityNonFungibleIdsResponse> {
        const response = await this.entityNonFungibleIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger. 
     * Get Entity Non-Fungible Resource Totals
     */
    async entityNonFungiblesRaw(requestParameters: EntityNonFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityNonFungiblesResponse>> {
        if (requestParameters.entityNonFungiblesRequest === null || requestParameters.entityNonFungiblesRequest === undefined) {
            throw new runtime.RequiredError('entityNonFungiblesRequest','Required parameter requestParameters.entityNonFungiblesRequest was null or undefined when calling entityNonFungibles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/non-fungibles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityNonFungiblesRequestToJSON(requestParameters.entityNonFungiblesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityNonFungiblesResponseFromJSON(jsonValue));
    }

    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger. 
     * Get Entity Non-Fungible Resource Totals
     */
    async entityNonFungibles(requestParameters: EntityNonFungiblesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityNonFungiblesResponse> {
        const response = await this.entityNonFungiblesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns basic information (incomplete metadata) for a given collection of entities. This endpoint is intended to be used for populating screens which contain a small bit of information about multiple entities. 
     * Get Entities Overview
     */
    async entityOverviewRaw(requestParameters: EntityOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityOverviewResponse>> {
        if (requestParameters.entityOverviewRequest === null || requestParameters.entityOverviewRequest === undefined) {
            throw new runtime.RequiredError('entityOverviewRequest','Required parameter requestParameters.entityOverviewRequest was null or undefined when calling entityOverview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/overview`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityOverviewRequestToJSON(requestParameters.entityOverviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityOverviewResponseFromJSON(jsonValue));
    }

    /**
     * Returns basic information (incomplete metadata) for a given collection of entities. This endpoint is intended to be used for populating screens which contain a small bit of information about multiple entities. 
     * Get Entities Overview
     */
    async entityOverview(requestParameters: EntityOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityOverviewResponse> {
        const response = await this.entityOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the total amount of each fungible and non-fungible resources owned by a given global entity. The response for fungibles and non-fungibles is paginated, and only the first page of each is returned. The returned lists are ordered by the resource\'s first appearance on the ledger. For further pages, use the `entity/fungibles` and `entity/non-fungibles` endpoints. To get the owned non-fungible ids (instead of just the amount), use the `entity/non-fungible-ids` endpoint. 
     * Get Entity Resource Totals
     */
    async entityResourcesRaw(requestParameters: EntityResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityResourcesResponse>> {
        if (requestParameters.entityResourcesRequest === null || requestParameters.entityResourcesRequest === undefined) {
            throw new runtime.RequiredError('entityResourcesRequest','Required parameter requestParameters.entityResourcesRequest was null or undefined when calling entityResources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/resources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityResourcesRequestToJSON(requestParameters.entityResourcesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityResourcesResponseFromJSON(jsonValue));
    }

    /**
     * Returns the total amount of each fungible and non-fungible resources owned by a given global entity. The response for fungibles and non-fungibles is paginated, and only the first page of each is returned. The returned lists are ordered by the resource\'s first appearance on the ledger. For further pages, use the `entity/fungibles` and `entity/non-fungibles` endpoints. To get the owned non-fungible ids (instead of just the amount), use the `entity/non-fungible-ids` endpoint. 
     * Get Entity Resource Totals
     */
    async entityResources(requestParameters: EntityResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityResourcesResponse> {
        const response = await this.entityResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource. 
     * Get Non-Fungible Data
     */
    async nonFungibleIdDataRaw(requestParameters: NonFungibleIdDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NonFungibleDataResponse>> {
        if (requestParameters.nonFungibleDataRequest === null || requestParameters.nonFungibleDataRequest === undefined) {
            throw new runtime.RequiredError('nonFungibleDataRequest','Required parameter requestParameters.nonFungibleDataRequest was null or undefined when calling nonFungibleIdData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/non-fungible/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NonFungibleDataRequestToJSON(requestParameters.nonFungibleDataRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NonFungibleDataResponseFromJSON(jsonValue));
    }

    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource. 
     * Get Non-Fungible Data
     */
    async nonFungibleIdData(requestParameters: NonFungibleIdDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NonFungibleDataResponse> {
        const response = await this.nonFungibleIdDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger. 
     * Get Non-Fungible Collection
     */
    async nonFungibleIdsRaw(requestParameters: NonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NonFungibleIdsResponse>> {
        if (requestParameters.nonFungibleIdsRequest === null || requestParameters.nonFungibleIdsRequest === undefined) {
            throw new runtime.RequiredError('nonFungibleIdsRequest','Required parameter requestParameters.nonFungibleIdsRequest was null or undefined when calling nonFungibleIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/non-fungible/ids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NonFungibleIdsRequestToJSON(requestParameters.nonFungibleIdsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NonFungibleIdsResponseFromJSON(jsonValue));
    }

    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger. 
     * Get Non-Fungible Collection
     */
    async nonFungibleIds(requestParameters: NonFungibleIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NonFungibleIdsResponse> {
        const response = await this.nonFungibleIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
