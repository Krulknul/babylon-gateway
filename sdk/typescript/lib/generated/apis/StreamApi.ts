/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  TransactionRecentRequest,
  TransactionRecentResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TransactionRecentRequestFromJSON,
    TransactionRecentRequestToJSON,
    TransactionRecentResponseFromJSON,
    TransactionRecentResponseToJSON,
} from '../models';

export interface TransactionRecentOperationRequest {
    transactionRecentRequest: TransactionRecentRequest;
}

/**
 * 
 */
export class StreamApi extends runtime.BaseAPI {

    /**
     * Returns user-initiated transactions which have been committed to the ledger. The returned response is in a paginated format, ordered by most recently committed. 
     * Get Recent Transactions
     */
    async transactionRecentRaw(requestParameters: TransactionRecentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionRecentResponse>> {
        if (requestParameters.transactionRecentRequest === null || requestParameters.transactionRecentRequest === undefined) {
            throw new runtime.RequiredError('transactionRecentRequest','Required parameter requestParameters.transactionRecentRequest was null or undefined when calling transactionRecent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/recent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionRecentRequestToJSON(requestParameters.transactionRecentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionRecentResponseFromJSON(jsonValue));
    }

    /**
     * Returns user-initiated transactions which have been committed to the ledger. The returned response is in a paginated format, ordered by most recently committed. 
     * Get Recent Transactions
     */
    async transactionRecent(requestParameters: TransactionRecentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionRecentResponse> {
        const response = await this.transactionRecentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
