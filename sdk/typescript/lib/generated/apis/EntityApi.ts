/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityDetailsRequest,
  EntityDetailsResponse,
  EntityOverviewRequest,
  EntityOverviewResponse,
  EntityResourcesRequest,
  EntityResourcesResponse,
} from '../models';
import {
    EntityDetailsRequestFromJSON,
    EntityDetailsRequestToJSON,
    EntityDetailsResponseFromJSON,
    EntityDetailsResponseToJSON,
    EntityOverviewRequestFromJSON,
    EntityOverviewRequestToJSON,
    EntityOverviewResponseFromJSON,
    EntityOverviewResponseToJSON,
    EntityResourcesRequestFromJSON,
    EntityResourcesRequestToJSON,
    EntityResourcesResponseFromJSON,
    EntityResourcesResponseToJSON,
} from '../models';

export interface EntityDetailsOperationRequest {
    entityDetailsRequest: EntityDetailsRequest;
}

export interface EntityOverviewOperationRequest {
    entityOverviewRequest: EntityOverviewRequest;
}

export interface EntityResourcesOperationRequest {
    entityResourcesRequest: EntityResourcesRequest;
}

/**
 * 
 */
export class EntityApi extends runtime.BaseAPI {

    /**
     * TBD 
     * Entity Details
     */
    async entityDetailsRaw(requestParameters: EntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityDetailsResponse>> {
        if (requestParameters.entityDetailsRequest === null || requestParameters.entityDetailsRequest === undefined) {
            throw new runtime.RequiredError('entityDetailsRequest','Required parameter requestParameters.entityDetailsRequest was null or undefined when calling entityDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/details`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityDetailsRequestToJSON(requestParameters.entityDetailsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityDetailsResponseFromJSON(jsonValue));
    }

    /**
     * TBD 
     * Entity Details
     */
    async entityDetails(requestParameters: EntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityDetailsResponse> {
        const response = await this.entityDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * TBD 
     * Entity Overview
     */
    async entityOverviewRaw(requestParameters: EntityOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityOverviewResponse>> {
        if (requestParameters.entityOverviewRequest === null || requestParameters.entityOverviewRequest === undefined) {
            throw new runtime.RequiredError('entityOverviewRequest','Required parameter requestParameters.entityOverviewRequest was null or undefined when calling entityOverview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/overview`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityOverviewRequestToJSON(requestParameters.entityOverviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityOverviewResponseFromJSON(jsonValue));
    }

    /**
     * TBD 
     * Entity Overview
     */
    async entityOverview(requestParameters: EntityOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityOverviewResponse> {
        const response = await this.entityOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * TBD 
     * Entity Resources
     */
    async entityResourcesRaw(requestParameters: EntityResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityResourcesResponse>> {
        if (requestParameters.entityResourcesRequest === null || requestParameters.entityResourcesRequest === undefined) {
            throw new runtime.RequiredError('entityResourcesRequest','Required parameter requestParameters.entityResourcesRequest was null or undefined when calling entityResources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entity/resources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntityResourcesRequestToJSON(requestParameters.entityResourcesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityResourcesResponseFromJSON(jsonValue));
    }

    /**
     * TBD 
     * Entity Resources
     */
    async entityResources(requestParameters: EntityResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityResourcesResponse> {
        const response = await this.entityResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
