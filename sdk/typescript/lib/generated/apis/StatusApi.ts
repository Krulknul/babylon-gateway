/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GatewayInfoResponse,
} from '../models';
import {
    GatewayInfoResponseFromJSON,
    GatewayInfoResponseToJSON,
} from '../models';

export interface GatewayInfoRequest {
    body: object;
}

/**
 * 
 */
export class StatusApi extends runtime.BaseAPI {

    /**
     * Returns the Gateway API version, network and current ledger state.
     * Get Gateway Info
     */
    async gatewayInfoRaw(requestParameters: GatewayInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GatewayInfoResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling gatewayInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayInfoResponseFromJSON(jsonValue));
    }

    /**
     * Returns the Gateway API version, network and current ledger state.
     * Get Gateway Info
     */
    async gatewayInfo(requestParameters: GatewayInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GatewayInfoResponse> {
        const response = await this.gatewayInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
