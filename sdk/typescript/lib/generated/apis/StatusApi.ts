/* tslint:disable */
/* eslint-disable */
/**
 * Radix Babylon Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to build and submit transactions to the network. It is designed for use by wallets and explorers.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/main/apis/gateway-api.html) to learn more about different usage scenarios.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GatewayStatusResponse,
  NetworkConfigurationResponse,
} from '../models';
import {
    GatewayStatusResponseFromJSON,
    GatewayStatusResponseToJSON,
    NetworkConfigurationResponseFromJSON,
    NetworkConfigurationResponseToJSON,
} from '../models';

/**
 * 
 */
export class StatusApi extends runtime.BaseAPI {

    /**
     * Returns the Gateway API version and current ledger state. 
     * Get Gateway Status
     */
    async gatewayStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GatewayStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status/gateway-status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewayStatusResponseFromJSON(jsonValue));
    }

    /**
     * Returns the Gateway API version and current ledger state. 
     * Get Gateway Status
     */
    async gatewayStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GatewayStatusResponse> {
        const response = await this.gatewayStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns network identifier, network name and well-known network addresses. 
     * Get Network Configuration
     */
    async networkConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NetworkConfigurationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status/network-configuration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkConfigurationResponseFromJSON(jsonValue));
    }

    /**
     * Returns network identifier, network name and well-known network addresses. 
     * Get Network Configuration
     */
    async networkConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NetworkConfigurationResponse> {
        const response = await this.networkConfigurationRaw(initOverrides);
        return await response.value();
    }

}
