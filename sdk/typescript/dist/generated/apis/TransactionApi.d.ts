/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { RecentTransactionsRequest, RecentTransactionsResponse, TransactionDetailsRequest, TransactionDetailsResponse, TransactionPreviewRequest, TransactionPreviewResponse, TransactionStatusRequest, TransactionStatusResponse, TransactionSubmitRequest, TransactionSubmitResponse } from '../models';
export interface PreviewTransactionRequest {
    transactionPreviewRequest: TransactionPreviewRequest;
}
export interface RecentTransactionsOperationRequest {
    recentTransactionsRequest: RecentTransactionsRequest;
}
export interface SubmitTransactionRequest {
    transactionSubmitRequest: TransactionSubmitRequest;
}
export interface TransactionDetailsOperationRequest {
    transactionDetailsRequest: TransactionDetailsRequest;
}
export interface TransactionStatusOperationRequest {
    transactionStatusRequest: TransactionStatusRequest;
}
/**
 *
 */
export declare class TransactionApi extends runtime.BaseAPI {
    /**
     * Previews transaction against the network.
     * Preview Transaction
     */
    previewTransactionRaw(requestParameters: PreviewTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionPreviewResponse>>;
    /**
     * Previews transaction against the network.
     * Preview Transaction
     */
    previewTransaction(requestParameters: PreviewTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionPreviewResponse>;
    /**
     * Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
     * Get Recent Transactions
     */
    recentTransactionsRaw(requestParameters: RecentTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentTransactionsResponse>>;
    /**
     * Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
     * Get Recent Transactions
     */
    recentTransactions(requestParameters: RecentTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentTransactionsResponse>;
    /**
     * Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
     * Submit Transaction
     */
    submitTransactionRaw(requestParameters: SubmitTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSubmitResponse>>;
    /**
     * Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
     * Submit Transaction
     */
    submitTransaction(requestParameters: SubmitTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSubmitResponse>;
    /**
     * Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren\'t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`.
     * Transaction Details
     */
    transactionDetailsRaw(requestParameters: TransactionDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDetailsResponse>>;
    /**
     * Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren\'t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`.
     * Transaction Details
     */
    transactionDetails(requestParameters: TransactionDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDetailsResponse>;
    /**
     * Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren\'t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`.
     * Transaction Status
     */
    transactionStatusRaw(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionStatusResponse>>;
    /**
     * Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren\'t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a `TransactionNotFoundError`. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a `TransactionNotFoundError`.
     * Transaction Status
     */
    transactionStatus(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionStatusResponse>;
}
