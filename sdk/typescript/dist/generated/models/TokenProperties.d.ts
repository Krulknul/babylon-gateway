/**
 * Radix Babylon Gateway API
 * See https://docs.radixdlt.com/main/apis/introduction.html
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AccountIdentifier } from './AccountIdentifier';
/**
 *
 * @export
 * @interface TokenProperties
 */
export interface TokenProperties {
    /**
     *
     * @type {string}
     * @memberof TokenProperties
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof TokenProperties
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof TokenProperties
     */
    icon_url: string;
    /**
     *
     * @type {string}
     * @memberof TokenProperties
     */
    url: string;
    /**
     *
     * @type {string}
     * @memberof TokenProperties
     */
    symbol: string;
    /**
     * If true, the token is allowed to be minted/burned by the owner.
     * @type {boolean}
     * @memberof TokenProperties
     */
    is_supply_mutable: boolean;
    /**
     *
     * @type {string}
     * @memberof TokenProperties
     */
    granularity: string;
    /**
     *
     * @type {AccountIdentifier}
     * @memberof TokenProperties
     */
    owner?: AccountIdentifier;
}
/**
 * Check if a given object implements the TokenProperties interface.
 */
export declare function instanceOfTokenProperties(value: object): boolean;
export declare function TokenPropertiesFromJSON(json: any): TokenProperties;
export declare function TokenPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenProperties;
export declare function TokenPropertiesToJSON(value?: TokenProperties | null): any;
