openapi: 3.0.0
info:
  version: 0.9.0
  title: Radix Core API
  description: |
    This API provides endpoints for both RadixCore node management and support
    for middleware integration (such as exchanges).

    # Introduction

    Welcome to the Radix Core API Preview. This Preview API is intended for
    exchanges to be able to begin integrating with the Radix network. In particular,
    the following endpoints will be frozen or at the very least backwards
    compatible to version 1.0.0 of the Radix Core API:

    * `/network/configuration`
    * `/network/status`
    * `/transactions`
    * `/construction/derive`
    * `/construction/build`
    * `/construction/parse`
    * `/construction/finalize`
    * `/construction/hash`
    * `/construction/submit`

    All other endpoints may change by the 1.0.0 release, and further endpoints
    (such as mempool contents) will likely be added.

    > WARNING
    >
    > This API is __NOT__ intended to be available on the public web and is designed
    > to be used in private networks mainly for node management and integration.
    > In particular, endpoints in the Signing API if accessed by the public can
    > result in loss of funds.

    # Radix Network Gateway

    We are building our own service against the Core API, and will be able to publish
    the preview source code for this soon. Other integrators will be able to run this service,
    or use the source code as a reference implementation to develop their own integrations.

    # Rosetta

    Much of the design decisions of the Data API and Construction API endpoints is
    inspired from [Rosetta API](https://www.rosetta-api.org/) most notably:
      * Use of a JSON-Based RPC protocol on top of HTTP Post requests
      * Use of Operations, Amounts, and Identifiers to express generic asset movement

    There are a few notable exceptions to note:
      * Fetching of ledger data is through a Transaction stream rather than a
      Block stream
      * Use of `EntityIdentifier` rather than `AccountIdentifier`
      * Use of `OperationGroup` rather than `related_operations` to express related
      operations
      * Even though the Radix Ledger is UTXO based, Construction endpoints perform coin
      selection on behalf of the caller. This has the unfortunate effect of not
      being able to support high frequency transactions from a single account due to
      UTXO spend conflicts. This will be addressed in future updates.
      * Construction endpoints are mostly online rather than offline as required by
      Rosetta

    Future versions of the api will aim towards a fully-compliant Rosetta API.

    # Data API Sequence Flow

    Clients can make use of the Data API endpoints to synchronize
    either a full or partial view (for example, to only track XRD asset balances) of
    the ledger, transaction by transaction.

    Synchronization involves only using the Data API. Assuming the client has a
    database which they are updating, below is a generic flow of operations on
    how to synchronize via the Data API.

    ![Data Sequence Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/data_sequence_flow.png)


    # Construction API Sequence Flow

    Clients can make use of the Construction API endpoints to construct and submit
    transactions to the network.

    The following sequence flow allows for integrators to construct transactions
    on behalf of clients or for their own use without ever holding the actual private
    key.

    ![Construction Sequence Flow](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/construction_sequence_flow.png)

    Unlike the Rosetta Construction API [specification](https://www.rosetta-api.org/docs/construction_api_introduction.html),
    this Construction API selects the UTXOs on behalf of the caller. This has the unfortunate
    side effect of not being able to support high frequency transactions from a single
    account due to UTXO conflicts. This will be addressed in a future release.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: localhost:3333
tags:
  - name: entities
    x-displayName: Entities
    description: |
      Entities represent something that can hold resource balances and data objects.
      A public key account is the simplest example of an entity.

      ![State Identifiers](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/entity.png '#width=500px;')

      At the simplest level of abstraction, each Operation in a Transaction is simply
      either a resource balance change or a data object update in an entity.

      ![State Identifiers](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/operation.png '#width=500px;')
  - name: objects
    x-displayName: Objects
    description: |
      ## State Identifiers
      The Radix Olympia network has no concept of blocks, instead transactions are
      managed in a flat ordered list. A hash chain is formed from these transactions
      which represents a point in time of the ledger with a valid committed state.

      ![State Identifiers](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/state_identifiers.png '#width=500px;')

      Along with the transaction accumulator hash and the index of the hash in the hash
      chain, this forms a State Identifier:
      <SchemaDefinition schemaRef="#/components/schemas/StateIdentifier" exampleRef="#/components/examples/StateIdentifier" showReadOnly={true} showWriteOnly={true} />

      ## Transactions

      A Transaction consists of one or more OperationGroups, each of which consist of
      one or more Operations.

      ![Transaction Operations](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/transaction_operations.png)

      A Committed Transaction has additional information such as the StateIdentifier
      which resulted after committing the transaction.

      <SchemaDefinition schemaRef="#/components/schemas/CommittedTransaction" showReadOnly={true} showWriteOnly={true} />

      ## Operation Groups

      Similar to the [Rosetta API](https://www.rosetta-api.org/), both reading and
      writing to the ledger use the same Address and Operation objects.

      Every state change is expressed as an Operation which operates on a single
      Entity. Any state change which consists of two accounts (such as
      a token transfer) thus requires at least two Operations, one which debits
      the sender and one which credits the receiver.

      Unlike Rosetta, operations are more explicitly linked via Operation Groups. Each
      Operation Group then represents a well formed accounting entry where credits
      and debits are equivalent (unless minting or burning occurred).

      <SchemaDefinition schemaRef="#/components/schemas/OperationGroup" showReadOnly={true} showWriteOnly={true} />

      ## Operations

      Operations operate on a single Entity and are associated with a single Amount
      update and/or a single Data update.

      * The `amount` property represents either a positive or negative change in balance of some token.
      * The `data` property represents either the creation or deletion of a data object.

      <SchemaDefinition schemaRef="#/components/schemas/Operation" showReadOnly={true} showWriteOnly={true} />

      ## Entity Identifiers

      An Entity Identifier uniquely describes an entity which may have arbitrary balances and arbitrary data
      objects. An Entity Identifier may further specify a Sub Address which should be treated as a separate
      unique entity.

      <SchemaDefinition schemaRef="#/components/schemas/EntityIdentifier" showReadOnly={true} showWriteOnly={true} />

      ## Amounts

      A signed amount of a resource.

      <SchemaDefinition schemaRef="#/components/schemas/ResourceAmount" showReadOnly={true} showWriteOnly={true} />

      ## Resource Identifiers

      A Resource Identifier uniquely describes either some token or stake ownership of a validator.

      <SchemaDefinition schemaRef="#/components/schemas/ResourceIdentifier" showReadOnly={true} showWriteOnly={true} />

      ## Data Updates

      A Data update is the creation or destruction of a data object.

      At any given time, an address will have up to one created-but-not-deleted data object of each type.

      <SchemaDefinition schemaRef="#/components/schemas/Data" showReadOnly={true} showWriteOnly={true} />
  - name: structure
    x-displayName: Structure
    description: |
      With just the object descriptions, you have all the info needed to integrate a system that can track
      generics assets and balances of entities and allow for generic asset transfer.

      For more sophisticated use, such as staking, you need to understand the structure and relationships of
      specific entities, resources, and data. For example, to stake XRD to a validator you must transfer XRD
      from your account address to your `prepared_staked` subaddress.

      The following is a high level table describing which resources and data objects are allowed for a given
      entity identifier.

      ![Structure](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/structure.png '#width=500px;')

      There are four types of entities:
      * **Account**, which is a regular public key account which can contain token balances and contain
      StakeOwnership, which represents a delegated amount of stake to a specific validator. Subaddresses under
      an account-address contain assets which the account-address owns but is currently locked by the system.
      An account is represented by its Bech32 account address.
      * **Validator**, an entity representing a validating node on the network. The subaddress `system` holds XRD
      tokens which have been staked to this validator. A validator is represented by its Bech32 validator address.
      * **Token**, an entity representing a token, represented by its Radix Resource Identifier ("RRI").
      * **System**, an entity representing system level data such as current epoch and round, represented by the string "system".

      ## Bech32 Address Encoding

      Account addresses, Validator addresses and Token RRIs are all [Bech32 encoded](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki).

      A Bech32 encoding consists of a prefix which is an ASCII human readable part "HRP", followed by the character "1",
      followed by an encoded data payload, encoded as 32 values (5 bits) per character.

      Assuming an address is legal, you can extract its HRP as the string before the last '1'. This can be used to
      distinguish between Account, Validator and Token/RRI addresses.

      * **Accounts** have a fixed HRP for a given Radix network. This is `rdx` on mainnet. The data part encodes the account's public key.
      * **Validators** have a fixed HRP for a given Radix network. This is `rv` on mainnet. The data part encodes the validator's public key.
      * **Tokens** have an HRP of the token's (not necessarily unique) symbol, followed by a suffix.
        The suffix is fixed for a given Radix network, and is `_rr` on mainnet.
        As an example, the mainnet address of the native token, XRD, is `xrd_rr1qy5wfsfh`.
        The data part of the Bech32 encoding encodes the token's unique radix engine address on ledger.

      The Account and Validator HRPs and the Token HRP suffix for the current network should be fetched from the
      `/network/configuration` endpoint.

      It likely will not be necessary to actually decode the data parts of the Bech32 encodings, but if you do need to,
      you should be warned that Radix addresses are *not* Segwit addresses. Many Bech32 libraries assume a Segwit
      encoding, so may fail to extract the data from a Radix address.

      In particular, the Segwit encoding assumes the first 5-bit-character of the 5-bit-per-character encoded data is a
      witness version, and that this is followed by the witness programme bytes, encoded into 5-bit chunks, padded
      with zeroes if necessary. Radix encoding just encodes its data bytes into 5-bit chunks with padded zeroes -
      _without_ an initial 1 character version prefix. In other words, the padding and interpretation of the encoded
      data differs between Radix and Segwit addresses.

      ## The native token: XRD

      XRD is Radix ledger's native token, used for staking and to pay transaction fees. It has the symbol `xrd`, and
      no other token is permitted to use this symbol. It has a reserved radix engine address of `1` (`01` in hex).

      On mainnet, its RRI is `xrd_rr1qy5wfsfh`.

  - name: actions
    x-displayName: Actions
    description: |

      There are further restrictions on which resource movement and data updates and how operations must
      be combined. The following describes at a high level what user actions (ledger updates that can be
      submitted as a transaction) are available.

      ![User Actions](https://raw.githubusercontent.com/radixdlt/radixdlt/feature/open-api/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/documentation/user_actions.png '#width=500px;')

      1. **Transfer** of any token resource (including the native token XRD) from an account to another
      account may be done by debiting an amount from the sending account and crediting the same amount
      to the receiving account.
      2. **Staking** may be started by transferring XRD from an account to a `prepared_stake` entity
      with a specific validator. Once XRD is in this entity, at some point the system will move this
      XRD to a Validator entity and mint StakeOwnership into the originating account.
      3. **Unstaking** may be started by transfering StakeOwnership from an account to a `prepared_unstake`
      entity. Once StakeOwnership is in this entity, at some point the system will destroy this
      StakeOwnership and transfer XRD from the Validator entity into your `exiting_stake` entity. Once
      the unlocking period is over the system will move that XRD from the `exiting_stake` entity into your
      account.
      4. **Validator Updates** may be started by destroying the current data object and creating a new
      data object with the same type.
      5. **New Token Definitions** may be created by destroying an `UnclaimedREAddr` and creating a
      `TokenData` and `TokenMetadata` data object.
  - name: network
    x-displayName: Network
    description: Get info about the node and network.
  - name: entity
    x-displayName: Entity
    description: Get info about an entity.
  - name: transactions
    x-displayName: Transactions
    description: Get the stream of committed transactions.
  - name: construction
    x-displayName: Construction
    description: Construct a transaction for submission.
  - name: sign
    x-displayName: Sign Transaction
    description: Sign a Transaction with the node's private key.
x-tagGroups:
  - name: Model
    tags:
      - entities
      - structure
      - actions
      - objects
  - name: Data API
    tags:
      - network
      - entity
      - transactions
  - name: Construction API
    tags:
      - construction
  - name: Signing API
    tags:
      - sign
paths:
  "/network/configuration":
    post:
      summary: Get Network Configuration
      description: Returns the network configuration of the network the node is connected
        to.
      tags:
        - network
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NetworkConfigurationRequest"
      responses:
        '200':
          description: Network Configuration
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NetworkConfigurationResponse"
        '500':
          description: An unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/network/status":
    post:
      summary: Get Network Status
      description: Returns the current state and status of the node's copy of the ledger.
        If the node is syncing, the `current_state_X` responses may be behind the global ledger.
      tags:
        - network
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NetworkStatusRequest"
      responses:
        '200':
          description: Network Status
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NetworkStatusResponse"
        '500':
          description: An Unexpected Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/entity":
    post:
      summary: Get Entity Information
      description: Gets the balances and data objects at an entity at the current state of the ledger.
      tags:
        - entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EntityRequest"
      responses:
        '200':
          description: Entity Balances and Data
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EntityResponse"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/transactions":
    post:
      summary: Get Committed Transactions
      description: Returns an ordered sublist of committed transactions. This endpoint
        is designed for lite clients to sync with the state of the ledger.
      tags:
        - transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CommittedTransactionsRequest"
      responses:
        '200':
          description: Sublist of Committed Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CommittedTransactionsResponse"
        '500':
          description: An Unexpected Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/construction/derive":
    post:
      summary: Derive Entity Identifier
      tags:
        - construction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConstructionDeriveRequest"
      responses:
        '200':
          description: Entity Identifier
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConstructionDeriveResponse"
  "/construction/build":
    post:
      summary: Build Transaction
      tags:
        - construction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConstructionBuildRequest"
      responses:
        '200':
          description: An unsigned transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConstructionBuildResponse"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/construction/parse":
    post:
      summary: Parse Transaction
      tags:
        - construction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConstructionParseRequest"
      responses:
        '200':
          description: An unsigned transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConstructionParseResponse"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/construction/finalize":
    post:
      summary: Finalize Transaction
      tags:
        - construction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConstructionFinalizeRequest"
      responses:
        '200':
          description: An unsigned transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConstructionFinalizeResponse"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/construction/hash":
    post:
      summary: Get Transaction Hash
      tags:
        - construction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConstructionHashRequest"
      responses:
        '200':
          description: An unsigned transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConstructionHashResponse"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/construction/submit":
    post:
      summary: Submit Transaction
      tags:
        - construction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConstructionSubmitRequest"
      responses:
        '200':
          description: An unsigned transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConstructionSubmitResponse"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
  "/sign":
    post:
      summary: Sign Transaction
      tags:
        - sign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignRequest"
      responses:
        '200':
          description: Signed Transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SignResponse"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UnexpectedError"
components:
  schemas:
    NetworkConfigurationRequest:
      type: object
      example: {}
    NetworkConfigurationResponse:
      type: object
      required:
        - version
        - network_identifier
        - bech32_human_readable_parts
      properties:
        version:
          description: Different versions regarding the node, network and api.
          type: object
          required:
            - core_version
            - api_version
          properties:
            core_version:
              type: string
            api_version:
              type: string
        network_identifier:
          description: The name of the network.
          "$ref": "#/components/schemas/NetworkIdentifier"
        bech32_human_readable_parts:
          description: The unique bech32 hrps used for addressing.
          "$ref": "#/components/schemas/Bech32HRPs"
      example:
        network_identifier:
          network: mainnet
        bech32_human_readable_parts:
          account_hrp: rdx
          validator_hrp: rv
          node_hrp: rn
          resource_hrp_suffix: _rr
    NetworkStatusRequest:
      type: object
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
      example:
        network_identifier:
          network: mainnet
    NetworkStatusResponse:
      type: object
      required:
        - pre_genesis_state_identifier
        - genesis_state_identifier
        - current_state_identifier
        - current_state_epoch
        - current_state_round
        - current_state_timestamp
        - node_identifiers
      properties:
        pre_genesis_state_identifier:
          description: The ledger state identifier before the genesis transaction.
          "$ref": "#/components/schemas/StateIdentifier"
        genesis_state_identifier:
          description: The ledger state identifier after the genesis transaction.
          "$ref": "#/components/schemas/StateIdentifier"
        current_state_identifier:
          description: The current state identifier at the top of the node's copy of the ledger.
          "$ref": "#/components/schemas/StateIdentifier"
        current_state_epoch:
          description: The current ledger epoch at the top of the node's copy of the ledger.
          "$ref": "#/components/schemas/LongNumber"
        current_state_round:
          description: The current ledger state round (in the current epoch) at the top of the node's copy of the ledger.
          "$ref": "#/components/schemas/LongNumber"
        current_state_timestamp:
          description: The current ledger state timestamp at the top of the node's copy of the ledger.
            This timestamp is not guaranteed to always increase.
          "$ref": "#/components/schemas/LongNumber"
        node_identifiers:
          description: The entity identifiers associated with this node's private
            key.
          type: object
          required:
            - account_entity_identifier
            - validator_entity_identifier
            - public_key
          properties:
            account_entity_identifier:
              "$ref": "#/components/schemas/EntityIdentifier"
            validator_entity_identifier:
              "$ref": "#/components/schemas/EntityIdentifier"
            public_key:
              "$ref": "#/components/schemas/PublicKey"
      example:
        pre_genesis_state_identifier:
          state_version: 0
          transaction_accumulator: "0000000000000000000000000000000000000000000000000000000000000000"
        current_state_timestamp: 1627452363772
        current_state_identifier:
          state_version: 322001
          transaction_accumulator: e31f8314a67236076ad6d46391e93a93d7b9d34de2062acc620541c09dd69f95
        current_state_epoch: 1
        current_state_view: 321991
        genesis_state_identifier:
          state_version: 1
          transaction_accumulator: 1e62415e5fd95c63aff69142f1359cc6a981ff7169c128d266f45adf614d09b0
        node_identifiers:
          account_entity_identifier:
            address: rdx1qspmwn5n0qyz685f20aevh4wglxxzg9k5t5vql20s4jqa7kj8hz0njclnh0mf
          validator_entity_identifier:
            address: rv1qwm5aymcpqk3az2nlwt9atj8e3sjpd4zarq86nu9vs80453acnuuklp5yl2
    SignRequest:
      type: object
      required:
        - network_identifier
        - public_key
        - unsigned_transaction
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        public_key:
          description: The public key corresponding to the private key which should be used to sign.
          "$ref": "#/components/schemas/PublicKey"
        unsigned_transaction:
          description: Hex encoded unsigned transaction to sign.
          type: string
    SignResponse:
      type: object
      required:
        - signed_transaction
      properties:
        signed_transaction:
          type: string
    EntityRequest:
      type: object
      required:
        - network_identifier
        - entity_identifier
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        entity_identifier:
          description: The Entity for which current balance and data information will be retrieved.
          "$ref": "#/components/schemas/EntityIdentifier"
      example:
        network_identifier:
          network: mainnet
        entity_identifier:
          address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88
    EntityResponse:
      type: object
      required:
        - balances
        - data_objects
      properties:
        balances:
          description: Balances associated with the entity.
          type: array
          items:
            "$ref": "#/components/schemas/ResourceAmount"
        data_objects:
          description: Data associated with the entity.
          type: array
          items:
            "$ref": "#/components/schemas/DataObject"
      example:
        balances:
          - resource_identifier:
              rri: xrd_rr1qy5wfsfh
              type: token
            value: '13443027000000000000000'
          - resource_identifier:
              rri: veri_rr1qdtwzvy8lnfgl9t5tnj8f5fwl2znssnvx27vufcx7u3slv0gce
              type: token
            value: '1000000000000000000'
          - resource_identifier:
              validator: rv1q04u5zwtgffsqkvr08xqm6vpm3gwxh4uqwtjpx5p47ew0m0v8m5zs3m3jed
              type: stake_ownership
            value: '15000000000000000000000'
        data_objects: []
    ConstructionDeriveRequest:
      type: object
      required:
        - network_identifier
        - public_key
        - metadata
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        public_key:
          "$ref": "#/components/schemas/PublicKey"
        metadata:
          "$ref": "#/components/schemas/ConstructionDeriveRequestMetadata"
      example:
        network_identifier:
          network: mainnet
        public_key:
          hex: 03b74e9378082d1e8953fb965eae47cc6120b6a2e8c07d4f85640efad23dc4f9cb
        metadata:
          type: Token
          symbol: test
    ConstructionDeriveResponse:
      type: object
      required:
        - entity_identifier
      properties:
        entity_identifier:
          "$ref": "#/components/schemas/EntityIdentifier"
    ConstructionDeriveRequestMetadata:
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          Account: "#/components/schemas/ConstructionDeriveRequestMetadataAccount"
          Validator: "#/components/schemas/ConstructionDeriveRequestMetadataValidator"
          Token: "#/components/schemas/ConstructionDeriveRequestMetadataToken"
    ConstructionDeriveRequestMetadataAccount:
      allOf:
        - "$ref": "#/components/schemas/ConstructionDeriveRequestMetadata"
    ConstructionDeriveRequestMetadataValidator:
      allOf:
        - "$ref": "#/components/schemas/ConstructionDeriveRequestMetadata"
    ConstructionDeriveRequestMetadataToken:
      allOf:
        - "$ref": "#/components/schemas/ConstructionDeriveRequestMetadata"
        - type: object
          required:
            - symbol
          properties:
            symbol:
              type: string
    ConstructionBuildRequest:
      type: object
      required:
        - network_identifier
        - operation_groups
        - fee_payer
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        operation_groups:
          description: Operation groups which describe the intent of the request.
          type: array
          items:
            "$ref": "#/components/schemas/OperationGroup"
        fee_payer:
          description: The address from which fees will be subtracted.
          "$ref": "#/components/schemas/EntityIdentifier"
        message:
          description: An optional message payload encoded in hex with the Radix message encoding scheme.
          type: string
        disable_resource_allocate_and_destroy:
          description: Disallow minting and burning of tokens (except for fees). Useful
            for verification of transactions without needing to fetch additional substate data,
            such as when verifying transactions in an offline environment.
          type: boolean
      example:
        network_identifier:
          network: mainnet
        fee_payer:
          address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88
        operation_groups:
          - operations:
              - type: Resource
                entity_identifier:
                  address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88
                amount:
                  resource_identifier:
                    type: Token
                    rri: xrd_rr1qy5wfsfh
                  value: "-1500"
              - type: Resource
                entity_identifier:
                  address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33
                amount:
                  resource_identifier:
                    type: Token
                    rri: xrd_rr1qy5wfsfh
                  value: '1500'
    ConstructionBuildResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: string
      discriminator:
        propertyName: result
        mapping:
          SUCCESS: "#/components/schemas/ConstructionBuildSuccessResponse"
          ERROR: "#/components/schemas/ConstructionBuildErrorResponse"
    ConstructionParseRequest:
      type: object
      required:
        - network_identifier
        - transaction
        - signed
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        transaction:
          description: Hex encoded transaction to parse.
          type: string
        signed:
          description: Whether the transaction is signed or not. If not signed, parsing
            will skip authorization checks.
          type: boolean
      example:
        network_identifier:
          network: mainnet
        transaction: 0d000107ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002010021000000000000000000000000000000000000000000000000000101ed50bab1800002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e80000008000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e7f6a02004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000000000000000000000000009600
        signed: false
    ConstructionParseResponse:
      type: object
      required:
        - operation_groups
      properties:
        operation_groups:
          description: The parsed operation groups.
          type: array
          items:
            "$ref": "#/components/schemas/OperationGroup"
        metadata:
          type: object
          properties:
            fee:
              "$ref": "#/components/schemas/ResourceAmount"
    ConstructionFinalizeRequest:
      type: object
      required:
        - network_identifier
        - unsigned_transaction
        - signature
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        unsigned_transaction:
          description: Hex encoded unsigned transaction.
          type: string
        signature:
          description: The signature for the unsigned transaction.
          "$ref": "#/components/schemas/Signature"
      example:
        network_identifier:
          network: mainnet
        unsigned_transaction: 0d000107ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002010021000000000000000000000000000000000000000000000000000101ed50bab1800002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e80000008000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329a6148f65d4e7f6a02004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000000000000000000000000009600
        signature:
          public_key:
            hex: ''
          bytes: ''
    ConstructionFinalizeResponse:
      type: object
      required:
        - signed_transaction
      properties:
        signed_transaction:
          description: Hex encoded signed transaction which can be submitted.
          type: string
      example:
        signed_transaction: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf
    ConstructionHashRequest:
      type: object
      required:
        - network_identifier
        - signed_transaction
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        signed_transaction:
          description: Hex encoded unsigned transaction
          type: string
      example:
        network_identifier:
          network: mainnet
        signed_transaction: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf
    ConstructionHashResponse:
      type: object
      required:
        - transaction_identifier
      properties:
        transaction_identifier:
          description: The unique hashed identifier of the transaction
          "$ref": "#/components/schemas/TransactionIdentifier"
      example:
        transaction_identifier:
          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842
    ConstructionSubmitRequest:
      type: object
      required:
        - network_identifier
        - signed_transaction
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        signed_transaction:
          description: Hex encoded signed transaction to be submitted.
          type: string
      example:
        network_identifier:
          network: mainnet
        signed_transaction: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf
    ConstructionSubmitResponse:
      type: object
      required:
        - transaction_identifier
        - duplicate
      properties:
        transaction_identifier:
          description: The unique hashed identifier of the transaction submitted.
          "$ref": "#/components/schemas/TransactionIdentifier"
        duplicate:
          description: Is true if the transaction is a duplicate of an existing transaction
            in the mempool.
          type: boolean
      example:
        transaction_identifier:
          hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842
        duplicate: false
    ConstructionBuildSuccessResponse:
      allOf:
        - "$ref": "#/components/schemas/ConstructionBuildResponse"
        - type: object
          required:
            - unsigned_transaction
            - payload_to_sign
          properties:
            unsigned_transaction:
              description: Hex encoded unsigned transaction.
              type: string
            payload_to_sign:
              description: Hex encoded hash payload to sign.
              type: string
    ConstructionBuildErrorResponse:
      allOf:
        - "$ref": "#/components/schemas/ConstructionBuildResponse"
        - type: object
          required:
            - details
          properties:
            details:
              "$ref": "#/components/schemas/ConstructionBuildError"
    ConstructionBuildErrorMessageTooLong:
      type: object
      required:
        - limit
        - actual
      properties:
        limit:
          type: integer
        actual:
          type: integer
    ConstructionBuildErrorNotEnoughResources:
      type: object
      required:
        - requested
        - available
      properties:
        requested:
          "$ref": "#/components/schemas/BigInteger"
        available:
          "$ref": "#/components/schemas/BigInteger"
    ConstructionBuildErrorMinimumStake:
      type: object
      required:
        - requested
        - minimum
      properties:
        requested:
          "$ref": "#/components/schemas/BigInteger"
        minimum:
          "$ref": "#/components/schemas/BigInteger"
    ConstructionBuildErrorCouldNotConstructFees:
      type: object
      required:
        - requested
        - minimum
      properties:
        attempts:
          type: integer
    ConstructionBuildErrorAboveMaximumRakeIncrease:
      type: object
      required:
        - requested
        - minimum
      properties:
        limit:
          "$ref": "#/components/schemas/BigInteger"
        attempted:
          "$ref": "#/components/schemas/BigInteger"
    ConstructionBuildErrorInvalidStakePermissions:
      type: object
      required:
        - requested
        - minimum
      properties:
        owner:
          "$ref": "#/components/schemas/AccountAddress"
        user:
          "$ref": "#/components/schemas/AccountAddress"
    ConstructionBuildError:
      type: object
      required:
        - errorType
      properties:
        errorType:
          type: string
      discriminator:
        propertyName: errorType
        mapping:
          MESSAGE_TOO_LONG: "#/components/schemas/ConstructionBuildErrorMessageTooLong"
          NOT_ENOUGH_RESOURCES: "#/components/schemas/ConstructionBuildErrorNotEnoughResources"
          BELOW_MINIMUM_STAKE: "#/components/schemas/ConstructionBuildErrorMinimumStake"
          COULD_NOT_CONSTRUCT_FEES: "#/components/schemas/ConstructionBuildErrorCouldNotConstructFees"
          ABOVE_MAXIMUM_RAKE_INCREASE: "#/components/schemas/ConstructionBuildErrorAboveMaximumRakeIncrease"
          INVALID_STAKE_PERMISSIONS: "#/components/schemas/ConstructionBuildErrorInvalidStakePermissions"
    CommittedTransactionsRequest:
      description: A request to retrieve a sublist of committed transactions from the
        ledger.
      type: object
      required:
        - network_identifier
      properties:
        network_identifier:
          "$ref": "#/components/schemas/NetworkIdentifier"
        state_identifier:
          description: The state identifier point from which transactions should be returned.
            For example, if you specify a `state_version` of 10, the first transaction in the response
            will take the ledger from a `state_version` of 10 to 11, and so have a commited `state_version` of 11.
            The ledger starts from a `state_version` of 0, with the first transaction being the genesis transaction.
          "$ref": "#/components/schemas/PartialStateIdentifier"
        limit:
          description: The maximum number of transactions that will be returned.
          "$ref": "#/components/schemas/LongNumber"
      example:
        network_identifier:
          network: mainnet
        state_identifier:
          state_version: 40897
        limit: 1
    CommittedTransactionsResponse:
      description: A response of committed transactions which specifies the state
        updates which have occurred on ledger.
      type: object
      required:
        - state_identifier
        - transactions
      properties:
        state_identifier:
          description: The committed ledger state identifier from which this transaction
            list starts from.
          "$ref": "#/components/schemas/StateIdentifier"
        transactions:
          description: A committed transactions list starting from the `state_identifier`.
          type: array
          items:
            "$ref": "#/components/schemas/CommittedTransaction"
      example:
        state_identifier:
          state_version: 40897
          transaction_accumulator: dd61e3e2c9cdda8bf8973ea7d6dd4e6482c569fff45f0ca5e2bfd196f5bae4c9
        transactions:
          - metadata:
              size: 360
              signed_by:
                hex: 02aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b6
              fee:
                resource:
                  rri: xrd_rr1qy5wfsfh
                  type: Token
                value: '72000000000000000'
              hex: 07030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c0100210000000000000000000000000000000000000000000000000000ffcb9e57d4000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c00000008000002004506000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c000002004506000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000000b015584aed8375f30b22a2203b77dbe15e5dc0a3618fb45ea30ee54a6ebe0054b673a471ad2214b7bd06c4228083643b57e095787c9fb01443e1c3d6890d28f60cf
              timestamp: 1627407310726
            committed_state_identifier:
              state_version: 40898
              transaction_accumulator: 5ea573f2e31640d177047d14122f1015c262f0d14d522596068784406aa1d88f
            transaction_identifier:
              hash: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d99337193811842
            operation_groups:
              - metadata:
                  action:
                    amount: '72000000000000000'
                    rri: xrd_rr1qy5wfsfh
                    from: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33
                    type: BurnTokens
                operations:
                  - amount:
                      resource_identifier:
                        rri: xrd_rr1qy5wfsfh
                        type: Token
                      value: "-2400000000000000000000000000"
                    substate:
                      substate_identifier:
                        identifier: 030e7094728c8d065c5db696977696bea9094f67bcfd4c021f99ec784e24023b0000000c
                      substate_operation: SHUTDOWN
                    entity_identifier:
                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33
                    type: Resource
                  - metadata:
                      substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007c13bc4b1c16827082c0000
                    amount:
                      resource_identifier:
                        rri: xrd_rr1qy5wfsfh
                        type: Token
                      value: '2399999999928000000000000000'
                    substate:
                      substate_identifier:
                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000000
                      substate_operation: BOOTUP
                    entity_identifier:
                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33
                    type: Resource
              - metadata:
                  action:
                    amount: '24000000000000000000000000'
                    rri: xrd_rr1qy5wfsfh
                    from: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33
                    to: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88
                    type: TokenTransfer
                operations:
                  - amount:
                      resource_identifier:
                        rri: xrd_rr1qy5wfsfh
                        type: Token
                      value: "-2399999999928000000000000000"
                    substate:
                      substate_identifier:
                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000000
                      substate_operation: SHUTDOWN
                    entity_identifier:
                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33
                    type: Resource
                  - metadata:
                      substate_data_hex: 06000402aa1c49af92a39d15257d7dc43f805f18f9f0ea712450c53e75255f5a0d1d93b601000000000000000000000000000000000000000007ad6192165e31dff02c0000
                    amount:
                      resource_identifier:
                        rri: xrd_rr1qy5wfsfh
                        type: Token
                      value: '2375999999928000000000000000'
                    substate:
                      substate_identifier:
                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000001
                      substate_operation: BOOTUP
                    entity_identifier:
                      address: rdx1qsp258zf47f288g4y47hm3plsp03370safcjg5x98e6j2h66p5we8ds8m7g33
                    type: Resource
                  - metadata:
                      substate_data_hex: 06000403dc62fa04804f75d009a2fac32c8ceb9dc5eaccd54934fe20ef5b86be40c7a2ab0100000000000000000000000000000000000000000013da329b63364718000000
                    amount:
                      resource_identifier:
                        rri: xrd_rr1qy5wfsfh
                        type: Token
                      value: '24000000000000000000000000'
                    substate:
                      substate_identifier:
                        identifier: ef71a9d6c63444fce6abd2df8fab2755cfb51f6794e578f60d9933719381184200000002
                      substate_operation: BOOTUP
                    entity_identifier:
                      address: rdx1qspacch6qjqy7awspx304sev3n4em302en25jd87yrh4hp47grr692cm0kv88
                    type: Resource
    CommittedTransaction:
      description: A transaction which has been committed on ledger.
      type: object
      required:
        - transaction_identifier
        - committed_state_identifier
        - operation_groups
        - metadata
      properties:
        transaction_identifier:
          description: The unique identifier for the transaction.
          "$ref": "#/components/schemas/TransactionIdentifier"
        committed_state_identifier:
          description: The ledger state identifier following the commit of this
            transaction.
          "$ref": "#/components/schemas/StateIdentifier"
        operation_groups:
          description: Transactions are split into operation groups which are roughly
            equivalent to ledger accounting entries where all credits have an equivalent
            debit amount.
          type: array
          items:
            "$ref": "#/components/schemas/OperationGroup"
        metadata:
          description: Metadata about the transaction, such as size and fee paid.
          "$ref": "#/components/schemas/CommittedTransactionMetadata"
    CommittedTransactionMetadata:
      type: object
      required:
        - size
        - hex
        - fee
        - timestamp
      properties:
        size:
          description: The size of the transaction in bytes.
          type: integer
        hex:
          description: The raw transaction bytes in hex encoding.
          type: string
        fee:
          description: The fee paid for the transaction.
          "$ref": "#/components/schemas/ResourceAmount"
        timestamp:
          description: Timestamp when the transaction was committed.
          "$ref": "#/components/schemas/LongNumber"
        signed_by:
          description: Optional public key which signed the transaction. If empty,
            then the transaction was produced by the system.
          "$ref": "#/components/schemas/PublicKey"
        message:
          description: Optional hex encoded byte array in the transaction.
          type: string
    OperationGroup:
      type: object
      required:
        - operations
      properties:
        operations:
          description: A group of operations representing a complete state update.
          type: array
          items:
            "$ref": "#/components/schemas/Operation"
        metadata:
          description: Metadata for the operation group.
          "$ref": "#/components/schemas/OperationGroupMetadata"
    Operation:
      type: object
      required:
        - type
        - entity_identifier
      properties:
        type:
          description: 'The type of operation: Resource, Data, or ResourceAndData.'
          type: string
        entity_identifier:
          description: The entity on which the operation is acting on.
          "$ref": "#/components/schemas/EntityIdentifier"
        substate:
          description: The substate (similar to UTXO) which this operation represents.
          "$ref": "#/components/schemas/Substate"
        amount:
          description: A balance change on the entity represented by the `entity_identifier`.
          "$ref": "#/components/schemas/ResourceAmount"
        data:
          description: A data update on the entity represented by the `entity_identifier`.
          "$ref": "#/components/schemas/Data"
        metadata:
          description: Metadata for the operation.
          "$ref": "#/components/schemas/OperationMetadata"
    Substate:
      type: object
      required:
        - substate_identifier
        - substate_operation
      properties:
        substate_operation:
          description: The type of substate operation (equivalent to UTXO create/spend).
          type: string
          enum:
            - BOOTUP
            - SHUTDOWN
        substate_identifier:
          "$ref": "#/components/schemas/SubstateIdentifier"
    TransactionIdentifier:
      type: object
      required:
        - hash
      properties:
        hash:
          "$ref": "#/components/schemas/TransactionIdentifierHash"
    SubstateIdentifier:
      description: Hex encoded unique identifier for the substate.
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string
    OperationMetadata:
      type: object
    ResourceAmount:
      type: object
      required:
        - value
        - resource_identifier
      properties:
        value:
          description: A signed big integer representing an amount of resources in
            10^18 subunits.
          "$ref": "#/components/schemas/BigInteger"
        resource_identifier:
          description: The resource this amount represents.
          "$ref": "#/components/schemas/ResourceIdentifier"
    Data:
      type: object
      required:
        - action
        - data_object
      properties:
        action:
          description: Data action to take on `data_object`.
          type: string
          enum:
            - CREATE
            - DELETE
        data_object:
          description: The object of the data action.
          "$ref": "#/components/schemas/DataObject"
    DataObject:
      type: object
      required:
        - type
      properties:
        type:
          description: The type of the data object. Each address may own up to one current
            object of a given type.
          type: string
      discriminator:
        propertyName: type
        mapping:
          VirtualParent: "#/components/schemas/VirtualParentData"
          UnclaimedRadixEngineAddress: "#/components/schemas/UnclaimedRadixEngineAddressData"
          RoundData: "#/components/schemas/RoundData"
          EpochData: "#/components/schemas/EpochData"
          TokenData: "#/components/schemas/TokenData"
          TokenMetadata: "#/components/schemas/TokenMetadata"
          PreparedValidatorRegistered: "#/components/schemas/PreparedValidatorRegistered"
          PreparedValidatorOwner: "#/components/schemas/PreparedValidatorOwner"
          PreparedValidatorFee: "#/components/schemas/PreparedValidatorFee"
          ValidatorMetadata: "#/components/schemas/ValidatorMetadata"
          ValidatorBFTData: "#/components/schemas/ValidatorBFTData"
          ValidatorAllowDelegation: "#/components/schemas/ValidatorAllowDelegation"
          ValidatorData: "#/components/schemas/ValidatorData"
          ValidatorSystemMetadata: "#/components/schemas/ValidatorSystemMetadata"
    TokenData:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - isMutable
          properties:
            granularity:
              description: The granularity of a token given subunits of 10^18 (ie a
                granularity of 10^17 means that the token can be split into 0.1 chunks
                but no less.
              "$ref": "#/components/schemas/BigInteger"
            is_mutable:
              description: If true, the `owner` is able to mint/burn tokens. Otherwise,
                the token is a fixed supply token.
              type: boolean
            owner:
              description: The owner of the token who can mint/burn.
                This is only available for mutable tokens.
              "$ref": "#/components/schemas/AccountAddress"
    TokenMetadata:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - symbol
          properties:
            symbol:
              description: The symbol of the token (not unique in the system).
              type: string
            name:
              description: The name of the token.
              type: string
            description:
              description: Description describing the token.
              type: string
            url:
              description: A url which points to more information about the token.
              type: string
            icon_url:
              description: A url which points to the icon of the token.
              type: string
    VirtualParentData:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
    UnclaimedRadixEngineAddressData:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
    RoundData:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - round
          properties:
            round:
              description: The round of the system.
              "$ref": "#/components/schemas/LongNumber"
    EpochData:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - epoch
          properties:
            epoch:
              description: The epoch of the system.
              "$ref": "#/components/schemas/LongNumber"
    PreparedValidatorRegistered:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - registered
          properties:
            registered:
              description: The registered flag of the validator which will be updated
                by the end of `epoch`.
              type: boolean
            epoch:
              description: Optional field, when non-empty describes the epoch the `registered`
                flag will update, otherwise no update is scheduled.
              "$ref": "#/components/schemas/LongNumber"
    PreparedValidatorOwner:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - owner
          properties:
            owner:
              description: The owner of the validator which will be updated by the end
                of `epoch`.
              "$ref": "#/components/schemas/AccountAddress"
            epoch:
              description: Optional field, when non-empty describes the epoch the `owner`
                field will update, otherwise no update is scheduled.
              "$ref": "#/components/schemas/LongNumber"
    PreparedValidatorFee:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - fee
          properties:
            fee:
              description: The fee percentage of the validator which will be updated
                in the future epoch.
              type: integer
            epoch:
              description: Optional field, when non-empty describes the epoch the `fee`
                field will update, otherwise no update is scheduled.
              "$ref": "#/components/schemas/LongNumber"
    ValidatorMetadata:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - name
            - url
          properties:
            name:
              description: The name for the validator.
              type: string
            url:
              description: A url which points to more information about the validator.
              type: string
    ValidatorBFTData:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - proposals_completed
            - proposals_missed
          properties:
            proposals_completed:
              description: The number of completed proposals by this validator as a
                leader in the current epoch.
              "$ref": "#/components/schemas/LongNumber"
            proposals_missed:
              description: The number of missed proposals by this validator as a leader
                in the current epoch.
              "$ref": "#/components/schemas/LongNumber"
    ValidatorAllowDelegation:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - allow_delegation
          properties:
            allow_delegation:
              description: Flag indicating whether stakers besides the owner of the
                validator can stake to this validator.
              type: boolean
    ValidatorData:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - owner
            - registered
            - fee
          properties:
            owner:
              description: The owner of the validator who receives the fees when others
                stake to the validator.
              "$ref": "#/components/schemas/AccountAddress"
            registered:
              description: Flag indicating whether a validator is registered to be part
                of the validator set.
              type: boolean
            fee:
              description: The fee percentage of the validator in 0.01% subunits (ie
                10000 == 100%).
              type: integer
    ValidatorSystemMetadata:
      allOf:
        - "$ref": "#/components/schemas/DataObject"
        - type: object
          required:
            - data
          properties:
            data:
              description: A hex encoded byte array.
              type: string
    OperationGroupMetadata:
      type: object
      properties:
        action:
          description: An inferred action which created this operation group.
          "$ref": "#/components/schemas/InferredAction"
    InferredAction:
      type: object
      required:
        - type
        - amount
        - rri
      properties:
        type:
          description: "The type of this action: TRANSFER, STAKE, UNSTAKE, MINT, BURN, UNKNOWN."
          type: string
        amount:
          description: A non-negative amount of resource.
          "$ref": "#/components/schemas/ResourceAmount"
        from:
          description: If relevant, the account address from which the resource came.
          "$ref": "#/components/schemas/AccountAddress"
        to:
          description: If relevant, the account address to which the resource was sent.
          "$ref": "#/components/schemas/AccountAddress"
        validator:
          description: For stake actions, the validator address that the XRD was staked from/to.
          "$ref": "#/components/schemas/ValidatorAddress"
    PublicKey:
      type: object
      required:
        - hex
      properties:
        hex:
          description: Compressed ECSDA Public Key hex encoded.
          type: string
    NetworkIdentifier:
      type: object
      required:
        - network
      properties:
        network:
          type: string
      example:
        network: mainnet
    StateIdentifier:
      type: object
      required:
        - state_version
        - transaction_accumulator
      properties:
        state_version:
          description: The `state_version` represents some valid committed state on
            ledger (similar to block height).
          "$ref": "#/components/schemas/LongNumber"
        transaction_accumulator:
          description: Accumulator hash representing all transactions which occurred
            up to `state_version`. Hex encoded.
          type: string
      example:
        state_version: 0
        transaction_accumulator: "0000000000000000000000000000000000000000000000000000000000000000"
    PartialStateIdentifier:
      type: object
      required:
        - state_version
      properties:
        state_version:
          description: The `state_version` represents some valid committed state on
            ledger (similar to block height).
          "$ref": "#/components/schemas/LongNumber"
        transaction_accumulator:
          description: Accumulator hash representing all transactions which occurred
            up to `state_version`. Hex encoded.
          type: string
    EntityIdentifier:
      type: object
      required:
        - address
      properties:
        address:
          description: The top level identifier for an entity.
          type: string
        sub_address:
          description: Further drill down into an entity. Can be treated as an entirely
            separate address from `address` or as a child of `address`.
          "$ref": "#/components/schemas/SubAddress"
    SubAddress:
      type: object
      required:
        - address
      properties:
        address:
          description: The subaddress.
          type: string
        metadata:
          description: Any additional data required to drill down to a particular
            address is added here.
          "$ref": "#/components/schemas/SubAddressMetadata"
    SubAddressMetadata:
      type: object
      properties:
        validator:
          "$ref": "#/components/schemas/ValidatorAddress"
        epoch_unlock:
          "$ref": "#/components/schemas/LongNumber"
    ResourceIdentifier:
      type: object
      required:
        - type
      properties:
        type:
          description: The type of resource.
          type: string
      discriminator:
        propertyName: type
        mapping:
          Token: "#/components/schemas/TokenResourceIdentifier"
          StakeOwnership: "#/components/schemas/StakeOwnershipResourceIdentifier"
    TokenResourceIdentifier:
      allOf:
        - "$ref": "#/components/schemas/ResourceIdentifier"
        - type: object
          required:
            - rri
          properties:
            rri:
              description: The Radix Resource Identifier "RRI" of the token.
              "$ref": "#/components/schemas/RRI"
    StakeOwnershipResourceIdentifier:
      allOf:
        - "$ref": "#/components/schemas/ResourceIdentifier"
        - type: object
          required:
            - validator
          properties:
            validator:
              description: The validator associated with this stake ownership.
              "$ref": "#/components/schemas/ValidatorAddress"
    Signature:
      type: object
      required:
        - public_key
        - bytes
      properties:
        public_key:
          "$ref": "#/components/schemas/PublicKey"
        bytes:
          type: string
    Bech32HRPs:
      type: object
      required:
        - account_hrp
        - validator_hrp
        - node_hrp
        - resource_hrp_suffix
      properties:
        account_hrp:
          type: string
        validator_hrp:
          type: string
        node_hrp:
          type: string
        resource_hrp_suffix:
          type: string
    AccountAddress:
      type: string
      pattern: "^(r|t|d)dx[0-9]?1[023456789ACDEFGHJKLMNPQRSTUVWXYZacdefghjklmnpqrstuvwxyz]{6,69}$"
    ValidatorAddress:
      type: string
      pattern: "^(r|t|d)v[0-9]?1[023456789ACDEFGHJKLMNPQRSTUVWXYZacdefghjklmnpqrstuvwxyz]{6,69}$"
    RRI:
      type: string
      pattern: ^[!\"#$%&'()*+,-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\]\^_`abcdefghijklmnopqrstuvwxyz{|}~]{1,83}_r[rb]1[023456789ACDEFGHJKLMNPQRSTUVWXYZacdefghjklmnpqrstuvwxyz]{6,90}$
    LongNumber:
      type: integer
      format: int64
    BigInteger:
      type: string
      pattern: "^-?[0-9]+$"
    TransactionIdentifierHash:
      type: string
      pattern: "^[0123456789abcdef]{64}$"
      maxLength: 64
      minLength: 64
    InternalServerError:
      type: object
      properties:
        exception:
          type: string
        cause:
          type: string
    InvalidJsonError:
      type: object
      properties:
        cause:
          type: string
    InvalidRequestError:
      type: object
      properties:
        pointer:
          type: string
        cause:
          type: string
    UnexpectedError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      discriminator:
        propertyName: message
        mapping:
          INTERNAL_SERVER_ERROR: "#/components/schemas/InternalServerError"
          INVALID_JSON: "#/components/schemas/InvalidJsonError"
          INVALID_REQUEST: "#/components/schemas/InvalidRequestError"
  examples:
    StateIdentifier:
      value:
        state_version: 46001
        transaction_accumulator: 2892a2359c37ab02116d46f742c684234d5aa9658682815f8221fc0b613101e0
