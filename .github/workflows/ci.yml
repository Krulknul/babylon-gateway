name: dotnet package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          include-prerelease: true
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-restore --verbosity normal
  publish-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to GCR (rc)
        uses: docker/login-action@v1
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}
      - name: Setup Tags for docker image
        run: |
            docker_tag_with_branch(){
               GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD | sed 's/\//-/g')
               GIT_COMMIT=$(git log -1 --format=%h )
               DOCKER_TAG=${GIT_BRANCH}-${GIT_COMMIT}
            }

            GH_EVENT_NAME="${{ github.event_name }}"
            GH_ACTION_NAME="${{ github.event.action}}"
            DOCKER_REPO="eu.gcr.io/lunar-arc-236318/ng-data-aggregator"

            case "${GH_EVENT_NAME}" in
                release)
                    TAGS="${DOCKER_REPO}:${{ github.event.release.tag_name }}"
                ;;
                pull_request | push)
                    docker_tag_with_branch
                    TAGS="${DOCKER_REPO}:${DOCKER_TAG}"
                ;;
                *)
                    echo "${GH_EVENT_NAME} not implemented yet"
                    exit 1
                ;;
            esac
             
      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          file: ./src/DataAggregator/Dockerfile
          tags: |
            ${{ env.TAGS }}
          push: true
          context: ./src/DataAggregator/



