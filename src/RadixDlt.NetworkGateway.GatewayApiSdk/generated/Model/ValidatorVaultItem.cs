/*
 * Babylon Gateway API - RCnet V3
 *
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.GatewayApiSdk.Model
{
    /// <summary>
    /// ValidatorVaultItem
    /// </summary>
    [DataContract(Name = "ValidatorVaultItem")]
    public partial class ValidatorVaultItem : IEquatable<ValidatorVaultItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatorVaultItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidatorVaultItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatorVaultItem" /> class.
        /// </summary>
        /// <param name="balance">String-encoded decimal representing the amount of a related fungible resource. (required).</param>
        /// <param name="lastChangedAtStateVersion">lastChangedAtStateVersion (required).</param>
        /// <param name="address">Bech32m-encoded human readable version of the address. (required).</param>
        public ValidatorVaultItem(string balance = default(string), long lastChangedAtStateVersion = default(long), string address = default(string))
        {
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new ArgumentNullException("balance is a required property for ValidatorVaultItem and cannot be null");
            }
            this.Balance = balance;
            this.LastChangedAtStateVersion = lastChangedAtStateVersion;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for ValidatorVaultItem and cannot be null");
            }
            this.Address = address;
        }

        /// <summary>
        /// String-encoded decimal representing the amount of a related fungible resource.
        /// </summary>
        /// <value>String-encoded decimal representing the amount of a related fungible resource.</value>
        [DataMember(Name = "balance", IsRequired = true, EmitDefaultValue = true)]
        public string Balance { get; set; }

        /// <summary>
        /// Gets or Sets LastChangedAtStateVersion
        /// </summary>
        [DataMember(Name = "last_changed_at_state_version", IsRequired = true, EmitDefaultValue = true)]
        public long LastChangedAtStateVersion { get; set; }

        /// <summary>
        /// Bech32m-encoded human readable version of the address.
        /// </summary>
        /// <value>Bech32m-encoded human readable version of the address.</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidatorVaultItem {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  LastChangedAtStateVersion: ").Append(LastChangedAtStateVersion).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidatorVaultItem);
        }

        /// <summary>
        /// Returns true if ValidatorVaultItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidatorVaultItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidatorVaultItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.LastChangedAtStateVersion == input.LastChangedAtStateVersion ||
                    this.LastChangedAtStateVersion.Equals(input.LastChangedAtStateVersion)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balance != null)
                {
                    hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastChangedAtStateVersion.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
