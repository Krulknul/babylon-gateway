/*
 * Babylon Gateway API - RCnet V3
 *
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.GatewayApiSdk.Model
{
    /// <summary>
    /// ValidatorsUptimeResponseAllOf
    /// </summary>
    [DataContract(Name = "ValidatorsUptimeResponse_allOf")]
    public partial class ValidatorsUptimeResponseAllOf : IEquatable<ValidatorsUptimeResponseAllOf>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatorsUptimeResponseAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidatorsUptimeResponseAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatorsUptimeResponseAllOf" /> class.
        /// </summary>
        /// <param name="validators">validators (required).</param>
        public ValidatorsUptimeResponseAllOf(ValidatorUptimeCollection validators = default(ValidatorUptimeCollection))
        {
            // to ensure "validators" is required (not null)
            if (validators == null)
            {
                throw new ArgumentNullException("validators is a required property for ValidatorsUptimeResponseAllOf and cannot be null");
            }
            this.Validators = validators;
        }

        /// <summary>
        /// Gets or Sets Validators
        /// </summary>
        [DataMember(Name = "validators", IsRequired = true, EmitDefaultValue = true)]
        public ValidatorUptimeCollection Validators { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidatorsUptimeResponseAllOf {\n");
            sb.Append("  Validators: ").Append(Validators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidatorsUptimeResponseAllOf);
        }

        /// <summary>
        /// Returns true if ValidatorsUptimeResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidatorsUptimeResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidatorsUptimeResponseAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Validators == input.Validators ||
                    (this.Validators != null &&
                    this.Validators.Equals(input.Validators))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Validators != null)
                {
                    hashCode = (hashCode * 59) + this.Validators.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
