/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.GatewayApiSdk.Model
{
    /// <summary>
    /// TokenAmount
    /// </summary>
    [DataContract(Name = "TokenAmount")]
    public partial class TokenAmount : IEquatable<TokenAmount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenAmount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenAmount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenAmount" /> class.
        /// </summary>
        /// <param name="value">value (required).</param>
        /// <param name="tokenIdentifier">tokenIdentifier (required).</param>
        public TokenAmount(string value = default(string), TokenIdentifier tokenIdentifier = default(TokenIdentifier))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for TokenAmount and cannot be null");
            }
            this.Value = value;
            // to ensure "tokenIdentifier" is required (not null)
            if (tokenIdentifier == null)
            {
                throw new ArgumentNullException("tokenIdentifier is a required property for TokenAmount and cannot be null");
            }
            this.TokenIdentifier = tokenIdentifier;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets TokenIdentifier
        /// </summary>
        [DataMember(Name = "token_identifier", IsRequired = true, EmitDefaultValue = true)]
        public TokenIdentifier TokenIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenAmount {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  TokenIdentifier: ").Append(TokenIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenAmount);
        }

        /// <summary>
        /// Returns true if TokenAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenAmount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.TokenIdentifier == input.TokenIdentifier ||
                    (this.TokenIdentifier != null &&
                    this.TokenIdentifier.Equals(input.TokenIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.TokenIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.TokenIdentifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Value (string) pattern
            Regex regexValue = new Regex(@"^-?[0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }

            yield break;
        }
    }

}
