/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.GatewayApiSdk.Model
{
    /// <summary>
    /// TransactionFinalizeResponse
    /// </summary>
    [DataContract(Name = "TransactionFinalizeResponse")]
    public partial class TransactionFinalizeResponse : IEquatable<TransactionFinalizeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionFinalizeResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionFinalizeResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionFinalizeResponse" /> class.
        /// </summary>
        /// <param name="signedTransaction">The signed transaction payload which can be submitted, hex encoded. (required).</param>
        /// <param name="transactionIdentifier">transactionIdentifier (required).</param>
        public TransactionFinalizeResponse(string signedTransaction = default(string), TransactionIdentifier transactionIdentifier = default(TransactionIdentifier))
        {
            // to ensure "signedTransaction" is required (not null)
            if (signedTransaction == null)
            {
                throw new ArgumentNullException("signedTransaction is a required property for TransactionFinalizeResponse and cannot be null");
            }
            this.SignedTransaction = signedTransaction;
            // to ensure "transactionIdentifier" is required (not null)
            if (transactionIdentifier == null)
            {
                throw new ArgumentNullException("transactionIdentifier is a required property for TransactionFinalizeResponse and cannot be null");
            }
            this.TransactionIdentifier = transactionIdentifier;
        }

        /// <summary>
        /// The signed transaction payload which can be submitted, hex encoded.
        /// </summary>
        /// <value>The signed transaction payload which can be submitted, hex encoded.</value>
        [DataMember(Name = "signed_transaction", IsRequired = true, EmitDefaultValue = true)]
        public string SignedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIdentifier
        /// </summary>
        [DataMember(Name = "transaction_identifier", IsRequired = true, EmitDefaultValue = true)]
        public TransactionIdentifier TransactionIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionFinalizeResponse {\n");
            sb.Append("  SignedTransaction: ").Append(SignedTransaction).Append("\n");
            sb.Append("  TransactionIdentifier: ").Append(TransactionIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionFinalizeResponse);
        }

        /// <summary>
        /// Returns true if TransactionFinalizeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionFinalizeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionFinalizeResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignedTransaction == input.SignedTransaction ||
                    (this.SignedTransaction != null &&
                    this.SignedTransaction.Equals(input.SignedTransaction))
                ) && 
                (
                    this.TransactionIdentifier == input.TransactionIdentifier ||
                    (this.TransactionIdentifier != null &&
                    this.TransactionIdentifier.Equals(input.TransactionIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignedTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.SignedTransaction.GetHashCode();
                }
                if (this.TransactionIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionIdentifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
