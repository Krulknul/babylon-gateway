/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.GatewayApiSdk.Model
{
    /// <summary>
    /// TransactionStatusResponse
    /// </summary>
    [DataContract(Name = "TransactionStatusResponse")]
    public partial class TransactionStatusResponse : IEquatable<TransactionStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionStatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionStatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionStatusResponse" /> class.
        /// </summary>
        /// <param name="ledgerState">ledgerState (required).</param>
        /// <param name="transaction">transaction (required).</param>
        public TransactionStatusResponse(LedgerState ledgerState = default(LedgerState), TransactionInfo transaction = default(TransactionInfo))
        {
            // to ensure "ledgerState" is required (not null)
            if (ledgerState == null)
            {
                throw new ArgumentNullException("ledgerState is a required property for TransactionStatusResponse and cannot be null");
            }
            this.LedgerState = ledgerState;
            // to ensure "transaction" is required (not null)
            if (transaction == null)
            {
                throw new ArgumentNullException("transaction is a required property for TransactionStatusResponse and cannot be null");
            }
            this.Transaction = transaction;
        }

        /// <summary>
        /// Gets or Sets LedgerState
        /// </summary>
        [DataMember(Name = "ledger_state", IsRequired = true, EmitDefaultValue = true)]
        public LedgerState LedgerState { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", IsRequired = true, EmitDefaultValue = true)]
        public TransactionInfo Transaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionStatusResponse {\n");
            sb.Append("  LedgerState: ").Append(LedgerState).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionStatusResponse);
        }

        /// <summary>
        /// Returns true if TransactionStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionStatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LedgerState == input.LedgerState ||
                    (this.LedgerState != null &&
                    this.LedgerState.Equals(input.LedgerState))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LedgerState != null)
                {
                    hashCode = (hashCode * 59) + this.LedgerState.GetHashCode();
                }
                if (this.Transaction != null)
                {
                    hashCode = (hashCode * 59) + this.Transaction.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
