/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.GatewayApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.GatewayApiSdk.Model
{
    /// <summary>
    /// TransactionStatus
    /// </summary>
    [DataContract(Name = "TransactionStatus")]
    public partial class TransactionStatus : IEquatable<TransactionStatus>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum CONFIRMED for value: CONFIRMED
            /// </summary>
            [EnumMember(Value = "CONFIRMED")]
            CONFIRMED = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionStatus" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="confirmedTime">confirmedTime.</param>
        /// <param name="ledgerStateVersion">ledgerStateVersion.</param>
        public TransactionStatus(StatusEnum status = default(StatusEnum), string confirmedTime = default(string), long ledgerStateVersion = default(long))
        {
            this.Status = status;
            this.ConfirmedTime = confirmedTime;
            this.LedgerStateVersion = ledgerStateVersion;
        }

        /// <summary>
        /// Gets or Sets ConfirmedTime
        /// </summary>
        [DataMember(Name = "confirmed_time", EmitDefaultValue = false)]
        public string ConfirmedTime { get; set; }

        /// <summary>
        /// Gets or Sets LedgerStateVersion
        /// </summary>
        [DataMember(Name = "ledger_state_version", EmitDefaultValue = false)]
        public long LedgerStateVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ConfirmedTime: ").Append(ConfirmedTime).Append("\n");
            sb.Append("  LedgerStateVersion: ").Append(LedgerStateVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionStatus);
        }

        /// <summary>
        /// Returns true if TransactionStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ConfirmedTime == input.ConfirmedTime ||
                    (this.ConfirmedTime != null &&
                    this.ConfirmedTime.Equals(input.ConfirmedTime))
                ) && 
                (
                    this.LedgerStateVersion == input.LedgerStateVersion ||
                    this.LedgerStateVersion.Equals(input.LedgerStateVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ConfirmedTime != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmedTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LedgerStateVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
