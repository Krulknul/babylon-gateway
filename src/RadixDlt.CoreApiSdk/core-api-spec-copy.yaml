openapi: 3.0.0
# NOTES TO EDITORS:
#
# Guidance for integer types (see https://swagger.io/docs/specification/data-models/data-types/#numbers)
#
# => If a u8, use type: integer, format: int32, minimum: 0, maximum: 255
# => If an i8, use type: integer, format: int32, minimum: -128, maximum: 127 (also, why are you using an i8!?)
# => If a u32:
#    => If there's a domain-imposed requirement that fits it within an i32 (2,147,483,647 = 2^31 - 1), with bound B use
#         type: integer
#         format: int32
#         minimum: 0
#         maximum: B
#       And be sure to validate against B in the code which maps into the type. See EG epoch max length in numerics.rs
#    => If not, to be compatible with OAS, we need to put it into an int64:
#         type: integer
#         format: int64
#         minimum: 0
#         maximum: 4294967295
# => If an i32, use type: integer, format: int32
# => If a u64:
#    => The maximum safe integer in Javascript is (+-)2^53 – 1 = 9,007,199,254,740,991 ~ 9 * 10^15
#       To be pragmatic, any numbers outside this range we will choose to represent as strings.
#    => So if it's possible for us to assert that: value <= bound B <= 2^53 - 1, then use:
#       type: integer, format: int64, minimum: 0, maximum: B
#       And be sure to validate against B in the code which maps into the type. See EG epoch max length in numerics.rs
#    => If not, use a string instead
# => If an i64:
#    => The maximum safe integer in Javascript is (+-)2^53 – 1 = 9,007,199,254,740,991 ~ 9 * 10^15
#       To be pragmatic, any numbers outside this range we will choose to represent as strings.
#    => So if it's possible for us to assert that: -(2^53 - 1) <= B1 <= value <= B2 <= 2^53 - 1, then use:
#         type: integer
#         format: int64
#         minimum: B1
#         maximum: B2
#       And be sure to validate against B in the code which maps into the type. See EG epoch max length in numerics.rs
#    => If not, use a string instead
# => If something over i64/u64, use type: string
#
# Regardless of the type, specify in the description what the underlying type and bounds are, by starting with something like:
# - An integer between 0 and 10^10, giving
# - A decimal-string-encoded integer between 0 and 2^64 - 1, which
# - A decimal-string-encoded integer between 0 and 10^123, that
#
# Descriptions guidance:
# => For descriptions of encoded types, we follow this pattern: 'The xyz-encoded, abc-encoded xx of the yy'
#    EG 'The hex-encoded, SBOR-encoded data' or 'The hex-encoded Blake2b-256 hash of the banana payload'
# => Don't end in a full-stop, unless it is more than 1 sentence, then all sentences should end in a full stop
# => It's not technically valid to have both $ref and description, but it works in ReDocly, so feel free to do it
#
# Naming guidance:
# => Hex-encoded hashes should end _hash
# => Hex-encoded bytes/payload should end _hex and not include _bytes
info:
  version: '0.4.0'
  title: 'Babylon Core API - RCnet V2'
  license:
    name: The Radix License, Version 1.0
    url: https://www.radixfoundation.org/licenses/license-v1
  x-logo:
    url: https://docs.radixdlt.com/main/_images/radix-logo-banner.png
    href: https://docs.radixdlt.com
  description: |
    This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.

    It is intended for use by node-runners on a private network, and is not intended to be exposed publicly.
    Very heavy load may impact the node's function.

    This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history
    (under `/lts/stream/` or `/stream`).

    If you require queries against snapshots of historical ledger state, you may also wish to consider using the
    [Gateway API](https://docs-babylon.radixdlt.com/).

    ## Integration and forward compatibility guarantees

    This version of the Core API belongs to the first release candidate of the Radix Babylon network ("RCnet-V1").

    Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear
    and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.

    All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond).
    We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive
    JSON parser which ignores unknown fields, any additions will not affect existing code.

    We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to
    be minimal.

servers:
  - url: 'localhost:3333/core'
# See https://redocly.com/docs/api-reference-docs/specification-extensions/x-tag-groups/ for details
x-tagGroups:
  - name: Overview
    tags:
      - SDKs
      - SubAPIs
      - Concepts
      - Construction
  - name: Endpoints
    tags:
      - LTS
      - Status
      - Transaction
      - Mempool
      - State
      - Stream
tags:
  - name: SDKs
    x-displayName: SDKs
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      The following SDKs are currently available for the Core API:
      - Typescript: [@radixdlt/babylon-core-api-sdk](https://www.npmjs.com/package/@radixdlt/babylon-core-api-sdk)

      For other languages, you can use a HTTP client of your choice and code the JSON models yourself.
      You could also consider using an Open API generator, but unless you have experience with battling the gremlins in Open API generators,
      it may be more trouble than it's worth.
  - name: SubAPIs
    x-displayName: Sub-APIs
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      The API is split into 6 sub apis:
      - **Long Term Support** (`/lts/*`) - For long term support/backward compatible endpoints aimed at integrators such as exchanges.
      - **Status** (`/status/*`) - For status and configuration details for the node / engine.
      - **Transaction** (`/transaction/*`) - For transaction construction, preview, submission, and monitoring the status of an individual transaction.
      - **Mempool** (`/mempool/*`) - For information on the contents of the node's mempool.
      - **Current State** (`/state/*`) - For reading the state of entities. At present, we only support reading details from the top of the currently committed ledger.
      - **Stream** (`/stream/*`) - For reading the committed transactions.
  - name: Concepts
    x-displayName: Concepts
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      Interacting with this API effectively may require knowledge about the Radix Babylon Transaction Model and the State Model.

      We share some very high-level details below, but please see the [official documentation](http://docs.radixdlt.com) for more details on this.

      ## Transactions

      User transactions are formed of a core "intent", which is then signed by 0+ signatories, before being notarized. The output is called a notarized payload.
      It is this notarized transaction payload which is submitted to the network.

      For most users, this construction process will generally happen in their Radix Wallet. If you wish to construct transactions programmatically or offline,
      you will need to integrate the Radix Engine Toolkit into your application for construction and finalization.

      Once submitted, a transaction payload can end up being either rejected or committed. Transactions get rejected if they fail to pass certain criteria at the given time.
      A transaction payload can be marked as a:
      - **Permanent Rejection** if it is never possible for it to be committed (eg it's statically invalid, or only valid up until epoch 100 and it's now epoch 101)
      - **Temporary Rejection** if it still may be possible that the transaction payload could be committed

      A given intent typically is only part of one submitted notarized payload, but it's possible for a notary to notarize and submit multiple payloads for the same intent.
      The Radix Engine ensures that any intent can only be committed once.

      A committed transaction is either committed with an outcome of "Success" or "Failure":
      - **Committed Failure** will result in fees being paid up until the failure point, but all other changes will be discarded.
      - **Committed Success** will result in all changes being committed.

      Only committed transactions appear on ledger. The status of rejected transactions can be read at submission time or from the transaction status endpoint - by virtue of
      a rejection cache on the node. This cache is limited in size, so rejected statuses may no longer be tracked after a period of time.

      For a more robust handling of transaction rejections, consider running your own Gateway.

      ## State Model

      The Radix Engine State Model can be thought of as a forest of state sub-trees.
      A state sub-tree consists of "entities". These entities have an ID, and 0 or more "substates" at keys underneath them.
      These substates are typed, and can own other entities, forming a tree of ownership.

      Each state sub-tree has a root entity, and a single Bech32M Global Address, with a human-readable-prefix (and prefix byte) matching the root entity type.

      As an example, entities include concepts like Components, Packages, Vaults, Resource Managers and Key-Value Stores.
      Substates under a component include the Component Struct, Component Data, and Access Rules substates.
  - name: Construction
    x-displayName: Transaction Construction
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      To construct and submit a transaction using the LTS endpoints:

      * Query `/lts/transaction/construction` to retrieve the current epoch (according to your node).
        Check also that the `ledger_clock` is close to the current time - this ensures that the node is synced up.
      * Make use of the Radix Engine Toolkit to construct the intent, sign/notarize, and compile the notarized transaction.
      * You can use `/lts/transaction/submit` to submit the transaction
      * Use `/lts/transaction/status` to check the status of the transaction
      * Use `/lts/stream/transaction-outcomes` to look up the outcome of the transaction, from its state version
  - name: LTS
    x-displayName: LTS Endpoints
    description: |
      For long term support/backward compatible endpoints aimed at integrators such as exchanges.
  - name: Status
    x-displayName: Status Endpoints
    description: |
      For status and configuration details for the node / engine.
  - name: Transaction
    x-displayName: Transaction Endpoints
    description: |
      For transaction construction, preview, submission, and monitoring the status of an individual transaction.
  - name: Mempool
    x-displayName: Mempool Endpoints
    description: |
      For information on the contents of the node's mempool.
  - name: State
    x-displayName: State Endpoints
    description: |
      For reading the state of entities. At present, we only support reading details from the top of the currently committed ledger.
  - name: Stream
    x-displayName: Stream Endpoints
    description: To query the transaction stream of the ledger.
paths:
  ##################################################
  # Long Term Support backwards compatible Sub-API #
  ##################################################
  "/lts/transaction/construction":
    post:
      summary: Get Construction Metadata
      description: Returns information necessary to build a transaction
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsTransactionConstructionRequest"
      responses:
        '200':
          description: All info needed to build a transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionConstructionResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/transaction/submit":
    post:
      summary: Submit Transaction
      description: |
        Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node's mempool.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsTransactionSubmitRequest"
      responses:
        '200':
          description: Transaction Submit Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionSubmitResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitErrorResponse"
  "/lts/transaction/status":
    post:
      summary: Get Transaction Status
      description: |
        Shares the node's knowledge of any payloads associated with the given intent hash.
        Generally there will be a single payload for a given intent, but it's theoretically possible there may be multiple.
        This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient
        for most clients.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsTransactionStatusRequest"
      responses:
        '200':
          description: Transaction status response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionStatusResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/state/account-all-fungible-resource-balances":
    post:
      summary: Get All Account Balances
      description: Returns balances for all resources associated with an account
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStateAccountAllFungibleResourceBalancesRequest"
      responses:
        '200':
          description: Account all resource balances response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStateAccountAllFungibleResourceBalancesResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/state/account-fungible-resource-balance":
    post:
      summary: Get Single Account Balance
      description: Returns balance of a single fungible resource in an account
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStateAccountFungibleResourceBalanceRequest"
      responses:
        '200':
          description: Account resource balance response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStateAccountFungibleResourceBalanceResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/stream/transaction-outcomes":
    post:
      summary: Get Transaction Outcomes
      description: |
        Returns a list of committed transaction outcomes (containing balance changes) from a given state version.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStreamTransactionOutcomesRequest"
      responses:
        '200':
          description: Paged response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStreamTransactionOutcomesResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/stream/account-transaction-outcomes":
    post:
      summary: Get Account Transaction Outcomes
      description: |
        Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStreamAccountTransactionOutcomesRequest"
      responses:
        '200':
          description: Paged response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStreamAccountTransactionOutcomesResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  ##################
  # Status Sub-API #
  ##################
  "/status/network-configuration":
    post:
      summary: Get Network Configuration
      description: Returns the network configuration of the network the node is connected to.
      tags:
        - Status
      responses:
        '200':
          description: Network Configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkConfigurationResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/status/network-status":
    post:
      summary: Get Network Status
      description: Returns the current state and status of the node's copy of the ledger.
      tags:
        - Status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkStatusRequest"
      responses:
        '200':
          description: Network Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkStatusResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  ###################
  # Mempool Sub-API #
  ###################
  "/mempool/list":
    post:
      summary: Get Mempool List
      description: Returns the hashes of all the transactions currently in the mempool
      tags:
        - Mempool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MempoolListRequest"
      responses:
        '200':
          description: Mempool List Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MempoolListResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/mempool/transaction":
    post:
      summary: Get Mempool Transaction
      description: Returns the payload of a transaction currently in the mempool
      tags:
        - Mempool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MempoolTransactionRequest"
      responses:
        '200':
          description: Mempool Transaction Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MempoolTransactionResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  #######################
  # Transaction Sub-API #
  #######################
  "/transaction/parse":
    post:
      summary: Parse Transaction Payload
      description: Extracts the contents and hashes of various types of transaction payloads, or sub-payloads.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionParseRequest"
      responses:
        '200':
          description: Transaction Parse Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionParseResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/submit":
    post:
      summary: Transaction Submit
      description: |
        Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node's mempool.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionSubmitRequest"
      responses:
        '200':
          description: Transaction Submit Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitErrorResponse"
  "/transaction/status":
    post:
      summary: Get Transaction Status
      description: |
        Shares the node's knowledge of any payloads associated with the given intent hash.
        Generally there will be a single payload for a given intent, but it's theoretically possible there may be multiple.
        This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient
        for most clients.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionStatusRequest"
      responses:
        '200':
          description: Transaction status response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionStatusResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/receipt":
    post:
      summary: Get Transaction Receipt
      description: |
        Gets the transaction receipt for a committed transaction.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionReceiptRequest"
      responses:
        '200':
          description: Committed transaction found response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionReceiptResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Committed transaction not found response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/call-preview":
    post:
      summary: Scrypto Call Preview
      description: |
        Preview a scrypto function or method call against the latest network state.
        Returns the result of the scrypto function or method call.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionCallPreviewRequest"
            examples:
              method:
                summary: A method call example
                value: {"target":{"type":"method","component_address":"component_loc1qftacppvmr9ezmekxqpq58en0nk954x0a7jv2zz0hc7qfxlgx4","method_name":"lock_fee"},"arguments":["a120000000000010632d5ec66b050000000000000000000000000000000000000000000000"]}
              function:
                summary: A function call example
                value: {"target":{"type":"function","package_address":"package_loc1q9ufgsc8yh5fkv8kzny3vnp68gkmuytc004k0j8dkwvs0xq76q","blueprint_name":"GumballMachine","function_name":"instantiate_gumball_machine"},"arguments":["a120000000000010632d5ec66b050000000000000000000000000000000000000000000000"]}
      responses:
        '200':
          description: Result of the scrypto function call
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCallPreviewResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/preview":
    post:
      summary: Transaction Preview
      description: |
        Preview a transaction against the latest network state, and returns the preview receipt.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionPreviewRequest"
      responses:
        '200':
          description: Transaction preview response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPreviewResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  ##################
  # Stream Sub-API #
  ##################
  "/stream/transactions":
    post:
      summary: Get Committed Transactions
      description: |
        Returns the list of committed transactions.
      tags:
        - Stream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StreamTransactionsRequest"
      responses:
        '200':
          description: Committed transactions response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamTransactionsResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  #################
  # State Sub-API #
  #################
  "/state/consensus-manager":
    post:
      summary: Get Consensus Manager Details
      description: |
        Reads the consensus manager's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateConsensusManagerRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateConsensusManagerResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/account":
    post:
      summary: Get Account Details
      description: |
        Reads the account's substate/s from the top of the current ledger.
        Also returns all vaults under the account.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateAccountRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateAccountResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/component":
    post:
      summary: Get Component Details
      description: |
        Reads the component's substate/s from the top of the current ledger.
        Also recursively extracts vault balance totals from the component's entity subtree.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateComponentRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateComponentResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/validator":
    post:
      summary: Get Validator Details
      description: |
        Reads the validator's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateValidatorRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateValidatorResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/access-controller":
    post:
      summary: Get Access Controller Details
      description: |
        Reads the access controller's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateAccessControllerRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateAccessControllerResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/resource":
    post:
      summary: Get Resource Details
      description: |
        Reads the resource manager's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateResourceRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResourceResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/non-fungible":
    post:
      summary: Get Non-Fungible Details
      description: |
        Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateNonFungibleRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateNonFungibleResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/package":
    post:
      summary: Get Package Details
      description: |
        Reads the package's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatePackageRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatePackageResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
#############################################################################################
components:
  schemas:
    #############################################
    # GENERAL / SHARED MODELS - Request Options #
    #############################################
    NetworkIdentifier:
      description: The logical name of the network
      type: string
      example: "{{network}}"
    SborFormatOptions:
      type: object
      description: Requested SBOR formats to include in the response
      properties:
        raw:
          description: Whether to return the raw hex-encoded bytes (default true)
          type: boolean
        programmatic_json:
          description: Whether to return the programmatic json format (default true)
          type: boolean
    TransactionFormatOptions:
      type: object
      description: Requested transaction formats to include in the response
      properties:
        manifest:
          description: Whether to return the raw manifest (default true)
          type: boolean
        blobs:
          description: Whether to return the raw manifest (default false)
          type: boolean
        raw_system_transaction:
          description: Whether to return the raw hex-encoded system transaction bytes (default false)
          type: boolean
        raw_notarized_transaction:
          description: Whether to return the raw hex-encoded notarized transaction bytes (default true)
          type: boolean
        raw_ledger_transaction:
          description: Whether to return the raw hex-encoded ledger transaction bytes (default false)
          type: boolean
    SubstateFormatOptions:
      type: object
      description: Requested substate formats to include in the response
      properties:
        raw:
          description: Whether to return the raw substate value bytes (default false)
          type: boolean
        hash:
          description: Whether to return the raw substate value bytes hash (default false)
          type: boolean
        typed:
          description: Whether to return the typed substate information (default true)
          type: boolean
    ###########################################################
    # GENERAL / SHARED MODELS - General / Numeric / Utilities #
    ###########################################################
    Decimal:
      type: string
      description: |
        A string-encoded fixed-precision decimal to 18 decimal places.
        A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    ##########################################
    # GENERAL / SHARED MODELS - Transactions #
    ##########################################
    TransactionStatus:
      type: string
      enum:
        - Succeeded
        - Failed
        - Rejected
      description: The status of the transaction
    TransactionReceipt:
      type: object
      description: The transaction execution receipt
      required:
        - status
        - state_updates
      properties:
        status:
          $ref: "#/components/schemas/TransactionStatus"
        fee_summary:
          description: Only present if the `status` is not `Rejected`.
          $ref: "#/components/schemas/FeeSummary"
        state_updates:
          $ref: "#/components/schemas/StateUpdates"
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        next_epoch:
          $ref: "#/components/schemas/NextEpoch"
        output:
          type: array
          description: The manifest line-by-line engine return data (only present if `status` is `Succeeded`)
          items:
            $ref: "#/components/schemas/SborData"
        error_message:
          type: string
          description: Error message (only present if status is `Failed` or `Rejected`)
    NotarizedTransaction:
      type: object
      required:
        - hash
        - signed_intent
        - notary_signature
      properties:
        hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hex:
          type: string
          description: The hex-encoded full notarized transaction payload. Returning this can be disabled in TransactionFormatOptions on your request (default true).
        signed_intent:
          $ref: "#/components/schemas/SignedTransactionIntent"
        notary_signature:
          $ref: "#/components/schemas/Signature"
    SignedTransactionIntent:
      type: object
      required:
        - hash
        - intent
        - intent_signatures
      properties:
        hash:
          $ref: "#/components/schemas/SignedIntentHash"
        intent:
          $ref: "#/components/schemas/TransactionIntent"
        intent_signatures:
          type: array
          items:
            $ref: "#/components/schemas/SignatureWithPublicKey"
    TransactionIntent:
      type: object
      required:
        - hash
        - header
      properties:
        hash:
          $ref: "#/components/schemas/IntentHash"
        header:
          $ref: "#/components/schemas/TransactionHeader"
        instructions:
          type: string
          description: The decompiled transaction manifest instructions. Only returned if enabled in TransactionFormatOptions on your request.
        blobs_hex:
          type: object
          description: A map of the hex-encoded blob hash, to hex-encoded blob content. Only returned if enabled in TransactionFormatOptions on your request.
          additionalProperties:
            type: string
            description: The hex-encoded blob content
    TransactionHeader:
      type: object
      required:
        - network_id
        - start_epoch_inclusive
        - end_epoch_exclusive
        - nonce
        - notary_public_key
        - notary_is_signatory
        - tip_percentage
      properties:
        network_id:
          $ref: "#/components/schemas/NetworkIdentifierByte"
        start_epoch_inclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction can be submitted.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        end_epoch_exclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be rejected.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        nonce:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, chosen to allow a unique intent to be created (to enable submitting an otherwise identical/duplicate intent).
        notary_public_key:
          $ref: "#/components/schemas/PublicKey"
        notary_is_signatory:
          type: boolean
          description: Specifies whether the notary public key should be included in the transaction signers list
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
    NetworkIdentifierByte:
      description: The logical id of the network
      type: integer
      format: int32
      minimum: 0
      maximum: 255
    TransactionIdentifiers:
      type: object
      required:
        - intent_hash
        - signed_intent_hash
        - payload_hash
      properties:
        intent_hash:
          $ref: "#/components/schemas/IntentHash"
        signed_intent_hash:
          $ref: "#/components/schemas/SignedIntentHash"
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
    IntentHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded intent hash for a user transaction, also known as the transaction id.
        This hash identifies the core content "intent" of the transaction. Each intent can only be committed once.
        This hash gets signed by any signatories on the transaction, to create the signed intent.
    SignedIntentHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded signed intent hash for a user transaction.
        This hash identifies the transaction intent, plus additional signatures.
        This hash is signed by the notary, to create the submittable NotarizedTransaction.
    NotarizedTransactionHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded notarized transaction hash for a user transaction.
        This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature.
    LedgerPayloadHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded ledger payload transaction hash.
        This is a wrapper for both user transactions, and system transactions such as genesis and round changes.
    ErrorResponseType:
      type: string
      enum:
        - Basic
        - TransactionSubmit
        - LtsTransactionSubmit
    ErrorResponse:
      type: object
      discriminator:
        propertyName: error_type
        mapping:
          # The discriminator values on the left side need to match ErrorResponseType
          # NOTE: To ease
          Basic: "#/components/schemas/BasicErrorResponse"
          TransactionSubmit: "#/components/schemas/TransactionSubmitErrorResponse"
          LtsTransactionSubmit: "#/components/schemas/LtsTransactionSubmitErrorResponse"
      required:
        - error_type
        - code
        - message
      properties:
        error_type:
          $ref: "#/components/schemas/ErrorResponseType"
        code:
          type: integer
          description: A numeric code corresponding to the given HTTP error code.
        message:
          description: A human-readable error message.
          type: string
        trace_id:
          description: A GUID to be used when reporting errors, to allow correlation with the Core API's error logs, in the case where the Core API details are hidden.
          type: string
    BasicErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
    ######################################
    # GENERAL / SHARED MODELS - Receipts #
    ######################################
    FeeSummary:
      description: Fees paid
      type: object
      required:
        - cost_unit_price
        - tip_percentage
        - cost_unit_limit
        - cost_units_consumed
        - cost_unit_execution_breakdown
        - xrd_total_execution_cost
        - xrd_total_royalty_cost
        - xrd_total_tipped
        - xrd_vault_payments
        - xrd_royalty_receivers
      properties:
        cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
        cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution.
        cost_units_consumed:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction execution.
        cost_unit_execution_breakdown:
          type: string
          description: |
            A breakdown of where the execution cost went.
          additionalProperties:
            type: integer
            format: int64
            minimum: 0
            maximum: 4294967295
            description: An integer between `0` and `2^32 - 1`, representing the amount of cost units paid for this aspect of execution
        xrd_total_execution_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD burned in the transaction as part of execution costs.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
        xrd_total_royalty_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD paid in royalties as part of the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
        xrd_total_tipped:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD tipped to validators in the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
        xrd_vault_payments:
          type: array
          description: |
            A breakdown of which vaults were used to pay the fee.
          items:
            $ref: "#/components/schemas/VaultPayment"
        xrd_royalty_receivers:
          type: array
          description: |
            A breakdown of where the royalties were paid to.
          items:
            $ref: "#/components/schemas/RoyaltyPayment"
    VaultPayment:
      type: object
      required:
        - vault_entity
        - xrd_amount
      properties:
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid by this vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    RoyaltyPayment:
      type: object
      required:
        - royalty_receiver
        - xrd_amount
      properties:
        royalty_receiver:
          $ref: "#/components/schemas/EntityReference"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid as royalty to this receiver.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    StateUpdates:
      type: object
      description: Transaction state updates (only present if status is Succeeded or Failed)
      required:
        - created_substates
        - updated_substates
        - deleted_substates
        - new_global_entities
      properties:
        created_substates:
          type: array
          items:
            $ref: "#/components/schemas/CreatedOrUpdatedSubstate"
        updated_substates:
          type: array
          items:
            $ref: "#/components/schemas/CreatedOrUpdatedSubstate"
        deleted_substates:
          type: array
          items:
            $ref: "#/components/schemas/DeletedSubstate"
        new_global_entities:
          type: array
          items:
            $ref: "#/components/schemas/EntityReference"
    NextEpoch:
      type: object
      required:
        - epoch
        - validators
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the new epoch
        validators:
          type: array
          items:
            $ref: '#/components/schemas/ActiveValidator'
          description: Active validator set for the new epoch, ordered by stake descending.
    CreatedOrUpdatedSubstate:
      type: object
      required:
        - substate_id
      properties:
        substate_id:
          $ref: "#/components/schemas/SubstateId"
        substate_hex:
          type: string
          description: The hex-encoded, SBOR-encoded substate data bytes. Only returned if enabled in SubstateFormatOptions on your request (default false).
        substate_data_hash:
          type: string
          description: The hex-encoded Blake2b-256 hash of the substate data bytes. Only returned if enabled in SubstateFormatOptions on your request (default false).
        substate_data:
          $ref: "#/components/schemas/Substate"
          description: The typed substate value. Only returned if enabled in SubstateFormatOptions on your request (default true).
    DeletedSubstate:
      type: object
      required:
        - substate_id
      properties:
        substate_id:
          $ref: "#/components/schemas/SubstateId"
    EntityReference:
      type: object
      required:
        - entity_type
        - is_global
        - entity_address
      properties:
        entity_type:
          $ref: "#/components/schemas/EntityType"
        is_global:
          type: boolean
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
    SubstateId:
      type: object
      required:
        - entity_type
        - entity_address
        - entity_module
        - partition_kind
        - partition_number
        - substate_type
        - substate_key
      properties:
        entity_type:
          $ref: "#/components/schemas/EntityType"
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        entity_module:
          $ref: "#/components/schemas/EntityModule"
        partition_kind:
          $ref: "#/components/schemas/PartitionKind"
        partition_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        substate_type:
          $ref: "#/components/schemas/SubstateType"
        substate_key:
          $ref: "#/components/schemas/SubstateKey"
    EntityModule:
      type: string
      enum:
        - TypeInfo
        - Metadata
        - AccessRules
        - Royalty
        - Main
    PartitionKind:
      type: string
      description: |
        The type of the partition:
        - Field
          - Has key: TupleKey(u8) also known as an offset
          - No iteration exposed to engine
          - Is versioned / locked substate-by-substate
        - KeyValue ("ConcurrentMap")
          - Has key: MapKey(Vec<u8>)
          - No iteration exposed to engine
          - Is versioned / locked substate-by-substate
        - Index
          - Has key: MapKey(Vec<u8>)
          - Iteration exposed to engine via the MapKey's database key (ie hash of the key)
          - Is versioned / locked in its entirety
        - SortedIndex
          - Has key: SortedU16Key(U16, Vec<u8>)
          - Iteration exposed to engine via the user-controlled U16 prefix and then the MapKey's database key (ie hash of the key)
          - Is versioned / locked in its entirety
      enum:
        - Field
        - KeyValue
        - Index
        - SortedIndex
    SubstateKey:
      type: object
      required:
        - key_type
        - db_sort_key_hex
      properties:
        key_type:
          $ref: '#/components/schemas/SubstateKeyType'
        db_sort_key_hex:
          type: string
          description: The hex-encoded bytes of the partially-hashed DB sort key, under the given entity partition
      discriminator:
        propertyName: key_type
        mapping:
          Field: '#/components/schemas/FieldSubstateKey'
          Map: '#/components/schemas/MapSubstateKey'
          Sorted: '#/components/schemas/SortedSubstateKey'
    SubstateKeyType:
      type: string
      enum:
        - Field
        - Map
        - Sorted
    FieldSubstateKey:
      allOf:
        - $ref: "#/components/schemas/SubstateKey"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
    MapSubstateKey:
      allOf:
        - $ref: "#/components/schemas/SubstateKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              description: The hex-encoded bytes of the substate key
    SortedSubstateKey:
      allOf:
        - $ref: "#/components/schemas/SubstateKey"
        - type: object
          required:
            - sort_prefix
            - key_hex
          properties:
            sort_prefix:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              description: The sort part of the substate key
            key_hex:
              type: string
              description: The hex-encoded bytes of the substate key
    ResourceAddress:
      type: string
      description: The Bech32m-encoded human readable version of the resource address
    ComponentAddress:
      type: string
      description: The Bech32m-encoded human readable version of the component address
    PackageAddress:
      type: string
      description: The Bech32m-encoded human readable version of the package address
    GlobalAddress:
      type: string
      description: The Bech32m-encoded human readable version of any global address
    Instant:
      type: object
      required:
        - unix_timestamp_ms
        - date_time
      properties:
        unix_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the unix timestamp in ms.
        date_time:
          type: string
          description: |
            The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use "Z" denoting UTC and include milliseconds.
            EG: `2023-01-26T18:30:09.453Z`.
    InstructionResourceChanges:
      type: object
      required:
        - index
        - resource_changes
      properties:
        index:
          type: integer
        resource_changes:
          type: array
          items:
            $ref: '#/components/schemas/ResourceChange'
    ResourceChange:
      type: object
      required:
        - resource_address
        - component_entity
        - vault_entity
        - amount
      properties:
        resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        component_entity:
          $ref: "#/components/schemas/EntityReference"
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
        amount:
          type: string
          description: |
            The string-encoded decimal representing the XRD amount put or taken from the vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    Event:
      description: Event emitted by a transaction.
      type: object
      required:
        - type
        - data
      properties:
        type:
          $ref: "#/components/schemas/EventTypeIdentifier"
        data:
          $ref: "#/components/schemas/SborData"
    EventTypeIdentifier:
      description: Identifier of a specific event schema.
      type: object
      required:
        - emitter
        - local_type_index
      properties:
        emitter:
          $ref: "#/components/schemas/EventEmitterIdentifier"
        local_type_index:
          $ref: '#/components/schemas/LocalTypeIndex'
          description: The type index of the event's type in the context of the emitter's SBOR schema.
    EventEmitterIdentifierType:
      type: string
      enum:
        - Function
        - Method
    EventEmitterIdentifier:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/EventEmitterIdentifierType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match EventEmitterIdentifierType
          Function: '#/components/schemas/FunctionEventEmitterIdentifier'
          Method: '#/components/schemas/MethodEventEmitterIdentifier'
    FunctionEventEmitterIdentifier:
      allOf:
        - $ref: "#/components/schemas/EventEmitterIdentifier"
        - type: object
          required:
            - entity
            - object_module_id
            - blueprint_name
          properties:
            entity:
              $ref: "#/components/schemas/EntityReference"
            object_module_id:
              $ref: "#/components/schemas/ObjectModuleId"
            blueprint_name:
              type: string
              description: Blueprint name.
    MethodEventEmitterIdentifier:
      allOf:
        - $ref: "#/components/schemas/EventEmitterIdentifier"
        - type: object
          required:
            - entity
            - object_module_id
          properties:
            entity:
              $ref: "#/components/schemas/EntityReference"
            object_module_id:
              $ref: "#/components/schemas/ObjectModuleId"

    #################################################
    # GENERAL / SHARED MODELS - keys and signatures #
    #################################################
    PublicKeyType:
      type: string
      enum:
        - EcdsaSecp256k1
        - EddsaEd25519
    PublicKey:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/PublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/EcdsaSecp256k1PublicKey'
          EddsaEd25519: '#/components/schemas/EddsaEd25519PublicKey'
    EcdsaSecp256k1PublicKey:
      allOf:
        - $ref: "#/components/schemas/PublicKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              minLength: 66
              maxLength: 66
              description: The hex-encoded compressed ECDSA Secp256k1 public key (33 bytes)
    EddsaEd25519PublicKey:
      allOf:
        - $ref: "#/components/schemas/PublicKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              minLength: 64
              maxLength: 64
              description: The hex-encoded compressed EdDSA Ed25519 public key (32 bytes)
    Signature:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/PublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/EcdsaSecp256k1Signature'
          EddsaEd25519: '#/components/schemas/EddsaEd25519Signature'
    EcdsaSecp256k1Signature:
      allOf:
        - $ref: "#/components/schemas/Signature"
        - type: object
          required:
            - signature_hex
          properties:
            signature_hex:
              type: string
              minLength: 130
              maxLength: 130
              description: A hex-encoded recoverable ECDSA Secp256k1 signature (65 bytes). The first byte is the recovery id, the remaining 64 bytes are the compact signature, ie `CONCAT(R, s)` where `R` and `s` are each 32-bytes in padded big-endian format.
    EddsaEd25519Signature:
      allOf:
        - $ref: "#/components/schemas/Signature"
        - type: object
          required:
            - signature_hex
          properties:
            signature_hex:
              type: string
              minLength: 128
              maxLength: 128
              description: A hex-encoded EdDSA Ed25519 signature (64 bytes). This is `CONCAT(R, s)` where `R` and `s` are each 32-bytes in padded big-endian format.
    SignatureWithPublicKey:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/PublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/EcdsaSecp256k1SignatureWithPublicKey'
          EddsaEd25519: '#/components/schemas/EddsaEd25519SignatureWithPublicKey'
    EcdsaSecp256k1SignatureWithPublicKey:
      allOf:
        - $ref: "#/components/schemas/SignatureWithPublicKey"
        - type: object
          required:
            - recoverable_signature
          description: Because ECDSA has recoverable signatures, this only includes a signature
          properties:
            recoverable_signature:
              $ref: '#/components/schemas/EcdsaSecp256k1Signature'
    EddsaEd25519SignatureWithPublicKey:
      allOf:
        - $ref: "#/components/schemas/SignatureWithPublicKey"
        - type: object
          required:
            - public_key
            - signature
          description: The EdDSA public key and signature
          properties:
            public_key:
              $ref: '#/components/schemas/EddsaEd25519PublicKey'
            signature:
              $ref: '#/components/schemas/EddsaEd25519Signature'
    ##########################################
    # GENERAL / SHARED MODELS - Access Rules #
    ##########################################
    NodeAuthorityRules:
      type: object
      required:
        - rules
        - mutability
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/AuthorityRule'
        mutability:
          type: array
          items:
            $ref: '#/components/schemas/AuthorityRule'
    AuthorityRule:
      type: object
      required:
        - key
        - rule
      properties:
        key:
          $ref: '#/components/schemas/AuthorityKey'
        rule:
          $ref: '#/components/schemas/AccessRule'
    AuthorityKey:
      type: object
      required:
        - module
        - name
      properties:
        module:
          type: string
          enum:
            - Object
            - Main
            - Metadata
            - Royalty
            - AccessRules
        name:
          type: string
    AccessRuleType:
      type: string
      enum:
        - Protected
        - AllowAll
        - DenyAll
    AccessRule:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AccessRuleType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AccessRuleType options above
          Protected: '#/components/schemas/ProtectedAccessRule'
          AllowAll: '#/components/schemas/AllowAllAccessRule'
          DenyAll: '#/components/schemas/DenyAllAccessRule'
    ProtectedAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
          required:
            - access_rule
          properties:
            access_rule:
              $ref: '#/components/schemas/AccessRuleNode'
    AllowAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
    DenyAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
    AccessRuleNodeType:
      type: string
      enum:
        - ProofRule
        - AnyOf
        - AllOf
        - Authority
    AccessRuleNode:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AccessRuleNodeType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AccessRuleNodeType options above
          ProofRule: '#/components/schemas/ProofAccessRuleNode'
          AnyOf: '#/components/schemas/AnyOfAccessRuleNode'
          AllOf: '#/components/schemas/AllOfAccessRuleNode'
          Authority: '#/components/schemas/AuthorityRuleNode'
    ProofAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/AccessRuleNode'
        - type: object
          required:
            - proof_rule
          properties:
            proof_rule:
              $ref: '#/components/schemas/ProofRule'
    AnyOfAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/AccessRuleNode'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/AccessRuleNode'
    AllOfAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/AccessRuleNode'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/AccessRuleNode'
    AuthorityRuleNode:
      allOf:
        - $ref: '#/components/schemas/AccessRuleNode'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/AuthorityKey'
    ProofRuleType:
      type: string
      enum:
        - Require
        - AmountOf
        - AllOf
        - AnyOf
        - CountOf
    ProofRule:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ProofRuleType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ProofRuleType options above
          Require: '#/components/schemas/RequireProofRule'
          AmountOf: '#/components/schemas/AmountOfProofRule'
          AllOf: '#/components/schemas/AllOfProofRule'
          AnyOf: '#/components/schemas/AnyOfProofRule'
          CountOf: '#/components/schemas/CountOfProofRule'
    RequireProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - requirement
          properties:
            requirement:
              $ref: '#/components/schemas/Requirement'
    AmountOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - amount
            - resource
          properties:
            amount:
              type: string
            resource:
              $ref: '#/components/schemas/ResourceAddress'
    AllOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    AnyOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    CountOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - count
            - list
          properties:
            count:
              type: integer
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    Requirement:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/RequirementType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match RequirementType options below
          Resource: '#/components/schemas/ResourceRequirement'
          NonFungible: '#/components/schemas/NonFungibleRequirement'
    RequirementType:
      type: string
      enum:
        - Resource
        - NonFungible
    ResourceRequirement:
      allOf:
        - $ref: '#/components/schemas/Requirement'
        - type: object
          required:
            - resource
          properties:
            resource:
              $ref: '#/components/schemas/ResourceAddress'
    NonFungibleRequirement:
      allOf:
        - $ref: '#/components/schemas/Requirement'
        - type: object
          required:
            - non_fungible
          properties:
            non_fungible:
              $ref: '#/components/schemas/NonFungibleGlobalId'
    #######################################
    # GENERAL / SHARED MODELS - Resources #
    #######################################
    ResourceType:
      type: string
      enum:
        - Fungible
        - NonFungible
    NonFungibleIdType:
      type: string
      enum:
        - String
        - Integer
        - Bytes
        - UUID
    NonFungibleLocalId:
      type: object
      required:
        - simple_rep
        - id_type
        - sbor_hex
      properties:
        simple_rep:
          $ref: '#/components/schemas/NonFungibleLocalIdSimpleRepresentation'
        id_type:
          $ref: '#/components/schemas/NonFungibleIdType'
        sbor_hex:
          type: string
          description: The hex-encoded SBOR-encoded bytes of its non-fungible id
    NonFungibleLocalIdSimpleRepresentation:
      type: string
      description: |
        The simple string representation of the non-fungible id.
        For string id types, this is simply the string itself; for integer types, this is the integer as a decimal; and for the bytes id type, this is the lower case hex representation.
        A non-fungible resource has a fixed `NonFungibleIdType`, so this representation uniquely identifies this non-fungible
        under the given resource address.
    NonFungibleGlobalId:
      type: object
      required:
        - resource_address
        - local_id
      properties:
        resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        local_id:
          $ref: "#/components/schemas/NonFungibleLocalId"
    ResourceAmount:
      type: object
      required:
        - resource_type
        - resource_address
      properties:
        resource_type:
          $ref: '#/components/schemas/ResourceType'
        resource_address:
          $ref: '#/components/schemas/ResourceAddress'
      discriminator:
        propertyName: resource_type
        mapping:
          # NOTE: These need to match ResourceType options
          Fungible: '#/components/schemas/FungibleResourceAmount'
          NonFungible: '#/components/schemas/NonFungibleResourceAmount'
    FungibleResourceAmount:
      allOf:
        - $ref: '#/components/schemas/ResourceAmount'
        - type: object
          required:
            - amount
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the amount of this resource (some decimal for fungible resources, a whole integer for non-fungible resources).
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    NonFungibleResourceAmount:
      allOf:
        - $ref: '#/components/schemas/ResourceAmount'
        - type: object
          required:
            - amount
            - non_fungible_ids
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the amount of this resource (some decimal for fungible resources, a whole integer for non-fungible resources).
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
            non_fungible_ids:
              type: array
              items:
                $ref: '#/components/schemas/NonFungibleLocalId'
    ##################################
    # GENERAL / SHARED MODELS - SBOR #
    ##################################
    DataStruct:
      type: object
      required:
        - struct_data
        - owned_entities
        - referenced_entities
      properties:
        struct_data:
          $ref: '#/components/schemas/SborData'
          description: The struct data
        owned_entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        referenced_entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
    SborData:
      description: |
        Various representations of an SBOR payload.
        Some endpoints may allow opting in/out of each representation.
      type: object
      properties:
        hex:
          type: string
          description: The hex-encoded, raw SBOR-encoded data
        programmatic_json:
          description: The (untyped) unannotated programmatic SBOR JSON
    #####################################
    # GENERAL / SHARED MODELS - Royalty #
    #####################################
    BlueprintRoyaltyConfig:
      type: object
      required:
        - blueprint_name
        - royalty_config
      properties:
        blueprint_name:
          type: string
        royalty_config:
          $ref: '#/components/schemas/RoyaltyConfig'
    RoyaltyConfig:
      type: object
      required:
        - method_rules
        - default_rule
      properties:
        method_rules:
          description: The royalty rules by method
          type: array
          items:
            $ref: '#/components/schemas/MethodRoyaltyRule'
        default_rule:
          $ref: '#/components/schemas/RoyaltyRule'
    MethodRoyaltyRule:
      type: object
      required:
        - method_name
        - royalty_rule
      properties:
        method_name:
          type: string
        royalty_rule:
          $ref: '#/components/schemas/RoyaltyRule'
    RoyaltyRule:
      type: integer
      format: int64
      minimum: 0
      maximum: 4294967295
      description: An integer between `0` and `2^32 - 1`, representing the number of cost units required to access this method.
    ########################################
    # GENERAL / SHARED MODELS - validators #
    ########################################
    ActiveValidator:
      type: object
      required:
        - address
        - key
        - stake
      properties:
        address:
          $ref: '#/components/schemas/ComponentAddress'
        key:
          $ref: '#/components/schemas/EcdsaSecp256k1PublicKey'
        stake:
          type: string
          description: |
            A string-encoded decimal representing the validator's voting power for this epoch.
            This is a snapshot of the amount of XRD staked to the validator at the start of the epoch.
    #####################################
    # GENERAL / SHARED MODELS - schemas #
    #####################################
    ScryptoSchema:
      type: object
      required:
        - sbor_data
      properties:
        sbor_data:
          $ref: '#/components/schemas/SborData'
    InstanceSchema:
      type: object
      required:
        - schema
        - provided_types
      properties:
        schema:
          $ref: '#/components/schemas/ScryptoSchema'
        provided_types:
          type: array
          description: Type indices against the provided schema. These fill holes in the instance's blueprint's partition schemas.
          items:
            $ref: '#/components/schemas/LocalTypeIndex'
    KeyValueStoreSchema:
      type: object
      required:
        - key_type
        - value_type
        - can_own
      properties:
        key_type:
          $ref: '#/components/schemas/LocalTypeIndex'
          description: |
            The type index of the key type in the context of this SBOR schema.
        value_type:
          $ref: '#/components/schemas/LocalTypeIndex'
          description: |
            The type index of the key type in the context of this SBOR schema.
        can_own:
          description: Whether the key value store can own any children.
          type: boolean
    PackageSchema:
      type: object
      required:
        - blueprint_schemas
      properties:
        blueprint_schemas:
          type: object
          description: A map from the blueprint name to BlueprintSchema
          additionalProperties:
            $ref: '#/components/schemas/BlueprintSchema'
    BlueprintSchema:
      type: object
      required:
        - schema
        - function_schemas
        - virtual_lazy_load_function_schemas
        - event_schemas
        - collection_partitions
      properties:
        outer_blueprint:
          type: string
        schema:
          $ref: '#/components/schemas/ScryptoSchema'
          description: The SBOR schema of the blueprint
        function_schemas:
          type: object
          description: A map from the function name to the FunctionSchema
          additionalProperties:
            $ref: '#/components/schemas/FunctionSchema'
        virtual_lazy_load_function_schemas:
          type: object
          description: A map from the system function ID to the VirtualLazyLoadSchema
          additionalProperties:
            $ref: '#/components/schemas/VirtualLazyLoadSchema'
        event_schemas:
          type: object
          description: A map from the event name to the local type index for the event payload under the blueprint schema.
          additionalProperties:
            $ref: '#/components/schemas/LocalTypeIndex'
        field_partition:
          $ref: '#/components/schemas/BlueprintSchemaFieldPartition'
        collection_partitions:
          type: array
          description: The collection partitions for this blueprint.
          items:
            $ref: '#/components/schemas/BlueprintSchemaCollectionPartition'
    BlueprintSchemaFieldPartition:
      type: object
      description: The fields partition of the blueprint.
      required:
        - partition_offset
        - fields
      properties:
        partition_offset:
          description: The partition's offset from the Main module base (64)
          type: integer
          format: i32
          minimum: 0
          maximum: 191
        fields:
          type: array
          description: The field substates for this blueprint.
          items:
            $ref: '#/components/schemas/LocalTypeIndex'
    BlueprintSchemaCollectionPartition:
      type: object
      description: The fields partition of the blueprint.
      required:
        - partition_offset
        - collection_schema
      properties:
        partition_offset:
          description: The partition's offset from the Main module base (64)
          type: integer
          format: i32
          minimum: 0
          maximum: 191
        collection_schema:
          $ref: '#/components/schemas/BlueprintCollectionSchema'
    BlueprintCollectionSchema:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/BlueprintCollectionSchemaType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PublicKeyType
          KeyValue: '#/components/schemas/KeyValueBlueprintCollectionSchema'
          Index: '#/components/schemas/IndexBlueprintCollectionSchema'
          SortedIndex: '#/components/schemas/SortedIndexBlueprintCollectionSchema'
    BlueprintCollectionSchemaType:
      type: string
      enum:
        - KeyValue
        - Index
        - SortedIndex
    KeyValueBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/BlueprintCollectionSchema"
        - type: object
          required:
            - key_type_reference
            - value_type_reference
            - can_own
          properties:
            key_type_reference:
              $ref: "#/components/schemas/BlueprintTypeReference"
            value_type_reference:
              $ref: "#/components/schemas/BlueprintTypeReference"
            can_own:
              type: boolean
              description: Whether the entries of the key-value store are allowed to own child nodes.
    IndexBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/BlueprintCollectionSchema"
        - type: object
    SortedIndexBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/BlueprintCollectionSchema"
        - type: object
    BlueprintTypeReference:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/BlueprintTypeReferenceKind"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PublicKeyType
          BlueprintSchema: '#/components/schemas/BlueprintSchemaBlueprintTypeReference'
          InstanceSchema: '#/components/schemas/InstanceSchemaBlueprintTypeReference'
    BlueprintTypeReferenceKind:
      type: string
      enum:
        - BlueprintSchema
        - InstanceSchema
    BlueprintSchemaBlueprintTypeReference:
      allOf:
        - $ref: "#/components/schemas/BlueprintTypeReference"
        - type: object
          required:
            - local_type_index
          properties:
            local_type_index:
              $ref: "#/components/schemas/LocalTypeIndex"
    InstanceSchemaBlueprintTypeReference:
      allOf:
        - $ref: "#/components/schemas/BlueprintTypeReference"
        - type: object
          required:
            - instance_provided_type_index
          properties:
            instance_provided_type_index:
              type: integer
              format: i32
              minimum: 0
              maximum: 255
              description: Provided by an instance's schema at the given index in its provided types array.
    LocalTypeIndex:
      type: object
      required:
        - kind
        - index
        - as_sbor
      properties:
        kind:
          type: string
          description: |
            The location against which to resolve this type reference against a given schema.
            WellKnown indicates the index is a pointer to a well known scrypto type with that id.
            SchemaLocal indicates the index is a pointer into the given schema.
          enum:
            - WellKnown
            - SchemaLocal
        index:
          description: |
            Either the well known identifier, of the schema-local index, depending on the kind.
          type: integer
          format: int32
        as_sbor:
          $ref: '#/components/schemas/SborData'
          description: |
            The SBOR encoding of the LocalTypeIndex.
            This is useful for passing to the Radix Engine toolkit along with a schema.
    VirtualLazyLoadSchema:
      type: object
      required:
        - export_name
      properties:
        export_name:
          type: string
    FunctionSchema:
      type: object
      required:
        - input
        - output
        - export_name
      properties:
        receiver_info:
          $ref: '#/components/schemas/ReceiverInfo'
        input:
          $ref: '#/components/schemas/LocalTypeIndex'
          description: |
            The type index of the function's parameter struct in the context of the blueprint's SBOR schema.
        output:
          $ref: '#/components/schemas/LocalTypeIndex'
          description: |
            The type index of the function output in the context of the blueprint's SBOR schema.
        export_name:
          type: string
    ReceiverInfo:
      type: object
      required:
        - receiver
        - reference_type
      properties:
        receiver:
          type: string
          enum:
            - SelfRef
            - SelfRefMut
        reference_type:
          $ref: '#/components/schemas/ReferenceType'
    ReferenceType:
      type: object
      required:
        - raw_bits
        - normal
        - direct_access
      properties:
        raw_bits:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
        normal:
          type: boolean
        direct_access:
          type: boolean
    #######################################
    # GENERAL / SHARED MODELS - substates #
    #######################################
    EntityType:
      type: string
      enum:
        - GlobalPackage
        - GlobalConsensusManager
        - GlobalValidator
        - GlobalGenericComponent
        - GlobalAccount
        - GlobalIdentity
        - GlobalAccessController
        - GlobalVirtualSecp256k1Account
        - GlobalVirtualSecp256k1Identity
        - GlobalVirtualEd25519Account
        - GlobalVirtualEd25519Identity
        - GlobalFungibleResource
        - InternalFungibleVault
        - GlobalNonFungibleResource
        - InternalNonFungibleVault
        - InternalGenericComponent
        - InternalAccount
        - InternalKeyValueStore
    EntityAddress:
      type: string
      description: Bech32m-encoded human readable version of the entity's address (ie the entity's node id)
    ObjectModuleId:
      type: string
      enum:
        - Main
        - Metadata
        - Royalty
        - AccessRules
    Substate:
      type: object
      required:
        - substate_type
      properties:
        substate_type:
          $ref: '#/components/schemas/SubstateType'
      discriminator:
        propertyName: substate_type
        mapping:
          TypeInfoModuleFieldTypeInfo: '#/components/schemas/TypeInfoModuleFieldTypeInfoSubstate'
          AccessRulesModuleFieldAccessRules: '#/components/schemas/AccessRulesModuleFieldAccessRulesSubstate'
          RoyaltyModuleFieldConfig: '#/components/schemas/RoyaltyModuleFieldConfigSubstate'
          RoyaltyModuleFieldAccumulator: '#/components/schemas/RoyaltyModuleFieldAccumulatorSubstate'
          MetadataModuleEntry: '#/components/schemas/MetadataModuleEntrySubstate'
          PackageFieldInfo: '#/components/schemas/PackageFieldInfoSubstate'
          PackageFieldCodeType: '#/components/schemas/PackageFieldCodeTypeSubstate'
          PackageFieldCode: '#/components/schemas/PackageFieldCodeSubstate'
          PackageFieldRoyalty: '#/components/schemas/PackageFieldRoyaltySubstate'
          PackageFieldFunctionAccessRules: '#/components/schemas/PackageFieldFunctionAccessRulesSubstate'
          FungibleResourceManagerFieldDivisibility: '#/components/schemas/FungibleResourceManagerFieldDivisibilitySubstate'
          FungibleResourceManagerFieldTotalSupply: '#/components/schemas/FungibleResourceManagerFieldTotalSupplySubstate'
          NonFungibleResourceManagerFieldIdType: '#/components/schemas/NonFungibleResourceManagerFieldIdTypeSubstate'
          NonFungibleResourceManagerFieldTotalSupply: '#/components/schemas/NonFungibleResourceManagerFieldTotalSupplySubstate'
          NonFungibleResourceManagerFieldMutableFields: '#/components/schemas/NonFungibleResourceManagerFieldMutableFieldsSubstate'
          NonFungibleResourceManagerDataEntry: '#/components/schemas/NonFungibleResourceManagerDataEntrySubstate'
          FungibleVaultFieldBalance: '#/components/schemas/FungibleVaultFieldBalanceSubstate'
          NonFungibleVaultFieldBalance: '#/components/schemas/NonFungibleVaultFieldBalanceSubstate'
          NonFungibleVaultContentsIndexEntry: '#/components/schemas/NonFungibleVaultContentsIndexEntrySubstate'
          ConsensusManagerFieldConfig: '#/components/schemas/ConsensusManagerFieldConfigSubstate'
          ConsensusManagerFieldState: '#/components/schemas/ConsensusManagerFieldStateSubstate'
          ConsensusManagerFieldCurrentValidatorSet: '#/components/schemas/ConsensusManagerFieldCurrentValidatorSetSubstate'
          ConsensusManagerFieldCurrentProposalStatistic: '#/components/schemas/ConsensusManagerFieldCurrentProposalStatisticSubstate'
          ConsensusManagerFieldCurrentTimeRoundedToMinutes: '#/components/schemas/ConsensusManagerCurrentTimeRoundedToMinutesSubstate'
          ConsensusManagerFieldCurrentTime: '#/components/schemas/ConsensusManagerCurrentTimeSubstate'
          ConsensusManagerRegisteredValidatorsByStakeIndexEntry: '#/components/schemas/ConsensusManagerRegisteredValidatorsByStakeIndexEntrySubstate'
          ValidatorFieldState: '#/components/schemas/ValidatorFieldStateSubstate'
          AccountFieldState: '#/components/schemas/AccountFieldStateSubstate'
          AccountVaultIndexEntry: '#/components/schemas/AccountVaultIndexEntrySubstate'
          AccountDepositRuleIndexEntry: '#/components/schemas/AccountDepositRuleIndexEntrySubstate'
          AccessControllerFieldState: '#/components/schemas/AccessControllerFieldStateSubstate'
          GenericScryptoComponentFieldState: '#/components/schemas/GenericScryptoComponentFieldStateSubstate'
          GenericKeyValueStoreEntry: '#/components/schemas/GenericKeyValueStoreEntrySubstate'
    SubstateType:
      type: string
      enum:
        - TypeInfoModuleFieldTypeInfo
        - AccessRulesModuleFieldAccessRules
        - RoyaltyModuleFieldConfig
        - RoyaltyModuleFieldAccumulator
        - MetadataModuleEntry
        - PackageFieldInfo
        - PackageFieldCodeType
        - PackageFieldCode
        - PackageFieldRoyalty
        - PackageFieldFunctionAccessRules
        - FungibleResourceManagerFieldDivisibility
        - FungibleResourceManagerFieldTotalSupply
        - NonFungibleResourceManagerFieldIdType
        - NonFungibleResourceManagerFieldTotalSupply
        - NonFungibleResourceManagerFieldMutableFields
        - NonFungibleResourceManagerDataEntry
        - FungibleVaultFieldBalance
        - NonFungibleVaultFieldBalance
        - NonFungibleVaultContentsIndexEntry
        - ConsensusManagerFieldConfig
        - ConsensusManagerFieldState
        - ConsensusManagerFieldCurrentValidatorSet
        - ConsensusManagerFieldCurrentProposalStatistic
        - ConsensusManagerFieldCurrentTimeRoundedToMinutes
        - ConsensusManagerFieldCurrentTime
        - ConsensusManagerRegisteredValidatorsByStakeIndexEntry
        - ValidatorFieldState
        - AccountFieldState
        - AccountVaultIndexEntry
        - AccountDepositRuleIndexEntry
        - AccessControllerFieldState
        - GenericScryptoComponentFieldState
        - GenericKeyValueStoreEntry
    ### SUBSTATES
    TypeInfoModuleFieldTypeInfoSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - details
          properties:
            details:
              $ref: '#/components/schemas/TypeInfoDetails'
    TypeInfoType:
      type: string
      enum:
        - Object
        - KeyValueStore
    TypeInfoDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/TypeInfoType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TypeInfoType options above
          Object: '#/components/schemas/ObjectTypeInfoDetails'
          KeyValueStore: '#/components/schemas/KeyValueStoreTypeInfoDetails'
    ObjectTypeInfoDetails:
      allOf:
        - $ref: '#/components/schemas/TypeInfoDetails'
        - type: object
          required:
            - package_address
            - blueprint_name
            - global
          properties:
            package_address:
              $ref: '#/components/schemas/PackageAddress'
            blueprint_name:
              type: string
            global:
              type: boolean
            outer_object:
              $ref: '#/components/schemas/GlobalAddress'
            instance_schema:
              $ref: '#/components/schemas/InstanceSchema'
    KeyValueStoreTypeInfoDetails:
      allOf:
        - $ref: '#/components/schemas/TypeInfoDetails'
        - type: object
          required:
            - key_value_store_info
          properties:
            key_value_store_info:
              description: The SBOR schema of the KeyValueStore
              $ref: '#/components/schemas/KeyValueStoreInfo'
    KeyValueStoreInfo:
      type: object
      required:
        - schema
        - kv_store_schema
      properties:
        schema:
          $ref: '#/components/schemas/ScryptoSchema'
          description: The SBOR schema of the key value store.
        kv_store_schema:
          $ref: '#/components/schemas/KeyValueStoreSchema'
    AccessRulesModuleFieldAccessRulesSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - access_rules
            - inner_blueprint_access_rules
          properties:
            access_rules:
              $ref: '#/components/schemas/NodeAuthorityRules'
            inner_blueprint_access_rules:
              type: array
              items:
                $ref: '#/components/schemas/BlueprintAccessRules'
    BlueprintAccessRules:
      type: object
      required:
        - blueprint_name
        - access_rules
      properties:
        blueprint_name:
          type: string
        access_rules:
          $ref: '#/components/schemas/NodeAuthorityRules'
    RoyaltyModuleFieldConfigSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - royalty_config
          properties:
            royalty_config:
              $ref: '#/components/schemas/RoyaltyConfig'
    RoyaltyModuleFieldAccumulatorSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          properties:
            vault_entity:
              $ref: "#/components/schemas/EntityReference"
    MetadataModuleEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - field_name
            - is_deleted
          properties:
            field_name:
              type: string
            is_deleted:
              type: boolean
            data_struct:
              $ref: '#/components/schemas/DataStruct'
    PackageFieldInfoSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - package_schema
            - dependent_resources
            - dependent_components
          properties:
            package_schema:
              $ref: '#/components/schemas/PackageSchema'
            dependent_resources:
              type: array
              items:
                $ref: '#/components/schemas/ResourceAddress'
            dependent_components:
              type: array
              items:
                $ref: '#/components/schemas/ComponentAddress'
    PackageFieldCodeTypeSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - code_type
          properties:
            code_type:
              $ref: '#/components/schemas/PackageCodeType'
    PackageCodeType:
      type: string
      enum:
        - Native
        - Wasm
    PackageFieldCodeSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - code_hex
          properties:
            code_hex:
              type: string
              description: The hex-encoded package code
    PackageFieldRoyaltySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - blueprint_royalties
          properties:
            vault_entity:
              # This is optional - some early packages during bootstrapping don't have this
              $ref: "#/components/schemas/EntityReference"
            blueprint_royalties:
              type: array
              items:
                $ref: '#/components/schemas/BlueprintRoyaltyConfig'
    PackageFieldFunctionAccessRulesSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - function_auth
            - default_auth
          properties:
            function_auth:
              items:
                $ref: '#/components/schemas/PackageFunctionAccessRule'
            default_auth:
              $ref: '#/components/schemas/AccessRule'
    PackageFunctionAccessRule:
      type: object
      required:
        - blueprint
        - function_name
        - access_rule
      properties:
        blueprint:
          type: string
        function_name:
          type: string
        access_rule:
          $ref: '#/components/schemas/AccessRule'
    FungibleResourceManagerFieldDivisibilitySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - divisibility
          properties:
            divisibility:
              type: integer
              minimum: 0
              maximum: 18
    FungibleResourceManagerFieldTotalSupplySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - total_supply
          properties:
            total_supply:
              type: string
              description: |
                The string-encoded decimal representing the total supply of this resource.
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    NonFungibleResourceManagerFieldIdTypeSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - non_fungible_id_type
          properties:
            non_fungible_id_type:
              $ref: '#/components/schemas/NonFungibleIdType'
    NonFungibleResourceManagerFieldTotalSupplySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - total_supply
          properties:
            total_supply:
              type: string
              description: |
                The string-encoded decimal representing the total supply of this resource.
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    NonFungibleResourceManagerFieldMutableFieldsSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - mutable_fields
          properties:
            mutable_fields:
              type: array
              description: |
                The field names of the NF Metadata which are mutable.
              items:
                type: string
    NonFungibleResourceManagerDataEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - is_deleted
          properties:
            is_deleted:
              type: boolean
            data_struct:
              $ref: '#/components/schemas/DataStruct'
    FungibleVaultFieldBalanceSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - amount
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the token amount in the vault.
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    NonFungibleVaultFieldBalanceSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - amount
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the token amount in the vault.
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    NonFungibleVaultContentsIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - non_fungible_local_id
          properties:
            non_fungible_local_id:
              description: The NonFungibleLocalId in the vault.
              $ref: '#/components/schemas/NonFungibleLocalId'
    ConsensusManagerFieldConfigSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - max_validators
            - epoch_change_condition
            - num_unstake_epochs
            - total_emission_xrd_per_epoch
            - min_validator_reliability
            - num_owner_stake_units_unlock_epochs
            - num_fee_increase_delay_epochs
          properties:
            max_validators:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, specifying the maximum number of validators
                in the active validator set.
            epoch_change_condition:
              $ref: '#/components/schemas/EpochChangeCondition'
            num_unstake_epochs:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, specifying the minimum number of epochs
                before an unstaker can withdraw their XRD.
            total_emission_xrd_per_epoch:
              $ref: '#/components/schemas/Decimal'
            min_validator_reliability:
              description: |
                A proportion (between 0 and 1) which a validator needs to exceed to get emissions in an epoch.
              $ref: '#/components/schemas/Decimal'
            num_owner_stake_units_unlock_epochs:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, specifying the minimum number of epochs
                before an owner can take their stake units after attempting to withdraw them.
            num_fee_increase_delay_epochs:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, specifying the minimum number of epochs
                before a fee increase takes effect.
    EpochChangeCondition:
      type: object
      required:
        - min_round_count
        - max_round_count
        - target_duration_millis
      properties:
        min_round_count:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, specifying the minimum number of rounds per epoch
        max_round_count:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, specifying the maximum number of rounds per epoch
        target_duration_millis:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the target number of milliseconds per epoch,
            assuming the round number is within the min and max range.
    ConsensusManagerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - epoch
            - epoch_start
            - round
          properties:
            epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: An integer between `0` and `10^10`, marking the current epoch
            round:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: An integer between `0` and `10^10`, marking the current round in an epoch
            epoch_start:
              $ref: '#/components/schemas/Instant'
    ConsensusManagerFieldCurrentProposalStatisticSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - completed
            - missed
          properties:
            completed:
              type: array
              description: The number of successfully completed proposals this epoch for each validator, indexed by the validator order in the active set.
              items:
                type: integer
                format: int64
                minimum: 0
                maximum: 10000000000
            missed:
              type: array
              description: The number of missed proposals this epoch for each validator, indexed by the validator order in the active set.
              items:
                type: integer
                format: int64
                minimum: 0
                maximum: 10000000000
    ConsensusManagerFieldCurrentValidatorSetSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - validator_set
          properties:
            validator_set:
              type: array
              items:
                $ref: '#/components/schemas/ActiveValidator'
    ConsensusManagerRegisteredValidatorsByStakeIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - active_validator
          properties:
            active_validator:
              $ref: "#/components/schemas/ActiveValidator"
    ConsensusManagerCurrentTimeRoundedToMinutesSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - proposer_timestamp_rounded_down_to_minute
          properties:
            proposer_timestamp_rounded_down_to_minute:
              $ref: '#/components/schemas/Instant'
              description: |
                The latest round proposer's timestamp (rounded down to the current minute).
                An honest quorum of validators keeps this aligned with wall-clock time, and non-decreasing.
    ConsensusManagerCurrentTimeSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - proposer_timestamp
          properties:
            proposer_timestamp:
              $ref: '#/components/schemas/Instant'
              description: |
                The latest round proposer's timestamp.
                An honest quorum of validators keeps this aligned with wall-clock time, and non-decreasing.
    ValidatorFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - public_key
            - is_registered
            - validator_fee_factor
            - stake_unit_resource_address
            - stake_xrd_vault
            - unstake_claim_token_resource_address
            - pending_xrd_withdraw_vault
            - locked_owner_stake_unit_vault
            - pending_owner_stake_unit_unlock_vault
            - pending_owner_stake_unit_withdrawals
            - already_unlocked_owner_stake_unit_amount
          properties:
            sorted_key:
              $ref: '#/components/schemas/SubstateKey'
            public_key:
              $ref: '#/components/schemas/EcdsaSecp256k1PublicKey'
            is_registered:
              type: boolean
            validator_fee_factor:
              description: The proportion of the emission that the validator owner keeps.
              $ref: '#/components/schemas/Decimal'
            validator_fee_change_request:
              $ref: '#/components/schemas/ValidatorFeeChangeRequest'
            stake_unit_resource_address:
              $ref: '#/components/schemas/ResourceAddress'
            stake_xrd_vault:
              $ref: '#/components/schemas/EntityReference'
            unstake_claim_token_resource_address:
              $ref: '#/components/schemas/ResourceAddress'
            pending_xrd_withdraw_vault:
              $ref: '#/components/schemas/EntityReference'
            locked_owner_stake_unit_vault:
              $ref: '#/components/schemas/EntityReference'
            pending_owner_stake_unit_unlock_vault:
              $ref: '#/components/schemas/EntityReference'
            pending_owner_stake_unit_withdrawals:
              type: array
              items:
                $ref: '#/components/schemas/PendingOwnerStakeWithdrawal'
            already_unlocked_owner_stake_unit_amount:
              $ref: '#/components/schemas/Decimal'
    ValidatorFeeChangeRequest:
      type: object
      required:
        - epoch_effective
        - new_fee_factor
      properties:
        epoch_effective:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch at which the fee change becomes effective.
        new_fee_factor:
          $ref: '#/components/schemas/Decimal'
    PendingOwnerStakeWithdrawal:
      type: object
      required:
        - epoch_unlocked
        - stake_unit_amount
      properties:
        epoch_unlocked:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch when the stake units are unlocked for withdrawal.
        stake_unit_amount:
          $ref: '#/components/schemas/Decimal'
    AccountFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - default_deposit_rule
          properties:
            default_deposit_rule:
              $ref: '#/components/schemas/DefaultDepositRule'
    DefaultDepositRule:
      type: string
      description: |
        This setting has the following interpretations:
        - Allow: Allows the deposit of all resources - the deny list is honored in this state.
        - Reject: Disallows the deposit of all resources - the allow list is honored in this state.
        - AllowExisting: Only deposits of existing resources is accepted - both allow and deny lists are honored in this mode.
      enum:
        - Accept
        - Reject
        - AllowExisting
    AccountVaultIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - resource_address
          properties:
            resource_address:
              $ref: '#/components/schemas/ResourceAddress'
            vault:
              $ref: '#/components/schemas/EntityAddress'
    AccountDepositRuleIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - resource_address
          properties:
            resource_address:
              $ref: '#/components/schemas/ResourceAddress'
            deposit_rule:
              $ref: '#/components/schemas/DepositRule'
    DepositRule:
      type: string
      enum:
        - Neither
        - Allowed
        - Disallowed
    AccessControllerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - data_struct
          properties:
            data_struct:
              $ref: '#/components/schemas/DataStruct'
    GenericScryptoComponentFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - data_struct
          properties:
            data_struct:
              $ref: '#/components/schemas/DataStruct'
    GenericKeyValueStoreEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - is_deleted
          properties:
            is_deleted:
              type: boolean
            data_struct:
              $ref: '#/components/schemas/DataStruct'
    ##########################################
    # REQUEST: /lts/transaction/construction #
    ##########################################
    LtsTransactionConstructionRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    LtsTransactionConstructionResponse:
      type: object
      required:
        - current_epoch
        - ledger_clock
      properties:
        current_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current epoch
        ledger_clock:
          $ref: '#/components/schemas/Instant'
          description: |
            The latest round proposer's timestamp (rounded down to the current minute).
            This is provided so that the client can detect if the node is synced up or not.
    ####################################
    # REQUEST: /lts/transaction/status #
    ####################################
    LtsTransactionStatusRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/IntentHash"
    LtsTransactionStatusResponse:
      type: object
      required:
        - intent_status
        - status_description
        - known_payloads
      properties:
        intent_status:
          $ref: "#/components/schemas/LtsTransactionIntentStatus"
        status_description:
          type: string
          description: |
            An explanation as to why the intent status is resolved as it is.
        committed_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: |
            An integer between `1` and `10^13`, giving the resultant state version when the transaction was committed.
            This is only present if the intent was committed (as a Success or Failure).
            This can be considered to be the auto-incrementing primary key for a committed tranasction, and can be used in (eg) to look up
            details on the transaction's outcome from the `/lts/stream/transaction-outcomes` endpoint.
        invalid_from_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
            Only present if the intent status is InMempool or Unknown and we know about a payload.
        known_payloads:
          type: array
          items:
            $ref: "#/components/schemas/LtsTransactionPayloadDetails"
    LtsTransactionPayloadDetails:
      type: object
      required:
        - payload_hash
        - status
      properties:
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        status:
          $ref: "#/components/schemas/LtsTransactionPayloadStatus"
        error_message:
          description: An explanation for the error, if failed or rejected
          type: string
    LtsTransactionIntentStatus:
      type: string
      description: |
        The status of the transaction intent, as determined by the node.
        FateUncertain or FateUncertainButLikelyRejection mean that it's still possible that a payload containing the transaction
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentRejection
        - InMempool
        - NotSeen
        - FateUncertain
        - FateUncertainButLikelyRejection
    LtsTransactionPayloadStatus:
      type: string
      description: |
        The status of the transaction payload, as per this node.
        A NotInMempool status means that it wasn't rejected at last execution attempt, but it's not currently in the mempool either.
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentlyRejected
        - TransientlyRejected
        - InMempool
        - NotInMempool
    ####################################
    # REQUEST: /lts/transaction/submit #
    ####################################
    LtsTransactionSubmitRequest:
      type: object
      required:
        - network
        - notarized_transaction_hex
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        notarized_transaction_hex:
          description: A hex-encoded, compiled notarized transaction.
          type: string
        force_recalculate:
          description: If true, the transaction validity is freshly recalculated without using any caches (defaults false)
          type: boolean
    LtsTransactionSubmitResponse:
      type: object
      required:
        - duplicate
      properties:
        duplicate:
          description: Is true if the transaction is a duplicate of an existing transaction in the mempool.
          type: boolean
    LtsTransactionSubmitErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/LtsTransactionSubmitErrorDetails"
    LtsTransactionSubmitErrorDetailsType:
      type: string
      enum:
        - MempoolFull
        - Rejected
    LtsTransactionSubmitErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/LtsTransactionSubmitErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LtsTransactionSubmitErrorDetailsType
          MempoolFull: "#/components/schemas/LtsTransactionSubmitMempoolFullErrorDetails"
          Rejected: "#/components/schemas/LtsTransactionSubmitRejectedErrorDetails"
    LtsTransactionSubmitMempoolFullErrorDetails:
      allOf:
        - $ref: "#/components/schemas/LtsTransactionSubmitErrorDetails"
        - type: object
          required:
            - mempool_capacity
          properties:
            mempool_capacity:
              type: integer
              format: int32
              minimum: 0
              maximum: 10000
    LtsTransactionSubmitRejectedErrorDetails:
      allOf:
        - $ref: "#/components/schemas/LtsTransactionSubmitErrorDetails"
        - type: object
          required:
            - error_message
            - is_fresh
            - is_payload_rejection_permanent
            - is_intent_rejection_permanent
            - is_rejected_because_intent_already_committed
          properties:
            error_message:
              type: string
              description: An explanation of the error
            is_fresh:
              type: boolean
              description: |
                Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending
                transaction result cache.
            is_payload_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this payload is known to be permanent.
            is_intent_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection
                being permanent, as it implies any payloads containing the intent will also be permanently rejected.
            is_rejected_because_intent_already_committed:
              type: boolean
              description: |
                Whether the cached rejection of this intent is due to the intent already having been committed.
                If so, see the /transaction/receipt endpoint for further information.
            retry_from_timestamp:
              $ref: "#/components/schemas/Instant"
              description: |
                The time after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary, and not due to the header specifying a "from epoch" in the future.
            retry_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
            invalid_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
                Only present if the rejection isn't permanent.
    ##############################################################
    # REQUEST: /lts/state/account-all-fungible-resource-balances #
    ##############################################################
    LtsStateAccountAllFungibleResourceBalancesRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
    LtsStateAccountAllFungibleResourceBalancesResponse:
      type: object
      required:
        - state_version
        - account_address
        - fungible_resource_balances
      properties:
        state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: |
            An integer between `1` and `10^13`, giving the state version at which the query was performed.
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        fungible_resource_balances:
          description: A list containing all resource balances for the requested account.
          type: array
          items:
            $ref: "#/components/schemas/LtsFungibleResourceBalance"
    LtsFungibleResourceBalance:
      type: object
      required:
        - fungible_resource_address
        - amount
      properties:
        fungible_resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    #########################################################
    # REQUEST: /lts/state/account-fungible-resource-balance #
    #########################################################
    LtsStateAccountFungibleResourceBalanceRequest:
      type: object
      required:
        - network
        - account_address
        - resource_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        resource_address:
          $ref: "#/components/schemas/ResourceAddress"
    LtsStateAccountFungibleResourceBalanceResponse:
      type: object
      required:
        - state_version
        - account_address
        - fungible_resource_balance
      properties:
        state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: |
            An integer between `1` and `10^13`, giving the state version at which the query was performed.
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        fungible_resource_balance:
          $ref: "#/components/schemas/LtsFungibleResourceBalance"
    #############################################
    # REQUEST: /lts/stream/transaction-outcomes #
    #############################################
    LtsStreamTransactionOutcomesRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        from_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: An integer between `1` and `10^13`, giving the first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
    LtsStreamTransactionOutcomesResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - committed_transaction_outcomes
      properties:
        from_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: |
            An integer between `1` and `10^13`, giving the first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: An integer between `1` and `10^13`, giving the maximum state version currently committed on this node's ledger.
        committed_transaction_outcomes:
          description: A committed transaction outcomes list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/LtsCommittedTransactionOutcome"
    LtsCommittedTransactionStatus:
      type: string
      # These should align with LtsTransactionIntentStatus / LtsTransactionPayloadStatus
      enum:
        - Success
        - Failure
      description: The status of the transaction
    LtsCommittedTransactionOutcome:
      description: |
        For the given transaction, contains the status, total fee summary and individual entity resource balance changes.
        The balance changes accounts for the fee payments as well.
        Current implementation does not take into account recalls, but this will change in a future update.
        For failed transactions, current implementation does not return any balance changes (not even the fee payments).
        This will also change in a future update.
      type: object
      required:
        - state_version
        - accumulator_hash
        - status
        - fungible_entity_balance_changes
        - resultant_account_fungible_balances
        - total_fee
      properties:
        state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: An integer between `1` and `10^13`, giving the resultant state version after the transaction has been committed
        accumulator_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded transaction accumulator hash. This hash captures the order of all transactions on ledger.
            This hash is `ACC_{N+1} = Blake2b-256(CONCAT(ACC_N, LEDGER_HASH_{N}))`, starting with `ACC_0 = 000..000` the pre-genesis accumulator.
        user_transaction_identifiers:
          description: Only present if the transaction is a user-submitted notarized transaction.
          $ref: "#/components/schemas/TransactionIdentifiers"
        status:
          $ref: "#/components/schemas/LtsCommittedTransactionStatus"
        fungible_entity_balance_changes:
          description: |
            THE FEE ASSIGNMENT IS NOT CURRENTLY FULLY ACCURATE FOR SOME TRANSACTIONS. THIS WILL BE FIXED AT RCNET-V2.
            A list of all fungible balance updates which occurred in this transaction, aggregated by the global entity (such as account)
            which owns the vaults which were updated.
          type: array
          items:
            $ref: "#/components/schemas/LtsEntityFungibleBalanceChanges"
        resultant_account_fungible_balances:
          description: |
            THIS CURRENTLY RETURNS AN EMPTY LIST. THIS FEATURE WILL BE COMING AT RCNET-V2.
            A list of the resultant balances of any account balances changed in this transaction.
            Only balances for accounts are returned, not any other kind of entity.
          type: array
          items:
            $ref: "#/components/schemas/LtsResultantAccountFungibleBalances"
        total_fee:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD payed as fee (execution, validator tip and royalties).
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    LtsEntityFungibleBalanceChanges:
      type: object
      required:
        - entity_address
        - non_fee_balance_changes
      properties:
        entity_address:
          type: string
          description: The Bech32m-encoded human readable version of the entity's address
        fee_balance_change:
          $ref: "#/components/schemas/LtsFungibleResourceBalanceChange"
          description: |
            If present, this field indicates the entity contributed to the payment of the fee.
            The change in balance will always be negative.
        non_fee_balance_changes:
          type: array
          items:
            $ref: "#/components/schemas/LtsFungibleResourceBalanceChange"
    LtsFungibleResourceBalanceChange:
      type: object
      required:
        - resource_address
        - balance_change
      properties:
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        balance_change:
          type: string
          description: |
            The string-encoded decimal representing the amount of change for the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    LtsResultantAccountFungibleBalances:
      type: object
      required:
        - account_address
        - resultant_balances
      properties:
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        resultant_balances:
          type: array
          items:
            $ref: "#/components/schemas/LtsResultantFungibleBalance"
    LtsResultantFungibleBalance:
      type: object
      required:
        - resource_address
        - resultant_balance
      properties:
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        resultant_balance:
          type: string
          description: |
            The string-encoded decimal representing the resultant balance of the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`.
    #####################################################
    # REQUEST: /lts/stream/account-transaction-outcomes #
    #####################################################
    LtsStreamAccountTransactionOutcomesRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - account_address
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        from_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: An integer between `1` and `10^13`, giving the first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
    LtsStreamAccountTransactionOutcomesResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - committed_transaction_outcomes
      properties:
        from_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: |
            An integer between `1` and `10^13`, giving the first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: An integer between `1` and `10^13`, giving the maximum state version currently committed on this node's ledger.
        committed_transaction_outcomes:
          description: A committed transaction outcomes list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/LtsCommittedTransactionOutcome"
    ##########################################
    # REQUEST: /status/network-configuration #
    ##########################################
    NetworkConfigurationResponse:
      type: object
      required:
        - version
        - network
        - network_id
        - network_hrp_suffix
        - address_types
        - well_known_addresses
      properties:
        version:
          description: Different versions regarding the node, network and api.
          type: object
          required:
            - core_version
            - api_version
          properties:
            core_version:
              type: string
            api_version:
              type: string
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        network_id:
          $ref: "#/components/schemas/NetworkIdentifierByte"
        network_hrp_suffix:
          type: string
          description: The network suffix used for Bech32m HRPs used for addressing.
        address_types:
          type: array
          items:
            $ref: "#/components/schemas/AddressType"
        well_known_addresses:
          type: object
          description: Key addresses for this network.
          required:
            - xrd
            - secp256k1_signature_virtual_badge
            - ed25519_signature_virtual_badge
            - package_of_direct_caller_virtual_badge
            - global_caller_virtual_badge
            - system_transaction_badge
            - package_owner_badge
            - validator_owner_badge
            - account_owner_badge
            - identity_owner_badge
            - package_package
            - resource_package
            - account_package
            - identity_package
            - consensus_manager_package
            - access_controller_package
            - transaction_processor_package
            - metadata_module_package
            - royalty_module_package
            - access_rules_package
            - genesis_helper_package
            - faucet_package
            - consensus_manager
            - genesis_helper
            - faucet
          properties:
            xrd:
              type: string
            secp256k1_signature_virtual_badge:
              type: string
            ed25519_signature_virtual_badge:
              type: string
            package_of_direct_caller_virtual_badge:
              type: string
            global_caller_virtual_badge:
              type: string
            system_transaction_badge:
              type: string
            package_owner_badge:
              type: string
            validator_owner_badge:
              type: string
            account_owner_badge:
              type: string
            identity_owner_badge:
              type: string
            package_package:
              type: string
            resource_package:
              type: string
            account_package:
              type: string
            identity_package:
              type: string
            consensus_manager_package:
              type: string
            access_controller_package:
              type: string
            transaction_processor_package:
              type: string
            metadata_module_package:
              type: string
            royalty_module_package:
              type: string
            access_rules_package:
              type: string
            genesis_helper_package:
              type: string
            faucet_package:
              type: string
            consensus_manager:
              type: string
            genesis_helper:
              type: string
            faucet:
              type: string
    AddressType:
      type: object
      required:
        - hrp_prefix
        - entity_type
        - address_byte_prefix
        - address_byte_length
      properties:
        hrp_prefix:
          type: string
        entity_type:
          $ref: "#/components/schemas/EntityType"
        address_byte_prefix:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        address_byte_length:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
    ###################################
    # REQUEST: /status/network-status #
    ###################################
    NetworkStatusRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    NetworkStatusResponse:
      type: object
      required:
        - pre_genesis_state_identifier
        - current_protocol_version
      properties:
        pre_genesis_state_identifier:
          $ref: "#/components/schemas/CommittedStateIdentifier"
          description: |
            The ledger state identifier of a fresh ledger before any genesis transactions.
        genesis_epoch_round:
          $ref: "#/components/schemas/EpochRound"
          description: |
            The epoch details for the genesis epoch and round.
            The genesis epoch will be the last Olympia epoch + 1, and have a "fake" round-number 1 (because there is no round for the genesis transaction).
            In the Gateway, this can be used for the epoch and round number before the first RoundUpdate transaction.
            It is not present until genesis has been run.
        post_genesis_state_identifier:
          $ref: "#/components/schemas/CommittedStateIdentifier"
          description: |
            The ledger state after the genesis transactions have been executed.
            It is not present until genesis has been run.
        current_state_identifier:
          $ref: "#/components/schemas/CommittedStateIdentifier"
          description: |
            The current state identifier at the top of the node's copy of the ledger (ie as of the latest committed transaction).
            It is not present until genesis has been run.
        current_epoch_round:
          $ref: "#/components/schemas/EpochRound"
          description: |
            The current epoch and round of the ledger.
            It is not present until genesis has been run.
        current_protocol_version:
          type: string
          description: |
            A descriptor for the current protocol version that the node is running.
    EpochRound:
      type: object
      required:
        - epoch
        - round
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch.
            Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
    CommittedStateIdentifier:
      type: object
      required:
        - state_version
        - accumulator_hash
        - state_tree_hash
        - transaction_tree_hash
        - receipt_tree_hash
      properties:
        state_version:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^13`, representing the state version. The state version increments with each transaction, starting at `0` pre-genesis.
        accumulator_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded transaction accumulator hash. This hash captures the order of all transactions on ledger.
            This hash is `ACC_{N+1} = Blake2b-256(CONCAT(ACC_N, LEDGER_HASH_{N}))`, starting with `ACC_0 = 000..000` the pre-genesis accumulator.
        state_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger.
        transaction_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger.
        receipt_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger.
    ##########################
    # REQUEST: /mempool/list #
    ##########################
    MempoolListRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    MempoolListResponse:
      type: object
      required:
        - contents
      properties:
        contents:
          type: array
          items:
            $ref: "#/components/schemas/MempoolTransactionHashes"
    MempoolTransactionHashes:
      type: object
      required:
        - intent_hash
        - payload_hash
      properties:
        intent_hash:
          $ref: "#/components/schemas/IntentHash"
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
    #################################
    # REQUEST: /mempool/transaction #
    #################################
    MempoolTransactionRequest:
      type: object
      required:
        - network
        - payload_hash
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
    MempoolTransactionResponse:
      type: object
      required:
        - payload_hex
      properties:
        payload_hex:
          type: string
          description: The hex-encoded full notarized transaction payload.
    ###############################
    # REQUEST: /transaction/parse #
    ###############################
    TransactionParseRequest:
      type: object
      required:
        - network
        - payload_hex
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        payload_hex:
          type: string
          description: |
            A hex-encoded payload of a full transaction or a partial transaction - either a notarized transaction,
            a signed transaction intent an unsigned transaction intent, or a ledger payload.
        parse_mode:
          type: string
          enum:
            - Any
            - Notarized
            - Signed
            - Unsigned
            - Ledger
          description: |
            The type of transaction payload that should be assumed. If omitted, "Any" is used - where the payload is
            attempted to be parsed as each of the following in turn: Notarized, Signed, Unsigned, Ledger.
        validation_mode:
          type: string
          enum:
            - None
            - Static
            - Full
          description: |
            The type of validation that should be performed, if the payload correctly decompiles as a Notarized Transaction.
            This is only relevant for Notarized payloads. If omitted, "Static" is used.
        response_mode:
          type: string
          enum:
            - Basic
            - Full
          description: |
            The amount of information to return in the response.
            "Basic" includes the type, validity information, and any relevant identifiers.
            "Full" also includes the fully parsed information.
            If omitted, "Full" is used.
        transaction_format_options:
          $ref: "#/components/schemas/TransactionFormatOptions"
    TransactionParseResponse:
      type: object
      required:
        - parsed
        - is_valid
      properties:
        parsed:
          $ref: "#/components/schemas/ParsedTransaction"
    ParsedTransactionType:
      type: string
      description: The type of the parsed (partial) transaction payload
      enum:
        - NotarizedTransaction
        - SignedTransactionIntent
        - TransactionIntent
        - LedgerTransaction
    ParsedTransaction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ParsedTransactionType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ParsedTransactionType
          NotarizedTransaction: '#/components/schemas/ParsedNotarizedTransaction'
          SignedTransactionIntent: '#/components/schemas/ParsedSignedTransactionIntent'
          TransactionIntent: '#/components/schemas/ParsedTransactionIntent'
          LedgerTransaction: '#/components/schemas/ParsedLedgerTransaction'
    ParsedNotarizedTransaction:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/NotarizedTransaction"
            identifiers:
              type: object
              required:
                - intent_hash
                - signed_intent_hash
                - payload_hash
                - ledger_hash
              properties:
                intent_hash:
                  $ref: "#/components/schemas/IntentHash"
                signed_intent_hash:
                  $ref: "#/components/schemas/SignedIntentHash"
                payload_hash:
                  $ref: "#/components/schemas/NotarizedTransactionHash"
                ledger_hash:
                  $ref: "#/components/schemas/LedgerPayloadHash"
            validation_error:
              type: object
              description: |
                If the transaction is known to not be valid, this gives a reason.
                Different levels of validation are performed, dependent on the validation mode.
                Note that, even if validation mode is Static or Full, the transaction may
                still be rejected or fail due to issues at runtime (eg if the loan cannot be repaid).
              required:
                - reason
                - is_permanent
              properties:
                reason:
                  type: string
                  description: |
                    The error message.
                is_permanent:
                  type: boolean
                  description: |
                    Whether the error is known to be permanent, or not.
                    This relates to whether the transaction would be rejected permanently or temporarily if submitted.
    ParsedSignedTransactionIntent:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            signed_intent:
              $ref: "#/components/schemas/SignedTransactionIntent"
            identifiers:
              type: object
              required:
                - intent_hash
                - signed_intent_hash
              properties:
                intent_hash:
                  $ref: "#/components/schemas/IntentHash"
                signed_intent_hash:
                  $ref: "#/components/schemas/SignedIntentHash"
    ParsedTransactionIntent:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            intent:
              $ref: "#/components/schemas/TransactionIntent"
            identifiers:
              type: object
              required:
                - intent_hash
              properties:
                intent_hash:
                  $ref: "#/components/schemas/IntentHash"
    ParsedLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            ledger_transaction:
              $ref: "#/components/schemas/LedgerTransaction"
            identifiers:
              type: object
              required:
                - ledger_hash
              properties:
                intent_hash:
                  $ref: "#/components/schemas/IntentHash"
                signed_intent_hash:
                  $ref: "#/components/schemas/SignedIntentHash"
                payload_hash:
                  $ref: "#/components/schemas/NotarizedTransactionHash"
                ledger_hash:
                  $ref: "#/components/schemas/LedgerPayloadHash"
    ################################
    # REQUEST: /transaction/submit #
    ################################
    TransactionSubmitRequest:
      type: object
      required:
        - network
        - notarized_transaction_hex
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        notarized_transaction_hex:
          description: A hex-encoded, compiled notarized transaction.
          type: string
        force_recalculate:
          description: If true, the transaction validity is freshly recalculated without using any caches (defaults false)
          type: boolean
    TransactionSubmitResponse:
      type: object
      required:
        - duplicate
      properties:
        duplicate:
          description: Is true if the transaction is a duplicate of an existing transaction in the mempool.
          type: boolean
    TransactionSubmitErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/TransactionSubmitErrorDetails"
    TransactionSubmitErrorDetailsType:
      type: string
      enum:
        - MempoolFull
        - Rejected
    TransactionSubmitErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/TransactionSubmitErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TransactionSubmitErrorDetailsType
          MempoolFull: '#/components/schemas/TransactionSubmitMempoolFullErrorDetails'
          Rejected: '#/components/schemas/TransactionSubmitRejectedErrorDetails'
    TransactionSubmitMempoolFullErrorDetails:
      allOf:
        - $ref: "#/components/schemas/TransactionSubmitErrorDetails"
        - type: object
          required:
            - mempool_capacity
          properties:
            mempool_capacity:
              type: integer
              format: int32
              minimum: 0
              maximum: 10000
    TransactionSubmitRejectedErrorDetails:
      allOf:
        - $ref: "#/components/schemas/TransactionSubmitErrorDetails"
        - type: object
          required:
            - error_message
            - is_fresh
            - is_payload_rejection_permanent
            - is_intent_rejection_permanent
            - is_rejected_because_intent_already_committed
          properties:
            error_message:
              type: string
              description: An explanation of the error
            is_fresh:
              type: boolean
              description: |
                Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending
                transaction result cache.
            is_payload_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this payload is known to be permanent.
            is_intent_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection
                being permanent, as it implies any payloads containing the intent will also be permanently rejected.
            is_rejected_because_intent_already_committed:
              type: boolean
              description: |
                Whether the cached rejection of this intent is due to the intent already having been committed.
                If so, see the /transaction/receipt endpoint for further information.
            retry_from_timestamp:
              $ref: "#/components/schemas/Instant"
              description: |
                The time after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary, and not due to the header specifying a "from epoch" in the future.
            retry_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
            invalid_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
                Only present if the rejection isn't permanent.
    ################################
    # REQUEST: /transaction/status #
    ################################
    TransactionStatusRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/IntentHash"
    TransactionStatusResponse:
      type: object
      required:
        - intent_status
        - status_description
        - known_payloads
      properties:
        intent_status:
          $ref: "#/components/schemas/TransactionIntentStatus"
        status_description:
          type: string
          description: |
            An explanation as to why the intent status is resolved as it is.
        invalid_from_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
            Only present if the intent status is InMempool or Unknown and we know about a payload.
        known_payloads:
          type: array
          items:
            $ref: "#/components/schemas/TransactionPayloadStatus"
    TransactionPayloadStatus:
      type: object
      required:
        - payload_hash
        - status
      properties:
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        status:
          type: string
          description: |
            The status of the transaction payload, as per this node.
            A NotInMempool status means that it wasn't rejected at last execution attempt, but it's not currently in the mempool either.
          enum:
            - CommittedSuccess
            - CommittedFailure
            - PermanentlyRejected
            - TransientlyRejected
            - InMempool
            - NotInMempool
        error_message:
          description: An explanation for the error, if failed or rejected
          type: string
    TransactionIntentStatus:
      type: string
      description: |
        The status of the transaction intent, as determined by the node.
        FateUncertain or FateUncertainButLikelyRejection mean that it's still possible that a payload containing the transaction
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentRejection
        - InMempool
        - NotSeen
        - FateUncertain
        - FateUncertainButLikelyRejection
    #################################
    # REQUEST: /transaction/receipt #
    #################################
    TransactionReceiptRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/IntentHash"
    TransactionReceiptResponse:
      type: object
      required:
        - committed
      properties:
        committed:
          $ref: "#/components/schemas/CommittedTransaction"
    #####################################
    # REQUEST: /transaction/callpreview #
    #####################################
    TransactionCallPreviewRequest:
      type: object
      required:
        - network
        - target
        - arguments
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        target:
          $ref: "#/components/schemas/TargetIdentifier"
        arguments:
          type: array
          description: Argument list
          items:
            type: string
            description: SBOR-encoded argument, formatted as a hex-string
    TargetIdentifierType:
      type: string
      enum:
        - Method
        - Function
    TargetIdentifier:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/TargetIdentifierType'
      discriminator:
        propertyName: type
        mapping:
          Method: '#/components/schemas/ComponentMethodTargetIdentifier'
          Function: '#/components/schemas/BlueprintFunctionTargetIdentifier'
    ComponentMethodTargetIdentifier:
      allOf:
        - $ref: '#/components/schemas/TargetIdentifier'
        - type: object
          required:
            - component_address
            - method_name
          properties:
            component_address:
              $ref: "#/components/schemas/ComponentAddress"
            method_name:
              type: string
    BlueprintFunctionTargetIdentifier:
      allOf:
        - $ref: '#/components/schemas/TargetIdentifier'
        - type: object
          required:
            - package_address
            - blueprint_name
            - function_name
          properties:
            package_address:
              $ref: "#/components/schemas/PackageAddress"
            blueprint_name:
              type: string
            function_name:
              type: string
    TransactionCallPreviewResponse:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/TransactionStatus"
        output:
          $ref: "#/components/schemas/SborData"
        error_message:
          type: string
          description: Error message (only present if status is Failed or Rejected)
    #################################
    # REQUEST: /transaction/preview #
    #################################
    TransactionPreviewRequest:
      type: object
      required:
        - network
        - manifest
        - start_epoch_inclusive
        - end_epoch_exclusive
        - cost_unit_limit
        - tip_percentage
        - nonce
        - signer_public_keys
        - flags
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        manifest:
          description: A text-representation of a transaction manifest
          type: string
        blobs_hex:
          description: An array of hex-encoded blob data (optional)
          type: array
          items:
            type: string
        start_epoch_inclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the epoch at which the transaction starts being valid
        end_epoch_exclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the epoch at which the transaction is no longer valid
        notary_public_key:
          $ref: "#/components/schemas/PublicKey"
          description: The notary public key to use (optional)
        notary_is_signatory:
          type: boolean
          description: Whether the notary should count as a signatory (optional, default false)
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
        nonce:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, chosen to allow a unique intent to be created (to enable submitting an otherwise identical/duplicate intent).
        signer_public_keys:
          type: array
          items:
            $ref: "#/components/schemas/PublicKey"
          description: A list of public keys to be used as transaction signers
        flags:
          type: object
          required:
            - unlimited_loan
            - assume_all_signature_proofs
            - permit_duplicate_intent_hash
            - permit_invalid_header_epoch
          properties:
            unlimited_loan:
              type: boolean
            assume_all_signature_proofs:
              type: boolean
            permit_duplicate_intent_hash:
              type: boolean
            permit_invalid_header_epoch:
              type: boolean
    TransactionPreviewResponse:
      type: object
      required:
        - encoded_receipt
        - receipt
        - instruction_resource_changes
        - logs
      properties:
        encoded_receipt:
          type: string
          description: The hex-sbor-encoded receipt
        receipt:
          $ref: "#/components/schemas/TransactionReceipt"
        instruction_resource_changes:
          type: array
          items:
            $ref: "#/components/schemas/InstructionResourceChanges"
        logs:
          type: array
          items:
            type: object
            required:
              - level
              - message
            properties:
              level:
                type: string
              message:
                type: string
    #################################
    # REQUEST: /stream/transactions #
    #################################
    StreamTransactionsRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        from_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: An integer between `1` and `10^13`, giving the first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
        sbor_format_options:
          $ref: "#/components/schemas/SborFormatOptions"
        transaction_format_options:
          $ref: "#/components/schemas/TransactionFormatOptions"
        substate_format_options:
          $ref: "#/components/schemas/SubstateFormatOptions"
    StreamTransactionsResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - transactions
      properties:
        from_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: |
            An integer between `1` and `10^13`, giving the first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          type: integer
          format: int64
          minimum: 1
          maximum: 100000000000000
          description: An integer between `1` and `10^13`, giving the maximum state version currently committed on this node's ledger.
        transactions:
          description: A committed transactions list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/CommittedTransaction"
    CommittedTransaction:
      type: object
      required:
        - resultant_state_identifiers
        - ledger_transaction
        - receipt
      properties:
        resultant_state_identifiers:
          $ref: "#/components/schemas/CommittedStateIdentifier"
        ledger_transaction:
          $ref: "#/components/schemas/LedgerTransaction"
        receipt:
          $ref: "#/components/schemas/TransactionReceipt"
    LedgerTransactionType:
      type: string
      description: The type of the ledger transaction
      enum:
        - Genesis
        - User
        - RoundUpdate
    LedgerTransaction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/LedgerTransactionType"
        payload_hex:
          type: string
          description: The hex-encoded full ledger transaction payload. Only returned if enabled in TransactionFormatOptions on your request.
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LedgerTransactionType
          Genesis: '#/components/schemas/GenesisLedgerTransaction'
          User: '#/components/schemas/UserLedgerTransaction'
          RoundUpdate: '#/components/schemas/RoundUpdateLedgerTransaction'
    GenesisLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - system_transaction
          properties:
            system_transaction:
              $ref: "#/components/schemas/SystemTransaction"
    UserLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - notarized_transaction
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/NotarizedTransaction"
    RoundUpdateLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - round_update_transaction
          properties:
            round_update_transaction:
              $ref: "#/components/schemas/RoundUpdateTransaction"
    RoundUpdateTransaction:
      type: object
      required:
        - proposer_timestamp
        - epoch
        - round_in_epoch
        - leader_proposal_history
      properties:
        proposer_timestamp:
          $ref: '#/components/schemas/Instant'
          description: The round proposer's timestamp.
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch.
        round_in_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the consensus round in the epoch
        leader_proposal_history:
          $ref: '#/components/schemas/LeaderProposalHistory'
          description: A recent history (i.e. since the previous `RoundUpdateValidatorTransaction`) of consensus round leaders' reliability. Used for validator emissions calculation.
    LeaderProposalHistory:
      type: object
      required:
        - gap_round_leaders
        - current_leader
        - is_fallback
      properties:
        gap_round_leaders:
          type: array
          description: The validators which were leaders of the "gap" rounds (i.e. since the previous `RoundUpdateValidatorTransaction` - which means that this list will contain exactly `current.round - previous.round - 1` elements). The validators on this list should be penalized during emissions at the end of the epoch.
          items:
            $ref: "#/components/schemas/ActiveValidatorIndex"
        current_leader:
          $ref: '#/components/schemas/ActiveValidatorIndex'
          description: The leader of the concluded round.
        is_fallback:
          type: boolean
          description: Whether the concluded round was conducted in a "fallback" mode (i.e. indicating a fault of the current leader). When `true`, the `current_leader` should be penalized during emissions in the same way as `gap_round_leaders`. When `false`, the `current_leader` is considered to have made this round's proposal successfully.
    ActiveValidatorIndex:
      type: object
      required:
        - index
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: An index of a validator within a specific active validator set (ordered by stake descending). This is the same ordering as used by other parts of the API which list active validators.
    SystemTransaction:
      type: object
      properties:
        payload_hex:
          type: string
          description: The hex-encoded system transaction payload. Only returned if enabled in TransactionFormatOptions on your request.
    #####################################
    # REQUEST: /state/consensus-manager #
    #####################################
    StateConsensusManagerRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    StateConsensusManagerResponse:
      type: object
      required:
        - config
        - state
        - current_proposal_statistic
        - current_validator_set
        - current_time
        - current_time_rounded_to_minutes
      properties:
        config:
          $ref: "#/components/schemas/Substate"
        state:
          $ref: "#/components/schemas/Substate"
        current_proposal_statistic:
          $ref: "#/components/schemas/Substate"
        current_validator_set:
          $ref: "#/components/schemas/Substate"
        current_time:
          $ref: "#/components/schemas/Substate"
        current_time_rounded_to_minutes:
          $ref: "#/components/schemas/Substate"
    ###########################
    # REQUEST: /state/account #
    ###########################
    StateAccountRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's global address
    StateAccountResponse:
      type: object
      required:
        - info
        - access_rules
        - state
        - vaults
      properties:
        info:
          $ref: "#/components/schemas/Substate"
        access_rules:
          $ref: "#/components/schemas/Substate"
        state:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: All of the account's vaults
          items:
            $ref: "#/components/schemas/VaultBalance"
    VaultBalance:
      type: object
      required:
        - vault_entity
        - resource_amount
      properties:
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
        resource_amount:
          $ref: "#/components/schemas/ResourceAmount"
    #############################
    # REQUEST: /state/component #
    #############################
    StateComponentRequest:
      type: object
      required:
        - network
        - component_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        component_address:
          type: string
          description: The Bech32m-encoded human readable version of the component's global address
    StateComponentResponse:
      type: object
      required:
        - info
        - state
        - royalty_config
        - royalty_accumulator
        - access_rules
        - vaults
        - descendent_nodes
      properties:
        info:
          $ref: "#/components/schemas/Substate"
        state:
          $ref: "#/components/schemas/Substate"
        royalty_config:
          $ref: "#/components/schemas/Substate"
        royalty_accumulator:
          $ref: "#/components/schemas/Substate"
        access_rules:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/VaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/StateComponentDescendentNode"
    StateComponentDescendentNode:
      type: object
      required:
        - parent_entity
        - parent_partition_number
        - parent_substate_key_hex
        - parent_substate_db_sort_key_hex
        - entity
        - depth
      properties:
        parent_entity:
          $ref: "#/components/schemas/EntityReference"
        parent_partition_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        parent_substate_key_hex:
          type: string
          description: The hex-encoded bytes of the substate key, under the entity partition
        parent_substate_db_sort_key_hex:
          type: string
          description: The hex-encoded bytes of the partially-hashed DB sort key, under the given entity partition
        entity:
          $ref: "#/components/schemas/EntityReference"
        depth:
          description: Depth under component
          type: integer
          format: int32
          minimum: 0
          maximum: 100
    #############################
    # REQUEST: /state/validator #
    #############################
    StateValidatorRequest:
      type: object
      required:
        - network
        - validator_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        validator_address:
          $ref: "#/components/schemas/ComponentAddress"
    StateValidatorResponse:
      type: object
      required:
        - address
        - state
        - access_rules
        - vaults
        - descendent_nodes
      properties:
        address:
          $ref: '#/components/schemas/ComponentAddress'
        state:
          $ref: "#/components/schemas/Substate"
        access_rules:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/VaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/StateComponentDescendentNode"
    #####################################
    # REQUEST: /state/access-controller #
    #####################################
    StateAccessControllerRequest:
      type: object
      required:
        - network
        - controller_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        controller_address:
          $ref: "#/components/schemas/ComponentAddress"
    StateAccessControllerResponse:
      type: object
      required:
        - state
        - access_rules
        - vaults
        - descendent_nodes
      properties:
        state:
          $ref: "#/components/schemas/Substate"
        access_rules:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/VaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/StateComponentDescendentNode"
    ############################
    # REQUEST: /state/resource #
    ############################
    StateResourceRequest:
      type: object
      required:
        - network
        - resource_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        resource_address:
          type: string
          description: The Bech32m-encoded human readable version of the resource's global address
    StateResourceResponse:
      type: object
      required:
        - manager
        - access_rules
      properties:
        manager:
          $ref: "#/components/schemas/StateResourceManager"
        access_rules:
          $ref: "#/components/schemas/Substate"
    StateResourceManager:
      type: object
      required:
        - resource_type
      properties:
        resource_type:
          $ref: '#/components/schemas/ResourceType'
      discriminator:
        propertyName: resource_type
        mapping:
          # NOTE: These need to match ResourceType
          Fungible: '#/components/schemas/StateFungibleResourceManager'
          NonFungible: '#/components/schemas/StateNonFungibleResourceManager'
    StateFungibleResourceManager:
      allOf:
        - $ref: '#/components/schemas/StateResourceManager'
        - type: object
          required:
            - divisibility
            - total_supply
          properties:
            divisibility:
              $ref: "#/components/schemas/Substate"
            total_supply:
              $ref: "#/components/schemas/Substate"
    StateNonFungibleResourceManager:
      allOf:
        - $ref: '#/components/schemas/StateResourceManager'
        - type: object
          required:
            - id_type
            - total_supply
            - mutable_fields
          properties:
            id_type:
              $ref: "#/components/schemas/Substate"
            total_supply:
              $ref: "#/components/schemas/Substate"
            mutable_fields:
              $ref: "#/components/schemas/Substate"
    ################################
    # REQUEST: /state/non-fungible #
    ################################
    StateNonFungibleRequest:
      type: object
      required:
        - network
        - resource_address
        - non_fungible_id
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        resource_address:
          type: string
          description: The Bech32m-encoded human readable version of the resource's global address
        non_fungible_id:
          $ref: '#/components/schemas/NonFungibleLocalIdSimpleRepresentation'
    StateNonFungibleResponse:
      type: object
      required:
        - non_fungible
      properties:
        non_fungible:
          $ref: "#/components/schemas/Substate"
    ###########################
    # REQUEST: /state/package #
    ###########################
    StatePackageRequest:
      type: object
      required:
        - network
        - package_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        package_address:
          type: string
          description: The Bech32m-encoded human readable version of the package's global address
    StatePackageResponse:
      type: object
      required:
        - info
        - royalty
        - access_rules
      properties:
        info:
          $ref: "#/components/schemas/Substate"
        royalty:
          $ref: "#/components/schemas/Substate"
        access_rules:
          $ref: "#/components/schemas/Substate"
