/* Copyright 2021 Radix Publishing Ltd incorporated in Jersey (Channel Islands).
 *
 * Licensed under the Radix License, Version 1.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 *
 * radixfoundation.org/licenses/LICENSE-v1
 *
 * The Licensor hereby grants permission for the Canonical version of the Work to be
 * published, distributed and used under or by reference to the Licensor’s trademark
 * Radix ® and use of any unregistered trade names, logos or get-up.
 *
 * The Licensor provides the Work (and each Contributor provides its Contributions) on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 * MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Whilst the Work is capable of being deployed, used and adopted (instantiated) to create
 * a distributed ledger it is your responsibility to test and validate the code, together
 * with all logic and performance of that code under all foreseeable scenarios.
 *
 * The Licensor does not make or purport to make and hereby excludes liability for all
 * and any representation, warranty or undertaking in any form whatsoever, whether express
 * or implied, to any entity or person, including any representation, warranty or
 * undertaking, as to the functionality security use, value or other characteristics of
 * any distributed ledger nor in respect the functioning or value of any tokens which may
 * be created stored or transferred using the Work. The Licensor does not warrant that the
 * Work or any use of the Work complies with any law or regulation in any territory where
 * it may be implemented or used or that it will be appropriate for any specific purpose.
 *
 * Neither the licensor nor any current or former employees, officers, directors, partners,
 * trustees, representatives, agents, advisors, contractors, or volunteers of the Licensor
 * shall be liable for any direct or indirect, special, incidental, consequential or other
 * losses of any kind, in tort, contract or otherwise (including but not limited to loss
 * of revenue, income or profits, or loss of use or data, or loss of reputation, or loss
 * of any economic or other opportunity of whatsoever nature or howsoever arising), arising
 * out of or in connection with (without limitation of any use, misuse, of any ledger system
 * or use made or its functionality or any performance or operation of any code or protocol
 * caused by bugs or programming or logic errors or otherwise);
 *
 * A. any offer, purchase, holding, use, sale, exchange or transmission of any
 * cryptographic keys, tokens or assets created, exchanged, stored or arising from any
 * interaction with the Work;
 *
 * B. any failure in a transmission or loss of any token or assets keys or other digital
 * artefacts due to errors in transmission;
 *
 * C. bugs, hacks, logic errors or faults in the Work or any communication;
 *
 * D. system software or apparatus including but not limited to losses caused by errors
 * in holding or transmitting tokens by any third-party;
 *
 * E. breaches or failure of security including hacker attacks, loss or disclosure of
 * password, loss of private key, unauthorised use or misuse of such passwords or keys;
 *
 * F. any losses including loss of anticipated savings or other benefits resulting from
 * use of the Work or any changes to the Work (however implemented).
 *
 * You are solely responsible for; testing, validating and evaluation of all operation
 * logic, functionality, security and appropriateness of using the Work for any commercial
 * or non-commercial purpose and for any reproduction or redistribution by You of the
 * Work. You assume all risks associated with Your use of the Work and the exercise of
 * permissions under this License.
 */

/*
 * Babylon Core API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.CoreApiSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.CoreApiSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.CoreApiSdk.Model
{
    /// <summary>
    /// ResourceManagerSubstateAllOfAuthRules
    /// </summary>
    [DataContract(Name = "ResourceManagerSubstate_allOf_auth_rules")]
    public partial class ResourceManagerSubstateAllOfAuthRules : IEquatable<ResourceManagerSubstateAllOfAuthRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceManagerSubstateAllOfAuthRules" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResourceManagerSubstateAllOfAuthRules() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceManagerSubstateAllOfAuthRules" /> class.
        /// </summary>
        /// <param name="mint">mint (required).</param>
        /// <param name="burn">burn (required).</param>
        /// <param name="withdraw">withdraw (required).</param>
        /// <param name="deposit">deposit (required).</param>
        /// <param name="updateMetadata">updateMetadata (required).</param>
        /// <param name="updateNonFungibleData">updateNonFungibleData (required).</param>
        public ResourceManagerSubstateAllOfAuthRules(FixedActionAuthRules mint = default(FixedActionAuthRules), FixedActionAuthRules burn = default(FixedActionAuthRules), FixedActionAuthRules withdraw = default(FixedActionAuthRules), FixedActionAuthRules deposit = default(FixedActionAuthRules), FixedActionAuthRules updateMetadata = default(FixedActionAuthRules), FixedActionAuthRules updateNonFungibleData = default(FixedActionAuthRules))
        {
            // to ensure "mint" is required (not null)
            if (mint == null)
            {
                throw new ArgumentNullException("mint is a required property for ResourceManagerSubstateAllOfAuthRules and cannot be null");
            }
            this.Mint = mint;
            // to ensure "burn" is required (not null)
            if (burn == null)
            {
                throw new ArgumentNullException("burn is a required property for ResourceManagerSubstateAllOfAuthRules and cannot be null");
            }
            this.Burn = burn;
            // to ensure "withdraw" is required (not null)
            if (withdraw == null)
            {
                throw new ArgumentNullException("withdraw is a required property for ResourceManagerSubstateAllOfAuthRules and cannot be null");
            }
            this.Withdraw = withdraw;
            // to ensure "deposit" is required (not null)
            if (deposit == null)
            {
                throw new ArgumentNullException("deposit is a required property for ResourceManagerSubstateAllOfAuthRules and cannot be null");
            }
            this.Deposit = deposit;
            // to ensure "updateMetadata" is required (not null)
            if (updateMetadata == null)
            {
                throw new ArgumentNullException("updateMetadata is a required property for ResourceManagerSubstateAllOfAuthRules and cannot be null");
            }
            this.UpdateMetadata = updateMetadata;
            // to ensure "updateNonFungibleData" is required (not null)
            if (updateNonFungibleData == null)
            {
                throw new ArgumentNullException("updateNonFungibleData is a required property for ResourceManagerSubstateAllOfAuthRules and cannot be null");
            }
            this.UpdateNonFungibleData = updateNonFungibleData;
        }

        /// <summary>
        /// Gets or Sets Mint
        /// </summary>
        [DataMember(Name = "mint", IsRequired = true, EmitDefaultValue = true)]
        public FixedActionAuthRules Mint { get; set; }

        /// <summary>
        /// Gets or Sets Burn
        /// </summary>
        [DataMember(Name = "burn", IsRequired = true, EmitDefaultValue = true)]
        public FixedActionAuthRules Burn { get; set; }

        /// <summary>
        /// Gets or Sets Withdraw
        /// </summary>
        [DataMember(Name = "withdraw", IsRequired = true, EmitDefaultValue = true)]
        public FixedActionAuthRules Withdraw { get; set; }

        /// <summary>
        /// Gets or Sets Deposit
        /// </summary>
        [DataMember(Name = "deposit", IsRequired = true, EmitDefaultValue = true)]
        public FixedActionAuthRules Deposit { get; set; }

        /// <summary>
        /// Gets or Sets UpdateMetadata
        /// </summary>
        [DataMember(Name = "update_metadata", IsRequired = true, EmitDefaultValue = true)]
        public FixedActionAuthRules UpdateMetadata { get; set; }

        /// <summary>
        /// Gets or Sets UpdateNonFungibleData
        /// </summary>
        [DataMember(Name = "update_non_fungible_data", IsRequired = true, EmitDefaultValue = true)]
        public FixedActionAuthRules UpdateNonFungibleData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceManagerSubstateAllOfAuthRules {\n");
            sb.Append("  Mint: ").Append(Mint).Append("\n");
            sb.Append("  Burn: ").Append(Burn).Append("\n");
            sb.Append("  Withdraw: ").Append(Withdraw).Append("\n");
            sb.Append("  Deposit: ").Append(Deposit).Append("\n");
            sb.Append("  UpdateMetadata: ").Append(UpdateMetadata).Append("\n");
            sb.Append("  UpdateNonFungibleData: ").Append(UpdateNonFungibleData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceManagerSubstateAllOfAuthRules);
        }

        /// <summary>
        /// Returns true if ResourceManagerSubstateAllOfAuthRules instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceManagerSubstateAllOfAuthRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceManagerSubstateAllOfAuthRules input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Mint == input.Mint ||
                    (this.Mint != null &&
                    this.Mint.Equals(input.Mint))
                ) && 
                (
                    this.Burn == input.Burn ||
                    (this.Burn != null &&
                    this.Burn.Equals(input.Burn))
                ) && 
                (
                    this.Withdraw == input.Withdraw ||
                    (this.Withdraw != null &&
                    this.Withdraw.Equals(input.Withdraw))
                ) && 
                (
                    this.Deposit == input.Deposit ||
                    (this.Deposit != null &&
                    this.Deposit.Equals(input.Deposit))
                ) && 
                (
                    this.UpdateMetadata == input.UpdateMetadata ||
                    (this.UpdateMetadata != null &&
                    this.UpdateMetadata.Equals(input.UpdateMetadata))
                ) && 
                (
                    this.UpdateNonFungibleData == input.UpdateNonFungibleData ||
                    (this.UpdateNonFungibleData != null &&
                    this.UpdateNonFungibleData.Equals(input.UpdateNonFungibleData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mint != null)
                {
                    hashCode = (hashCode * 59) + this.Mint.GetHashCode();
                }
                if (this.Burn != null)
                {
                    hashCode = (hashCode * 59) + this.Burn.GetHashCode();
                }
                if (this.Withdraw != null)
                {
                    hashCode = (hashCode * 59) + this.Withdraw.GetHashCode();
                }
                if (this.Deposit != null)
                {
                    hashCode = (hashCode * 59) + this.Deposit.GetHashCode();
                }
                if (this.UpdateMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateMetadata.GetHashCode();
                }
                if (this.UpdateNonFungibleData != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateNonFungibleData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
