/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.FrontendSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.FrontendSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.FrontendSdk.Model
{
    /// <summary>
    /// MessageTooLongErrorAllOf
    /// </summary>
    [DataContract(Name = "MessageTooLongError_allOf")]
    public partial class MessageTooLongErrorAllOf : IEquatable<MessageTooLongErrorAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageTooLongErrorAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageTooLongErrorAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageTooLongErrorAllOf" /> class.
        /// </summary>
        /// <param name="lengthLimit">The maximum byte length of the message, as per current transaction rules. (required).</param>
        /// <param name="attemptedLength">The byte length of the message in the transaction. (required).</param>
        public MessageTooLongErrorAllOf(int lengthLimit = default(int), int attemptedLength = default(int))
        {
            this.LengthLimit = lengthLimit;
            this.AttemptedLength = attemptedLength;
        }

        /// <summary>
        /// The maximum byte length of the message, as per current transaction rules.
        /// </summary>
        /// <value>The maximum byte length of the message, as per current transaction rules.</value>
        [DataMember(Name = "length_limit", IsRequired = true, EmitDefaultValue = true)]
        public int LengthLimit { get; set; }

        /// <summary>
        /// The byte length of the message in the transaction.
        /// </summary>
        /// <value>The byte length of the message in the transaction.</value>
        [DataMember(Name = "attempted_length", IsRequired = true, EmitDefaultValue = true)]
        public int AttemptedLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageTooLongErrorAllOf {\n");
            sb.Append("  LengthLimit: ").Append(LengthLimit).Append("\n");
            sb.Append("  AttemptedLength: ").Append(AttemptedLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageTooLongErrorAllOf);
        }

        /// <summary>
        /// Returns true if MessageTooLongErrorAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageTooLongErrorAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageTooLongErrorAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LengthLimit == input.LengthLimit ||
                    this.LengthLimit.Equals(input.LengthLimit)
                ) && 
                (
                    this.AttemptedLength == input.AttemptedLength ||
                    this.AttemptedLength.Equals(input.AttemptedLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LengthLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.AttemptedLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
