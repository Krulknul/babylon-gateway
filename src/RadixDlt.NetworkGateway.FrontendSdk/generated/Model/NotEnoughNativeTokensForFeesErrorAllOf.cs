/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.FrontendSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.FrontendSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.FrontendSdk.Model
{
    /// <summary>
    /// NotEnoughNativeTokensForFeesErrorAllOf
    /// </summary>
    [DataContract(Name = "NotEnoughNativeTokensForFeesError_allOf")]
    public partial class NotEnoughNativeTokensForFeesErrorAllOf : IEquatable<NotEnoughNativeTokensForFeesErrorAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotEnoughNativeTokensForFeesErrorAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotEnoughNativeTokensForFeesErrorAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotEnoughNativeTokensForFeesErrorAllOf" /> class.
        /// </summary>
        /// <param name="requiredAmount">requiredAmount (required).</param>
        /// <param name="availableAmount">availableAmount (required).</param>
        public NotEnoughNativeTokensForFeesErrorAllOf(TokenAmount requiredAmount = default(TokenAmount), TokenAmount availableAmount = default(TokenAmount))
        {
            // to ensure "requiredAmount" is required (not null)
            if (requiredAmount == null)
            {
                throw new ArgumentNullException("requiredAmount is a required property for NotEnoughNativeTokensForFeesErrorAllOf and cannot be null");
            }
            this.RequiredAmount = requiredAmount;
            // to ensure "availableAmount" is required (not null)
            if (availableAmount == null)
            {
                throw new ArgumentNullException("availableAmount is a required property for NotEnoughNativeTokensForFeesErrorAllOf and cannot be null");
            }
            this.AvailableAmount = availableAmount;
        }

        /// <summary>
        /// Gets or Sets RequiredAmount
        /// </summary>
        [DataMember(Name = "required_amount", IsRequired = true, EmitDefaultValue = true)]
        public TokenAmount RequiredAmount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAmount
        /// </summary>
        [DataMember(Name = "available_amount", IsRequired = true, EmitDefaultValue = true)]
        public TokenAmount AvailableAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotEnoughNativeTokensForFeesErrorAllOf {\n");
            sb.Append("  RequiredAmount: ").Append(RequiredAmount).Append("\n");
            sb.Append("  AvailableAmount: ").Append(AvailableAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotEnoughNativeTokensForFeesErrorAllOf);
        }

        /// <summary>
        /// Returns true if NotEnoughNativeTokensForFeesErrorAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of NotEnoughNativeTokensForFeesErrorAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotEnoughNativeTokensForFeesErrorAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequiredAmount == input.RequiredAmount ||
                    (this.RequiredAmount != null &&
                    this.RequiredAmount.Equals(input.RequiredAmount))
                ) && 
                (
                    this.AvailableAmount == input.AvailableAmount ||
                    (this.AvailableAmount != null &&
                    this.AvailableAmount.Equals(input.AvailableAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequiredAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredAmount.GetHashCode();
                }
                if (this.AvailableAmount != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
