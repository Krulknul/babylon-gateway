/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.FrontendSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.FrontendSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.FrontendSdk.Model
{
    /// <summary>
    /// TransactionBuild
    /// </summary>
    [DataContract(Name = "TransactionBuild")]
    public partial class TransactionBuild : IEquatable<TransactionBuild>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionBuild" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionBuild() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionBuild" /> class.
        /// </summary>
        /// <param name="fee">fee (required).</param>
        /// <param name="unsignedTransaction">The unsigned transaction payload, hex encoded. (required).</param>
        /// <param name="payloadToSign">The payload which needs signing, hex encoded. This is &#x60;SHA256(SHA256(unsigned_transaction_bytes))&#x60;. (required).</param>
        public TransactionBuild(TokenAmount fee = default(TokenAmount), string unsignedTransaction = default(string), string payloadToSign = default(string))
        {
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new ArgumentNullException("fee is a required property for TransactionBuild and cannot be null");
            }
            this.Fee = fee;
            // to ensure "unsignedTransaction" is required (not null)
            if (unsignedTransaction == null)
            {
                throw new ArgumentNullException("unsignedTransaction is a required property for TransactionBuild and cannot be null");
            }
            this.UnsignedTransaction = unsignedTransaction;
            // to ensure "payloadToSign" is required (not null)
            if (payloadToSign == null)
            {
                throw new ArgumentNullException("payloadToSign is a required property for TransactionBuild and cannot be null");
            }
            this.PayloadToSign = payloadToSign;
        }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = true)]
        public TokenAmount Fee { get; set; }

        /// <summary>
        /// The unsigned transaction payload, hex encoded.
        /// </summary>
        /// <value>The unsigned transaction payload, hex encoded.</value>
        [DataMember(Name = "unsigned_transaction", IsRequired = true, EmitDefaultValue = true)]
        public string UnsignedTransaction { get; set; }

        /// <summary>
        /// The payload which needs signing, hex encoded. This is &#x60;SHA256(SHA256(unsigned_transaction_bytes))&#x60;.
        /// </summary>
        /// <value>The payload which needs signing, hex encoded. This is &#x60;SHA256(SHA256(unsigned_transaction_bytes))&#x60;.</value>
        [DataMember(Name = "payload_to_sign", IsRequired = true, EmitDefaultValue = true)]
        public string PayloadToSign { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionBuild {\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  UnsignedTransaction: ").Append(UnsignedTransaction).Append("\n");
            sb.Append("  PayloadToSign: ").Append(PayloadToSign).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionBuild);
        }

        /// <summary>
        /// Returns true if TransactionBuild instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionBuild to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionBuild input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.UnsignedTransaction == input.UnsignedTransaction ||
                    (this.UnsignedTransaction != null &&
                    this.UnsignedTransaction.Equals(input.UnsignedTransaction))
                ) && 
                (
                    this.PayloadToSign == input.PayloadToSign ||
                    (this.PayloadToSign != null &&
                    this.PayloadToSign.Equals(input.PayloadToSign))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                if (this.UnsignedTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.UnsignedTransaction.GetHashCode();
                }
                if (this.PayloadToSign != null)
                {
                    hashCode = (hashCode * 59) + this.PayloadToSign.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
