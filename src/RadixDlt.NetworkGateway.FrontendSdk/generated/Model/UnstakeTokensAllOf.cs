/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.FrontendSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.FrontendSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.FrontendSdk.Model
{
    /// <summary>
    /// UnstakeTokensAllOf
    /// </summary>
    [DataContract(Name = "UnstakeTokens_allOf")]
    public partial class UnstakeTokensAllOf : IEquatable<UnstakeTokensAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnstakeTokensAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnstakeTokensAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnstakeTokensAllOf" /> class.
        /// </summary>
        /// <param name="fromValidator">fromValidator (required).</param>
        /// <param name="toAccount">toAccount (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="unstakePercentage">The percentage of currently staked XRD to unstake, where the proportion is a proportion of the current active stake at the given LedgerState. To be explicit, the referenced active state does not include pending stake, pending unstake or locked unstake. .</param>
        public UnstakeTokensAllOf(ValidatorIdentifier fromValidator = default(ValidatorIdentifier), AccountIdentifier toAccount = default(AccountIdentifier), TokenAmount amount = default(TokenAmount), decimal unstakePercentage = default(decimal))
        {
            // to ensure "fromValidator" is required (not null)
            if (fromValidator == null)
            {
                throw new ArgumentNullException("fromValidator is a required property for UnstakeTokensAllOf and cannot be null");
            }
            this.FromValidator = fromValidator;
            // to ensure "toAccount" is required (not null)
            if (toAccount == null)
            {
                throw new ArgumentNullException("toAccount is a required property for UnstakeTokensAllOf and cannot be null");
            }
            this.ToAccount = toAccount;
            this.Amount = amount;
            this.UnstakePercentage = unstakePercentage;
        }

        /// <summary>
        /// Gets or Sets FromValidator
        /// </summary>
        [DataMember(Name = "from_validator", IsRequired = true, EmitDefaultValue = true)]
        public ValidatorIdentifier FromValidator { get; set; }

        /// <summary>
        /// Gets or Sets ToAccount
        /// </summary>
        [DataMember(Name = "to_account", IsRequired = true, EmitDefaultValue = true)]
        public AccountIdentifier ToAccount { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public TokenAmount Amount { get; set; }

        /// <summary>
        /// The percentage of currently staked XRD to unstake, where the proportion is a proportion of the current active stake at the given LedgerState. To be explicit, the referenced active state does not include pending stake, pending unstake or locked unstake. 
        /// </summary>
        /// <value>The percentage of currently staked XRD to unstake, where the proportion is a proportion of the current active stake at the given LedgerState. To be explicit, the referenced active state does not include pending stake, pending unstake or locked unstake. </value>
        [DataMember(Name = "unstake_percentage", EmitDefaultValue = false)]
        public decimal UnstakePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnstakeTokensAllOf {\n");
            sb.Append("  FromValidator: ").Append(FromValidator).Append("\n");
            sb.Append("  ToAccount: ").Append(ToAccount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  UnstakePercentage: ").Append(UnstakePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnstakeTokensAllOf);
        }

        /// <summary>
        /// Returns true if UnstakeTokensAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of UnstakeTokensAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnstakeTokensAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromValidator == input.FromValidator ||
                    (this.FromValidator != null &&
                    this.FromValidator.Equals(input.FromValidator))
                ) && 
                (
                    this.ToAccount == input.ToAccount ||
                    (this.ToAccount != null &&
                    this.ToAccount.Equals(input.ToAccount))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.UnstakePercentage == input.UnstakePercentage ||
                    this.UnstakePercentage.Equals(input.UnstakePercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromValidator != null)
                {
                    hashCode = (hashCode * 59) + this.FromValidator.GetHashCode();
                }
                if (this.ToAccount != null)
                {
                    hashCode = (hashCode * 59) + this.ToAccount.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnstakePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // UnstakePercentage (decimal) maximum
            if (this.UnstakePercentage > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnstakePercentage, must be a value less than or equal to 100.", new [] { "UnstakePercentage" });
            }

            // UnstakePercentage (decimal) minimum
            if (this.UnstakePercentage < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnstakePercentage, must be a value greater than or equal to 0.", new [] { "UnstakePercentage" });
            }

            yield break;
        }
    }

}
