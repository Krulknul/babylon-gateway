/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.FrontendSdk.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.FrontendSdk.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.FrontendSdk.Model
{
    /// <summary>
    /// TransactionIdentifier
    /// </summary>
    [DataContract(Name = "TransactionIdentifier")]
    public partial class TransactionIdentifier : IEquatable<TransactionIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionIdentifier" /> class.
        /// </summary>
        /// <param name="hash">The transaction identifier hash. (required).</param>
        public TransactionIdentifier(string hash = default(string))
        {
            // to ensure "hash" is required (not null)
            if (hash == null)
            {
                throw new ArgumentNullException("hash is a required property for TransactionIdentifier and cannot be null");
            }
            this.Hash = hash;
        }

        /// <summary>
        /// The transaction identifier hash.
        /// </summary>
        /// <value>The transaction identifier hash.</value>
        [DataMember(Name = "hash", IsRequired = true, EmitDefaultValue = true)]
        public string Hash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionIdentifier {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionIdentifier);
        }

        /// <summary>
        /// Returns true if TransactionIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionIdentifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Hash (string) maxLength
            if (this.Hash != null && this.Hash.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be less than 64.", new [] { "Hash" });
            }

            // Hash (string) minLength
            if (this.Hash != null && this.Hash.Length < 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be greater than 64.", new [] { "Hash" });
            }

            // Hash (string) pattern
            Regex regexHash = new Regex(@"^[0123456789abcdef]{64}$", RegexOptions.CultureInvariant);
            if (false == regexHash.Match(this.Hash).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, must match a pattern of " + regexHash, new [] { "Hash" });
            }

            yield break;
        }
    }

}
