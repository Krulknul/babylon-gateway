/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using RadixDlt.NetworkGateway.FrontendSdk.Client;
using RadixDlt.NetworkGateway.FrontendSdk.Model;

namespace RadixDlt.NetworkGateway.FrontendSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Build Transaction
        /// </summary>
        /// <remarks>
        /// Returns a built unsigned transaction payload, from a set of intended actions.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <returns>TransactionBuildResponse</returns>
        TransactionBuildResponse TransactionBuildPost(TransactionBuildRequest transactionBuildRequest);

        /// <summary>
        /// Build Transaction
        /// </summary>
        /// <remarks>
        /// Returns a built unsigned transaction payload, from a set of intended actions.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <returns>ApiResponse of TransactionBuildResponse</returns>
        ApiResponse<TransactionBuildResponse> TransactionBuildPostWithHttpInfo(TransactionBuildRequest transactionBuildRequest);
        /// <summary>
        /// Finalize Transaction
        /// </summary>
        /// <remarks>
        /// Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <returns>TransactionFinalizeResponse</returns>
        TransactionFinalizeResponse TransactionFinalizePost(TransactionFinalizeRequest transactionFinalizeRequest);

        /// <summary>
        /// Finalize Transaction
        /// </summary>
        /// <remarks>
        /// Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <returns>ApiResponse of TransactionFinalizeResponse</returns>
        ApiResponse<TransactionFinalizeResponse> TransactionFinalizePostWithHttpInfo(TransactionFinalizeRequest transactionFinalizeRequest);
        /// <summary>
        /// Get Recent Transactions
        /// </summary>
        /// <remarks>
        /// Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <returns>RecentTransactionsResponse</returns>
        RecentTransactionsResponse TransactionRecentPost(RecentTransactionsRequest recentTransactionsRequest);

        /// <summary>
        /// Get Recent Transactions
        /// </summary>
        /// <remarks>
        /// Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <returns>ApiResponse of RecentTransactionsResponse</returns>
        ApiResponse<RecentTransactionsResponse> TransactionRecentPostWithHttpInfo(RecentTransactionsRequest recentTransactionsRequest);
        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <returns>TransactionStatusResponse</returns>
        TransactionStatusResponse TransactionStatusPost(TransactionStatusRequest transactionStatusRequest);

        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <returns>ApiResponse of TransactionStatusResponse</returns>
        ApiResponse<TransactionStatusResponse> TransactionStatusPostWithHttpInfo(TransactionStatusRequest transactionStatusRequest);
        /// <summary>
        /// Submit Transaction
        /// </summary>
        /// <remarks>
        /// Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <returns>TransactionSubmitResponse</returns>
        TransactionSubmitResponse TransactionSubmitPost(TransactionSubmitRequest transactionSubmitRequest);

        /// <summary>
        /// Submit Transaction
        /// </summary>
        /// <remarks>
        /// Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <returns>ApiResponse of TransactionSubmitResponse</returns>
        ApiResponse<TransactionSubmitResponse> TransactionSubmitPostWithHttpInfo(TransactionSubmitRequest transactionSubmitRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Build Transaction
        /// </summary>
        /// <remarks>
        /// Returns a built unsigned transaction payload, from a set of intended actions.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionBuildResponse</returns>
        System.Threading.Tasks.Task<TransactionBuildResponse> TransactionBuildPostAsync(TransactionBuildRequest transactionBuildRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Transaction
        /// </summary>
        /// <remarks>
        /// Returns a built unsigned transaction payload, from a set of intended actions.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionBuildResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionBuildResponse>> TransactionBuildPostWithHttpInfoAsync(TransactionBuildRequest transactionBuildRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Finalize Transaction
        /// </summary>
        /// <remarks>
        /// Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionFinalizeResponse</returns>
        System.Threading.Tasks.Task<TransactionFinalizeResponse> TransactionFinalizePostAsync(TransactionFinalizeRequest transactionFinalizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finalize Transaction
        /// </summary>
        /// <remarks>
        /// Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionFinalizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionFinalizeResponse>> TransactionFinalizePostWithHttpInfoAsync(TransactionFinalizeRequest transactionFinalizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Recent Transactions
        /// </summary>
        /// <remarks>
        /// Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecentTransactionsResponse</returns>
        System.Threading.Tasks.Task<RecentTransactionsResponse> TransactionRecentPostAsync(RecentTransactionsRequest recentTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Recent Transactions
        /// </summary>
        /// <remarks>
        /// Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecentTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecentTransactionsResponse>> TransactionRecentPostWithHttpInfoAsync(RecentTransactionsRequest recentTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionStatusResponse</returns>
        System.Threading.Tasks.Task<TransactionStatusResponse> TransactionStatusPostAsync(TransactionStatusRequest transactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionStatusResponse>> TransactionStatusPostWithHttpInfoAsync(TransactionStatusRequest transactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit Transaction
        /// </summary>
        /// <remarks>
        /// Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionSubmitResponse</returns>
        System.Threading.Tasks.Task<TransactionSubmitResponse> TransactionSubmitPostAsync(TransactionSubmitRequest transactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit Transaction
        /// </summary>
        /// <remarks>
        /// Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </remarks>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionSubmitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionSubmitResponse>> TransactionSubmitPostWithHttpInfoAsync(TransactionSubmitRequest transactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApi : ITransactionApiSync, ITransactionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionApi : IDisposable, ITransactionApi
    {
        private RadixDlt.NetworkGateway.FrontendSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public TransactionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TransactionApi(string basePath)
        {
            this.Configuration = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.NetworkGateway.FrontendSdk.Client.GlobalConfiguration.Instance,
                new RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TransactionApi(RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.NetworkGateway.FrontendSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TransactionApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TransactionApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.NetworkGateway.FrontendSdk.Client.GlobalConfiguration.Instance,
                new RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TransactionApi(HttpClient client, RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.MergeConfigurations(
                RadixDlt.NetworkGateway.FrontendSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TransactionApi(RadixDlt.NetworkGateway.FrontendSdk.Client.ISynchronousClient client, RadixDlt.NetworkGateway.FrontendSdk.Client.IAsynchronousClient asyncClient, RadixDlt.NetworkGateway.FrontendSdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RadixDlt.NetworkGateway.FrontendSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Build Transaction Returns a built unsigned transaction payload, from a set of intended actions.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <returns>TransactionBuildResponse</returns>
        public TransactionBuildResponse TransactionBuildPost(TransactionBuildRequest transactionBuildRequest)
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionBuildResponse> localVarResponse = TransactionBuildPostWithHttpInfo(transactionBuildRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Transaction Returns a built unsigned transaction payload, from a set of intended actions.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <returns>ApiResponse of TransactionBuildResponse</returns>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionBuildResponse> TransactionBuildPostWithHttpInfo(TransactionBuildRequest transactionBuildRequest)
        {
            // verify the required parameter 'transactionBuildRequest' is set
            if (transactionBuildRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionBuildRequest' when calling TransactionApi->TransactionBuildPost");

            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionBuildRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionBuildResponse>("/transaction/build", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionBuildPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Transaction Returns a built unsigned transaction payload, from a set of intended actions.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionBuildResponse</returns>
        public async System.Threading.Tasks.Task<TransactionBuildResponse> TransactionBuildPostAsync(TransactionBuildRequest transactionBuildRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionBuildResponse> localVarResponse = await TransactionBuildPostWithHttpInfoAsync(transactionBuildRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Transaction Returns a built unsigned transaction payload, from a set of intended actions.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionBuildRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionBuildResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionBuildResponse>> TransactionBuildPostWithHttpInfoAsync(TransactionBuildRequest transactionBuildRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionBuildRequest' is set
            if (transactionBuildRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionBuildRequest' when calling TransactionApi->TransactionBuildPost");


            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionBuildRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionBuildResponse>("/transaction/build", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionBuildPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finalize Transaction Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <returns>TransactionFinalizeResponse</returns>
        public TransactionFinalizeResponse TransactionFinalizePost(TransactionFinalizeRequest transactionFinalizeRequest)
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionFinalizeResponse> localVarResponse = TransactionFinalizePostWithHttpInfo(transactionFinalizeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finalize Transaction Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <returns>ApiResponse of TransactionFinalizeResponse</returns>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionFinalizeResponse> TransactionFinalizePostWithHttpInfo(TransactionFinalizeRequest transactionFinalizeRequest)
        {
            // verify the required parameter 'transactionFinalizeRequest' is set
            if (transactionFinalizeRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionFinalizeRequest' when calling TransactionApi->TransactionFinalizePost");

            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionFinalizeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionFinalizeResponse>("/transaction/finalize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionFinalizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finalize Transaction Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionFinalizeResponse</returns>
        public async System.Threading.Tasks.Task<TransactionFinalizeResponse> TransactionFinalizePostAsync(TransactionFinalizeRequest transactionFinalizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionFinalizeResponse> localVarResponse = await TransactionFinalizePostWithHttpInfoAsync(transactionFinalizeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finalize Transaction Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionFinalizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionFinalizeResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionFinalizeResponse>> TransactionFinalizePostWithHttpInfoAsync(TransactionFinalizeRequest transactionFinalizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionFinalizeRequest' is set
            if (transactionFinalizeRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionFinalizeRequest' when calling TransactionApi->TransactionFinalizePost");


            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionFinalizeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionFinalizeResponse>("/transaction/finalize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionFinalizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recent Transactions Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <returns>RecentTransactionsResponse</returns>
        public RecentTransactionsResponse TransactionRecentPost(RecentTransactionsRequest recentTransactionsRequest)
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<RecentTransactionsResponse> localVarResponse = TransactionRecentPostWithHttpInfo(recentTransactionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recent Transactions Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <returns>ApiResponse of RecentTransactionsResponse</returns>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<RecentTransactionsResponse> TransactionRecentPostWithHttpInfo(RecentTransactionsRequest recentTransactionsRequest)
        {
            // verify the required parameter 'recentTransactionsRequest' is set
            if (recentTransactionsRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'recentTransactionsRequest' when calling TransactionApi->TransactionRecentPost");

            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = recentTransactionsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RecentTransactionsResponse>("/transaction/recent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionRecentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recent Transactions Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecentTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<RecentTransactionsResponse> TransactionRecentPostAsync(RecentTransactionsRequest recentTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<RecentTransactionsResponse> localVarResponse = await TransactionRecentPostWithHttpInfoAsync(recentTransactionsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recent Transactions Returns user-initiated transactions which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recentTransactionsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecentTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<RecentTransactionsResponse>> TransactionRecentPostWithHttpInfoAsync(RecentTransactionsRequest recentTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'recentTransactionsRequest' is set
            if (recentTransactionsRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'recentTransactionsRequest' when calling TransactionApi->TransactionRecentPost");


            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = recentTransactionsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RecentTransactionsResponse>("/transaction/recent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionRecentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction Status Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <returns>TransactionStatusResponse</returns>
        public TransactionStatusResponse TransactionStatusPost(TransactionStatusRequest transactionStatusRequest)
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionStatusResponse> localVarResponse = TransactionStatusPostWithHttpInfo(transactionStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction Status Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <returns>ApiResponse of TransactionStatusResponse</returns>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionStatusResponse> TransactionStatusPostWithHttpInfo(TransactionStatusRequest transactionStatusRequest)
        {
            // verify the required parameter 'transactionStatusRequest' is set
            if (transactionStatusRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionStatusRequest' when calling TransactionApi->TransactionStatusPost");

            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionStatusRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionStatusResponse>("/transaction/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transaction Status Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionStatusResponse</returns>
        public async System.Threading.Tasks.Task<TransactionStatusResponse> TransactionStatusPostAsync(TransactionStatusRequest transactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionStatusResponse> localVarResponse = await TransactionStatusPostWithHttpInfoAsync(transactionStatusRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction Status Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionStatusResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionStatusResponse>> TransactionStatusPostWithHttpInfoAsync(TransactionStatusRequest transactionStatusRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionStatusRequest' is set
            if (transactionStatusRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionStatusRequest' when calling TransactionApi->TransactionStatusPost");


            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionStatusRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionStatusResponse>("/transaction/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionStatusPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Transaction Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <returns>TransactionSubmitResponse</returns>
        public TransactionSubmitResponse TransactionSubmitPost(TransactionSubmitRequest transactionSubmitRequest)
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionSubmitResponse> localVarResponse = TransactionSubmitPostWithHttpInfo(transactionSubmitRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Transaction Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <returns>ApiResponse of TransactionSubmitResponse</returns>
        public RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionSubmitResponse> TransactionSubmitPostWithHttpInfo(TransactionSubmitRequest transactionSubmitRequest)
        {
            // verify the required parameter 'transactionSubmitRequest' is set
            if (transactionSubmitRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionSubmitRequest' when calling TransactionApi->TransactionSubmitPost");

            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionSubmitRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionSubmitResponse>("/transaction/submit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionSubmitPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit Transaction Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionSubmitResponse</returns>
        public async System.Threading.Tasks.Task<TransactionSubmitResponse> TransactionSubmitPostAsync(TransactionSubmitRequest transactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionSubmitResponse> localVarResponse = await TransactionSubmitPostWithHttpInfoAsync(transactionSubmitRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Transaction Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status.
        /// </summary>
        /// <exception cref="RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSubmitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionSubmitResponse)</returns>
        public async System.Threading.Tasks.Task<RadixDlt.NetworkGateway.FrontendSdk.Client.ApiResponse<TransactionSubmitResponse>> TransactionSubmitPostWithHttpInfoAsync(TransactionSubmitRequest transactionSubmitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionSubmitRequest' is set
            if (transactionSubmitRequest == null)
                throw new RadixDlt.NetworkGateway.FrontendSdk.Client.ApiException(400, "Missing required parameter 'transactionSubmitRequest' when calling TransactionApi->TransactionSubmitPost");


            RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions localVarRequestOptions = new RadixDlt.NetworkGateway.FrontendSdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RadixDlt.NetworkGateway.FrontendSdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionSubmitRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionSubmitResponse>("/transaction/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionSubmitPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
