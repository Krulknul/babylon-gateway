/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// NotSyncedUpErrorAllOf
    /// </summary>
    [DataContract(Name = "NotSyncedUpError_allOf")]
    public partial class NotSyncedUpErrorAllOf : IEquatable<NotSyncedUpErrorAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotSyncedUpErrorAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotSyncedUpErrorAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotSyncedUpErrorAllOf" /> class.
        /// </summary>
        /// <param name="requestType">The request type that triggered this exception. (required).</param>
        /// <param name="currentSyncDelaySeconds">The current delay between the Gateway DB and the network ledger round timestamp. (required).</param>
        /// <param name="maxAllowedSyncDelaySeconds">The maximum allowed delay between the Gateway DB and the network ledger round timestamp for this &#x60;request_type&#x60;. (required).</param>
        public NotSyncedUpErrorAllOf(string requestType = default(string), long currentSyncDelaySeconds = default(long), long maxAllowedSyncDelaySeconds = default(long))
        {
            // to ensure "requestType" is required (not null)
            if (requestType == null)
            {
                throw new ArgumentNullException("requestType is a required property for NotSyncedUpErrorAllOf and cannot be null");
            }
            this.RequestType = requestType;
            this.CurrentSyncDelaySeconds = currentSyncDelaySeconds;
            this.MaxAllowedSyncDelaySeconds = maxAllowedSyncDelaySeconds;
        }

        /// <summary>
        /// The request type that triggered this exception.
        /// </summary>
        /// <value>The request type that triggered this exception.</value>
        [DataMember(Name = "request_type", IsRequired = true, EmitDefaultValue = true)]
        public string RequestType { get; set; }

        /// <summary>
        /// The current delay between the Gateway DB and the network ledger round timestamp.
        /// </summary>
        /// <value>The current delay between the Gateway DB and the network ledger round timestamp.</value>
        [DataMember(Name = "current_sync_delay_seconds", IsRequired = true, EmitDefaultValue = true)]
        public long CurrentSyncDelaySeconds { get; set; }

        /// <summary>
        /// The maximum allowed delay between the Gateway DB and the network ledger round timestamp for this &#x60;request_type&#x60;.
        /// </summary>
        /// <value>The maximum allowed delay between the Gateway DB and the network ledger round timestamp for this &#x60;request_type&#x60;.</value>
        [DataMember(Name = "max_allowed_sync_delay_seconds", IsRequired = true, EmitDefaultValue = true)]
        public long MaxAllowedSyncDelaySeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotSyncedUpErrorAllOf {\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  CurrentSyncDelaySeconds: ").Append(CurrentSyncDelaySeconds).Append("\n");
            sb.Append("  MaxAllowedSyncDelaySeconds: ").Append(MaxAllowedSyncDelaySeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotSyncedUpErrorAllOf);
        }

        /// <summary>
        /// Returns true if NotSyncedUpErrorAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of NotSyncedUpErrorAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotSyncedUpErrorAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestType == input.RequestType ||
                    (this.RequestType != null &&
                    this.RequestType.Equals(input.RequestType))
                ) && 
                (
                    this.CurrentSyncDelaySeconds == input.CurrentSyncDelaySeconds ||
                    this.CurrentSyncDelaySeconds.Equals(input.CurrentSyncDelaySeconds)
                ) && 
                (
                    this.MaxAllowedSyncDelaySeconds == input.MaxAllowedSyncDelaySeconds ||
                    this.MaxAllowedSyncDelaySeconds.Equals(input.MaxAllowedSyncDelaySeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestType != null)
                {
                    hashCode = (hashCode * 59) + this.RequestType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentSyncDelaySeconds.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxAllowedSyncDelaySeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
