/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// TransactionBuildRequest
    /// </summary>
    [DataContract(Name = "TransactionBuildRequest")]
    public partial class TransactionBuildRequest : IEquatable<TransactionBuildRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionBuildRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionBuildRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionBuildRequest" /> class.
        /// </summary>
        /// <param name="atStateIdentifier">atStateIdentifier.</param>
        /// <param name="actions">actions (required).</param>
        /// <param name="feePayer">feePayer (required).</param>
        /// <param name="message">The hex-encoded message bytes..</param>
        /// <param name="disableTokenMintAndBurn">If true, mints and burns (aside from fee payments) are not permitted during transaction execution..</param>
        public TransactionBuildRequest(PartialLedgerStateIdentifier atStateIdentifier = default(PartialLedgerStateIdentifier), List<Action> actions = default(List<Action>), AccountIdentifier feePayer = default(AccountIdentifier), string message = default(string), bool disableTokenMintAndBurn = default(bool))
        {
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new ArgumentNullException("actions is a required property for TransactionBuildRequest and cannot be null");
            }
            this.Actions = actions;
            // to ensure "feePayer" is required (not null)
            if (feePayer == null)
            {
                throw new ArgumentNullException("feePayer is a required property for TransactionBuildRequest and cannot be null");
            }
            this.FeePayer = feePayer;
            this.AtStateIdentifier = atStateIdentifier;
            this.Message = message;
            this.DisableTokenMintAndBurn = disableTokenMintAndBurn;
        }

        /// <summary>
        /// Gets or Sets AtStateIdentifier
        /// </summary>
        [DataMember(Name = "at_state_identifier", EmitDefaultValue = true)]
        public PartialLedgerStateIdentifier AtStateIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = true)]
        public List<Action> Actions { get; set; }

        /// <summary>
        /// Gets or Sets FeePayer
        /// </summary>
        [DataMember(Name = "fee_payer", IsRequired = true, EmitDefaultValue = true)]
        public AccountIdentifier FeePayer { get; set; }

        /// <summary>
        /// The hex-encoded message bytes.
        /// </summary>
        /// <value>The hex-encoded message bytes.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// If true, mints and burns (aside from fee payments) are not permitted during transaction execution.
        /// </summary>
        /// <value>If true, mints and burns (aside from fee payments) are not permitted during transaction execution.</value>
        [DataMember(Name = "disable_token_mint_and_burn", EmitDefaultValue = true)]
        public bool DisableTokenMintAndBurn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionBuildRequest {\n");
            sb.Append("  AtStateIdentifier: ").Append(AtStateIdentifier).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  FeePayer: ").Append(FeePayer).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  DisableTokenMintAndBurn: ").Append(DisableTokenMintAndBurn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionBuildRequest);
        }

        /// <summary>
        /// Returns true if TransactionBuildRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionBuildRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionBuildRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AtStateIdentifier == input.AtStateIdentifier ||
                    (this.AtStateIdentifier != null &&
                    this.AtStateIdentifier.Equals(input.AtStateIdentifier))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.FeePayer == input.FeePayer ||
                    (this.FeePayer != null &&
                    this.FeePayer.Equals(input.FeePayer))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.DisableTokenMintAndBurn == input.DisableTokenMintAndBurn ||
                    this.DisableTokenMintAndBurn.Equals(input.DisableTokenMintAndBurn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AtStateIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.AtStateIdentifier.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                if (this.FeePayer != null)
                {
                    hashCode = (hashCode * 59) + this.FeePayer.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableTokenMintAndBurn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
