/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// AccountStakeEntry
    /// </summary>
    [DataContract(Name = "AccountStakeEntry")]
    public partial class AccountStakeEntry : IEquatable<AccountStakeEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountStakeEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountStakeEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountStakeEntry" /> class.
        /// </summary>
        /// <param name="validatorIdentifier">validatorIdentifier (required).</param>
        /// <param name="delegatedStake">delegatedStake (required).</param>
        public AccountStakeEntry(ValidatorIdentifier validatorIdentifier = default(ValidatorIdentifier), TokenAmount delegatedStake = default(TokenAmount))
        {
            // to ensure "validatorIdentifier" is required (not null)
            if (validatorIdentifier == null)
            {
                throw new ArgumentNullException("validatorIdentifier is a required property for AccountStakeEntry and cannot be null");
            }
            this.ValidatorIdentifier = validatorIdentifier;
            // to ensure "delegatedStake" is required (not null)
            if (delegatedStake == null)
            {
                throw new ArgumentNullException("delegatedStake is a required property for AccountStakeEntry and cannot be null");
            }
            this.DelegatedStake = delegatedStake;
        }

        /// <summary>
        /// Gets or Sets ValidatorIdentifier
        /// </summary>
        [DataMember(Name = "validator_identifier", IsRequired = true, EmitDefaultValue = true)]
        public ValidatorIdentifier ValidatorIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets DelegatedStake
        /// </summary>
        [DataMember(Name = "delegated_stake", IsRequired = true, EmitDefaultValue = true)]
        public TokenAmount DelegatedStake { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountStakeEntry {\n");
            sb.Append("  ValidatorIdentifier: ").Append(ValidatorIdentifier).Append("\n");
            sb.Append("  DelegatedStake: ").Append(DelegatedStake).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountStakeEntry);
        }

        /// <summary>
        /// Returns true if AccountStakeEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountStakeEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountStakeEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ValidatorIdentifier == input.ValidatorIdentifier ||
                    (this.ValidatorIdentifier != null &&
                    this.ValidatorIdentifier.Equals(input.ValidatorIdentifier))
                ) && 
                (
                    this.DelegatedStake == input.DelegatedStake ||
                    (this.DelegatedStake != null &&
                    this.DelegatedStake.Equals(input.DelegatedStake))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidatorIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.ValidatorIdentifier.GetHashCode();
                }
                if (this.DelegatedStake != null)
                {
                    hashCode = (hashCode * 59) + this.DelegatedStake.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
