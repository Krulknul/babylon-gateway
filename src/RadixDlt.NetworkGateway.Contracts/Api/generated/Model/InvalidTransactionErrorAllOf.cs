/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// InvalidTransactionErrorAllOf
    /// </summary>
    [DataContract(Name = "InvalidTransactionError_allOf")]
    public partial class InvalidTransactionErrorAllOf : IEquatable<InvalidTransactionErrorAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidTransactionErrorAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvalidTransactionErrorAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidTransactionErrorAllOf" /> class.
        /// </summary>
        /// <param name="invalidTransaction">The transaction payload which was invalid. (required).</param>
        /// <param name="message">A descriptive reason for the invalid transaction. (required).</param>
        public InvalidTransactionErrorAllOf(string invalidTransaction = default(string), string message = default(string))
        {
            // to ensure "invalidTransaction" is required (not null)
            if (invalidTransaction == null)
            {
                throw new ArgumentNullException("invalidTransaction is a required property for InvalidTransactionErrorAllOf and cannot be null");
            }
            this.InvalidTransaction = invalidTransaction;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for InvalidTransactionErrorAllOf and cannot be null");
            }
            this.Message = message;
        }

        /// <summary>
        /// The transaction payload which was invalid.
        /// </summary>
        /// <value>The transaction payload which was invalid.</value>
        [DataMember(Name = "invalid_transaction", IsRequired = true, EmitDefaultValue = true)]
        public string InvalidTransaction { get; set; }

        /// <summary>
        /// A descriptive reason for the invalid transaction.
        /// </summary>
        /// <value>A descriptive reason for the invalid transaction.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvalidTransactionErrorAllOf {\n");
            sb.Append("  InvalidTransaction: ").Append(InvalidTransaction).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvalidTransactionErrorAllOf);
        }

        /// <summary>
        /// Returns true if InvalidTransactionErrorAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of InvalidTransactionErrorAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvalidTransactionErrorAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvalidTransaction == input.InvalidTransaction ||
                    (this.InvalidTransaction != null &&
                    this.InvalidTransaction.Equals(input.InvalidTransaction))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvalidTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidTransaction.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
