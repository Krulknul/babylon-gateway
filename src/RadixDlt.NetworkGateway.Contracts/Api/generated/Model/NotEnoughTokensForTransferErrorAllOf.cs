/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// NotEnoughTokensForTransferErrorAllOf
    /// </summary>
    [DataContract(Name = "NotEnoughTokensForTransferError_allOf")]
    public partial class NotEnoughTokensForTransferErrorAllOf : IEquatable<NotEnoughTokensForTransferErrorAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotEnoughTokensForTransferErrorAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotEnoughTokensForTransferErrorAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotEnoughTokensForTransferErrorAllOf" /> class.
        /// </summary>
        /// <param name="requestedAmount">requestedAmount (required).</param>
        /// <param name="availableAmount">availableAmount (required).</param>
        public NotEnoughTokensForTransferErrorAllOf(TokenAmount requestedAmount = default(TokenAmount), TokenAmount availableAmount = default(TokenAmount))
        {
            // to ensure "requestedAmount" is required (not null)
            if (requestedAmount == null)
            {
                throw new ArgumentNullException("requestedAmount is a required property for NotEnoughTokensForTransferErrorAllOf and cannot be null");
            }
            this.RequestedAmount = requestedAmount;
            // to ensure "availableAmount" is required (not null)
            if (availableAmount == null)
            {
                throw new ArgumentNullException("availableAmount is a required property for NotEnoughTokensForTransferErrorAllOf and cannot be null");
            }
            this.AvailableAmount = availableAmount;
        }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>
        [DataMember(Name = "requested_amount", IsRequired = true, EmitDefaultValue = true)]
        public TokenAmount RequestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAmount
        /// </summary>
        [DataMember(Name = "available_amount", IsRequired = true, EmitDefaultValue = true)]
        public TokenAmount AvailableAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotEnoughTokensForTransferErrorAllOf {\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("  AvailableAmount: ").Append(AvailableAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotEnoughTokensForTransferErrorAllOf);
        }

        /// <summary>
        /// Returns true if NotEnoughTokensForTransferErrorAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of NotEnoughTokensForTransferErrorAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotEnoughTokensForTransferErrorAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestedAmount == input.RequestedAmount ||
                    (this.RequestedAmount != null &&
                    this.RequestedAmount.Equals(input.RequestedAmount))
                ) && 
                (
                    this.AvailableAmount == input.AvailableAmount ||
                    (this.AvailableAmount != null &&
                    this.AvailableAmount.Equals(input.AvailableAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedAmount.GetHashCode();
                }
                if (this.AvailableAmount != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
