/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// InvalidSignatureErrorAllOf
    /// </summary>
    [DataContract(Name = "InvalidSignatureError_allOf")]
    public partial class InvalidSignatureErrorAllOf : IEquatable<InvalidSignatureErrorAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidSignatureErrorAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvalidSignatureErrorAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidSignatureErrorAllOf" /> class.
        /// </summary>
        /// <param name="invalidSignature">invalidSignature (required).</param>
        public InvalidSignatureErrorAllOf(Signature invalidSignature = default(Signature))
        {
            // to ensure "invalidSignature" is required (not null)
            if (invalidSignature == null)
            {
                throw new ArgumentNullException("invalidSignature is a required property for InvalidSignatureErrorAllOf and cannot be null");
            }
            this.InvalidSignature = invalidSignature;
        }

        /// <summary>
        /// Gets or Sets InvalidSignature
        /// </summary>
        [DataMember(Name = "invalid_signature", IsRequired = true, EmitDefaultValue = true)]
        public Signature InvalidSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvalidSignatureErrorAllOf {\n");
            sb.Append("  InvalidSignature: ").Append(InvalidSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvalidSignatureErrorAllOf);
        }

        /// <summary>
        /// Returns true if InvalidSignatureErrorAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of InvalidSignatureErrorAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvalidSignatureErrorAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvalidSignature == input.InvalidSignature ||
                    (this.InvalidSignature != null &&
                    this.InvalidSignature.Equals(input.InvalidSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvalidSignature != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidSignature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
