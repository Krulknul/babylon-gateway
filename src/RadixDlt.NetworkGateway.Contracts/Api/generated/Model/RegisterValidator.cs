/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// RegisterValidator
    /// </summary>
    [DataContract(Name = "RegisterValidator")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(BurnTokens), "BurnTokens")]
    [JsonSubtypes.KnownSubType(typeof(CreateTokenDefinition), "CreateTokenDefinition")]
    [JsonSubtypes.KnownSubType(typeof(MintTokens), "MintTokens")]
    [JsonSubtypes.KnownSubType(typeof(RegisterValidator), "RegisterValidator")]
    [JsonSubtypes.KnownSubType(typeof(StakeTokens), "StakeTokens")]
    [JsonSubtypes.KnownSubType(typeof(TransferTokens), "TransferTokens")]
    [JsonSubtypes.KnownSubType(typeof(UnregisterValidator), "UnregisterValidator")]
    [JsonSubtypes.KnownSubType(typeof(UnstakeTokens), "UnstakeTokens")]
    public partial class RegisterValidator : Action, IEquatable<RegisterValidator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterValidator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterValidator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterValidator" /> class.
        /// </summary>
        /// <param name="validator">validator (required).</param>
        /// <param name="type">type (required) (default to &quot;RegisterValidator&quot;).</param>
        public RegisterValidator(ValidatorIdentifier validator = default(ValidatorIdentifier), string type = "RegisterValidator") : base(type)
        {
            // to ensure "validator" is required (not null)
            if (validator == null)
            {
                throw new ArgumentNullException("validator is a required property for RegisterValidator and cannot be null");
            }
            this.Validator = validator;
        }

        /// <summary>
        /// Gets or Sets Validator
        /// </summary>
        [DataMember(Name = "validator", IsRequired = true, EmitDefaultValue = true)]
        public ValidatorIdentifier Validator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterValidator {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Validator: ").Append(Validator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterValidator);
        }

        /// <summary>
        /// Returns true if RegisterValidator instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterValidator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterValidator input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Validator == input.Validator ||
                    (this.Validator != null &&
                    this.Validator.Equals(input.Validator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Validator != null)
                {
                    hashCode = (hashCode * 59) + this.Validator.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
