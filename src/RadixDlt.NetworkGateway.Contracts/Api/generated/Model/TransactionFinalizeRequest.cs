/*
 * Radix Babylon Gateway API
 *
 * See https://docs.radixdlt.com/main/apis/introduction.html 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = RadixDlt.NetworkGateway.Contracts.Api.Client.FileParameter;
using OpenAPIDateConverter = RadixDlt.NetworkGateway.Contracts.Api.Client.OpenAPIDateConverter;

namespace RadixDlt.NetworkGateway.Contracts.Api.Model
{
    /// <summary>
    /// TransactionFinalizeRequest
    /// </summary>
    [DataContract(Name = "TransactionFinalizeRequest")]
    public partial class TransactionFinalizeRequest : IEquatable<TransactionFinalizeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionFinalizeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionFinalizeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionFinalizeRequest" /> class.
        /// </summary>
        /// <param name="unsignedTransaction">The unsigned transaction payload, hex encoded. (required).</param>
        /// <param name="signature">signature (required).</param>
        /// <param name="submit">If true, the transaction is immediately submitted after finalization. However, we recommend that a transaction is submitted in a step after finalization. This ensures that you have a transaction identifier on hand to monitor the transaction status, even if the submission request failed with an uncertain error. .</param>
        public TransactionFinalizeRequest(string unsignedTransaction = default(string), Signature signature = default(Signature), bool submit = default(bool))
        {
            // to ensure "unsignedTransaction" is required (not null)
            if (unsignedTransaction == null)
            {
                throw new ArgumentNullException("unsignedTransaction is a required property for TransactionFinalizeRequest and cannot be null");
            }
            this.UnsignedTransaction = unsignedTransaction;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for TransactionFinalizeRequest and cannot be null");
            }
            this.Signature = signature;
            this.Submit = submit;
        }

        /// <summary>
        /// The unsigned transaction payload, hex encoded.
        /// </summary>
        /// <value>The unsigned transaction payload, hex encoded.</value>
        [DataMember(Name = "unsigned_transaction", IsRequired = true, EmitDefaultValue = true)]
        public string UnsignedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public Signature Signature { get; set; }

        /// <summary>
        /// If true, the transaction is immediately submitted after finalization. However, we recommend that a transaction is submitted in a step after finalization. This ensures that you have a transaction identifier on hand to monitor the transaction status, even if the submission request failed with an uncertain error. 
        /// </summary>
        /// <value>If true, the transaction is immediately submitted after finalization. However, we recommend that a transaction is submitted in a step after finalization. This ensures that you have a transaction identifier on hand to monitor the transaction status, even if the submission request failed with an uncertain error. </value>
        [DataMember(Name = "submit", EmitDefaultValue = true)]
        public bool Submit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionFinalizeRequest {\n");
            sb.Append("  UnsignedTransaction: ").Append(UnsignedTransaction).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Submit: ").Append(Submit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionFinalizeRequest);
        }

        /// <summary>
        /// Returns true if TransactionFinalizeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionFinalizeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionFinalizeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnsignedTransaction == input.UnsignedTransaction ||
                    (this.UnsignedTransaction != null &&
                    this.UnsignedTransaction.Equals(input.UnsignedTransaction))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Submit == input.Submit ||
                    this.Submit.Equals(input.Submit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnsignedTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.UnsignedTransaction.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Submit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
