// <auto-generated />
using System;
using Common.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAggregator.Migrations
{
    [DbContext(typeof(CommonDbContext))]
    [Migration("20211111155718_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Database.Models.Ledger.LedgerTransaction", b =>
                {
                    b.Property<long>("ResultantStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("state_version");

                    b.Property<int?>("EndOfEpochRound")
                        .HasColumnType("integer")
                        .HasColumnName("end_of_round");

                    b.Property<long>("Epoch")
                        .HasColumnType("bigint")
                        .HasColumnName("epoch");

                    b.Property<string>("FeePaid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fee_paid");

                    b.Property<int>("IndexInEpoch")
                        .HasColumnType("integer")
                        .HasColumnName("index_in_epoch");

                    b.Property<bool>("IsEndOfEpoch")
                        .HasColumnType("boolean")
                        .HasColumnName("is_end_of_epoch");

                    b.Property<byte[]>("Message")
                        .HasColumnType("bytea")
                        .HasColumnName("message");

                    b.Property<long?>("ParentStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_state_version");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<byte[]>("TransactionAccumulator")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_accumulator");

                    b.Property<byte[]>("TransactionIdentifierHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_id");

                    b.HasKey("ResultantStateVersion")
                        .HasName("pk_ledger_transactions");

                    b.HasAlternateKey("TransactionAccumulator")
                        .HasName("ak_ledger_transactions_transaction_accumulator");

                    b.HasAlternateKey("TransactionIdentifierHash")
                        .HasName("ak_ledger_transactions_transaction_id");

                    b.HasIndex("ParentStateVersion")
                        .HasDatabaseName("ix_ledger_transactions_parent_state_version");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_ledger_transactions_timestamp");

                    b.HasIndex("Epoch", "EndOfEpochRound")
                        .IsUnique()
                        .HasDatabaseName("ix_ledger_transactions_epoch_end_of_round")
                        .HasFilter("end_of_round IS NOT NULL");

                    b.ToTable("ledger_transactions", (string)null);

                    b.HasCheckConstraint("CK_CompleteHistory", "state_version = 1 OR state_version = parent_state_version + 1");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.OperationGroup", b =>
                {
                    b.Property<long>("ResultantStateVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("state_version");

                    b.Property<int>("OperationGroupIndex")
                        .HasColumnType("integer")
                        .HasColumnName("operation_group_index");

                    b.HasKey("ResultantStateVersion", "OperationGroupIndex")
                        .HasName("pk_operation_groups");

                    b.ToTable("operation_groups", (string)null);
                });

            modelBuilder.Entity("Common.Database.Models.Node", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<bool>("EnabledForIndexing")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled_for_indexing");

                    b.Property<decimal>("TrustWeighting")
                        .HasColumnType("numeric")
                        .HasColumnName("trust_weighting");

                    b.HasKey("Name")
                        .HasName("pk_nodes");

                    b.ToTable("nodes", (string)null);
                });

            modelBuilder.Entity("Common.Database.Models.RawTransaction", b =>
                {
                    b.Property<byte[]>("TransactionIdentifierHash")
                        .HasColumnType("bytea")
                        .HasColumnName("transaction_id");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("SubmittedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_timestamp");

                    b.HasKey("TransactionIdentifierHash")
                        .HasName("pk_raw_transactions");

                    b.ToTable("raw_transactions", (string)null);
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.LedgerTransaction", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentStateVersion")
                        .HasConstraintName("fk_ledger_transactions_ledger_transactions_parent_state_version");

                    b.HasOne("Common.Database.Models.RawTransaction", "RawTransaction")
                        .WithMany()
                        .HasForeignKey("TransactionIdentifierHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ledger_transactions_raw_transactions_transaction_id");

                    b.Navigation("Parent");

                    b.Navigation("RawTransaction");
                });

            modelBuilder.Entity("Common.Database.Models.Ledger.OperationGroup", b =>
                {
                    b.HasOne("Common.Database.Models.Ledger.LedgerTransaction", "LedgerTransaction")
                        .WithMany()
                        .HasForeignKey("ResultantStateVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operation_groups_ledger_transactions_state_version");

                    b.OwnsOne("Common.Database.Models.Ledger.InferredAction", "InferredAction", b1 =>
                        {
                            b1.Property<long>("OperationGroupResultantStateVersion")
                                .HasColumnType("bigint")
                                .HasColumnName("state_version");

                            b1.Property<int>("OperationGroupIndex")
                                .HasColumnType("integer")
                                .HasColumnName("operation_group_index");

                            b1.Property<string>("Amount")
                                .HasColumnType("text")
                                .HasColumnName("inferred_action_amount");

                            b1.Property<string>("FromAddress")
                                .HasColumnType("text")
                                .HasColumnName("inferred_action_from");

                            b1.Property<string>("ResourceIdentifier")
                                .HasColumnType("text")
                                .HasColumnName("inferred_action_rri");

                            b1.Property<string>("ToAddress")
                                .HasColumnType("text")
                                .HasColumnName("inferred_action_to");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("inferred_action_type");

                            b1.HasKey("OperationGroupResultantStateVersion", "OperationGroupIndex");

                            b1.ToTable("operation_groups");

                            b1.WithOwner()
                                .HasForeignKey("OperationGroupResultantStateVersion", "OperationGroupIndex")
                                .HasConstraintName("fk_operation_groups_operation_groups_inferred_action_operation");
                        });

                    b.Navigation("InferredAction");

                    b.Navigation("LedgerTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
